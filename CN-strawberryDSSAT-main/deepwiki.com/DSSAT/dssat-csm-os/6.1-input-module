<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="preload" href="../../_next/static/media/569ce4b8f30dc480-s.p.woff2" as="font" crossorigin="" type="font/woff2"/><link rel="preload" href="../../_next/static/media/93f479601ee12b01-s.p.woff2" as="font" crossorigin="" type="font/woff2"/><link rel="stylesheet" href="../../_next/static/css/f30152c0704fba31.css?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" data-precedence="next"/><link rel="stylesheet" href="../../_next/static/css/3b4ac2f8d4dcca10.css?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" data-precedence="next"/><link rel="preload" as="script" fetchPriority="low" href="../../_next/static/chunks/webpack-acbbbb548492d4a6.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX"/><script src="../../_next/static/chunks/4bd1b696-cebf68b71ed1e85d.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/1684-4844472ae19bd271.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/main-app-8ab5af3d6b81086e.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/b1298b8d-549c141f97a3b262.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/378e5a93-3b0f971d3611a8a5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/f7f68e2d-40290491c524df5c.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/5009-cf1c1739f4eccbfa.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/3377-d302682beb4206f6.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/6671-b0da8a89e8d16b02.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/9853-ba5965ca136d44c2.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/app/layout-d0b9af9c0a55f7f8.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/c16f53c3-c80d3b6d0c4af7a0.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/537-d9d5e9261de3e69c.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/2136-0f8d797058c844d4.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/9970-05da82a5b9af6015.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/1235-2bb070afbba964c5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/4889-88dda955466eba30.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/168-d8e567d7acd9a9f8.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/5313-a7847b64d71d9faa.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/8335-a8e1c4449a152223.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/app/[org]/[repo]/[[...wikiRoutes]]/page-ca7c0c844ceea0c1.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/7bf36345-20a79815585d2583.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/7646-a48026d39d9219b5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/3449-68575972e52aa82b.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/1915-d5f0c671ad4e8728.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script src="../../_next/static/chunks/app/[org]/[repo]/layout-b6fc08207734c34b.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><meta name="next-size-adjust" content=""/><title>Input Module | DSSAT/dssat-csm-os | DeepWiki</title><meta name="description" content="The Input Module is a critical component of the DSSAT Cropping System Model (DSSAT-CSM) that handles the reading, processing, and validation of all input data required for crop simulations. This inclu"/><meta property="og:title" content="Input Module | DSSAT/dssat-csm-os | DeepWiki"/><meta property="og:description" content="The Input Module is a critical component of the DSSAT Cropping System Model (DSSAT-CSM) that handles the reading, processing, and validation of all input data required for crop simulations. This inclu"/><meta property="og:url" content="https://deepwiki.com/DSSAT/dssat-csm-os/6.1-input-module"/><meta property="og:site_name" content="DeepWiki"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary"/><meta name="twitter:title" content="Input Module | DSSAT/dssat-csm-os | DeepWiki"/><meta name="twitter:description" content="The Input Module is a critical component of the DSSAT Cropping System Model (DSSAT-CSM) that handles the reading, processing, and validation of all input data required for crop simulations. This inclu"/><link rel="icon" href="../../favicon.ico" type="image/x-icon" sizes="48x48"/><link rel="icon" href="../../icon.png?66aaf51e0e68c818" type="image/png" sizes="16x16"/><link rel="apple-touch-icon" href="https://deepwiki.com/apple-icon.png?a4f658907db0ab87" type="image/png" sizes="180x180"/><script src="../../_next/static/chunks/polyfills-42372ed130431b0a.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" noModule=""></script></head><body class="__variable_5cfdac font-geist-sans relative min-h-screen __variable_9a8899 bg-background antialiased"><section aria-label="Notifications alt+T" tabindex="-1" aria-live="polite" aria-relevant="additions text" aria-atomic="false"></section><script>((e,t,r,n,a,o,i,s)=>{let u=document.documentElement,l=["light","dark"];function c(t){var r;(Array.isArray(e)?e:[e]).forEach(e=>{let r="class"===e,n=r&&o?a.map(e=>o[e]||e):a;r?(u.classList.remove(...n),u.classList.add(o&&o[t]?o[t]:t)):u.setAttribute(e,t)}),r=t,s&&l.includes(r)&&(u.style.colorScheme=r)}if(n)c(n);else try{let e=localStorage.getItem(t)||r,n=i&&"system"===e?window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light":e;c(n)}catch(e){}})("class","theme","light",null,["light","dark"],null,true,true)</script><div class="flex min-h-screen w-full flex-col text-white" id="codebase-wiki-repo-page"><div class="bg-main border-b-border sticky top-0 z-30 border-b border-dashed"><div class="font-geist-mono relative flex h-8 items-center justify-center text-xs font-medium text-white sm:hidden"><div class="powered-by-devin-gradient absolute inset-0 z-[-1] h-8 w-full"></div><a target="_blank" rel="noopener noreferrer" class="flex items-center gap-2" href="https://devin.ai"><svg class="size-3 [&amp;_path]:stroke-0 [&amp;_path]:animate-[custom-pulse_1.8s_infinite_var(--delay,0s)]" xmlns="http://www.w3.org/2000/svg" viewBox="110 110 460 500"><path style="fill:#21c19a" class="[--delay:0.6s]" d="M418.73,332.37c9.84-5.68,22.07-5.68,31.91,0l25.49,14.71c.82.48,1.69.8,2.58,1.06.19.06.37.11.55.16.87.21,1.76.34,2.65.35.04,0,.08.02.13.02.1,0,.19-.03.29-.04.83-.02,1.64-.13,2.45-.32.14-.03.28-.05.42-.09.87-.24,1.7-.59,2.5-1.03.08-.04.17-.06.25-.1l50.97-29.43c3.65-2.11,5.9-6.01,5.9-10.22v-58.86c0-4.22-2.25-8.11-5.9-10.22l-50.97-29.43c-3.65-2.11-8.15-2.11-11.81,0l-50.97,29.43c-.08.04-.13.11-.2.16-.78.48-1.51,1.02-2.15,1.66-.1.1-.18.21-.28.31-.57.6-1.08,1.26-1.51,1.97-.07.12-.15.22-.22.34-.44.77-.77,1.6-1.03,2.47-.05.19-.1.37-.14.56-.22.89-.37,1.81-.37,2.76v29.43c0,11.36-6.11,21.95-15.95,27.63-9.84,5.68-22.06,5.68-31.91,0l-25.49-14.71c-.82-.48-1.69-.8-2.57-1.06-.19-.06-.37-.11-.56-.16-.88-.21-1.76-.34-2.65-.34-.13,0-.26.02-.4.02-.84.02-1.66.13-2.47.32-.13.03-.27.05-.4.09-.87.24-1.71.6-2.51,1.04-.08.04-.16.06-.24.1l-50.97,29.43c-3.65,2.11-5.9,6.01-5.9,10.22v58.86c0,4.22,2.25,8.11,5.9,10.22l50.97,29.43c.08.04.17.06.24.1.8.44,1.64.79,2.5,1.03.14.04.28.06.42.09.81.19,1.62.3,2.45.32.1,0,.19.04.29.04.04,0,.08-.02.13-.02.89,0,1.77-.13,2.65-.35.19-.04.37-.1.56-.16.88-.26,1.75-.59,2.58-1.06l25.49-14.71c9.84-5.68,22.06-5.68,31.91,0,9.84,5.68,15.95,16.27,15.95,27.63v29.43c0,.95.15,1.87.37,2.76.05.19.09.37.14.56.25.86.59,1.69,1.03,2.47.07.12.15.22.22.34.43.71.94,1.37,1.51,1.97.1.1.18.21.28.31.65.63,1.37,1.18,2.15,1.66.07.04.13.11.2.16l50.97,29.43c1.83,1.05,3.86,1.58,5.9,1.58s4.08-.53,5.9-1.58l50.97-29.43c3.65-2.11,5.9-6.01,5.9-10.22v-58.86c0-4.22-2.25-8.11-5.9-10.22l-50.97-29.43c-.08-.04-.16-.06-.24-.1-.8-.44-1.64-.8-2.51-1.04-.13-.04-.26-.05-.39-.09-.82-.2-1.65-.31-2.49-.33-.13,0-.25-.02-.38-.02-.89,0-1.78.13-2.66.35-.18.04-.36.1-.54.15-.88.26-1.75.59-2.58,1.07l-25.49,14.72c-9.84,5.68-22.07,5.68-31.9,0-9.84-5.68-15.95-16.27-15.95-27.63s6.11-21.95,15.95-27.63Z"></path><path style="fill:#3969ca" d="M141.09,317.65l50.97,29.43c1.83,1.05,3.86,1.58,5.9,1.58s4.08-.53,5.9-1.58l50.97-29.43c.08-.04.13-.11.2-.16.78-.48,1.51-1.02,2.15-1.66.1-.1.18-.21.28-.31.57-.6,1.08-1.26,1.51-1.97.07-.12.15-.22.22-.34.44-.77.77-1.6,1.03-2.47.05-.19.1-.37.14-.56.22-.89.37-1.81.37-2.76v-29.43c0-11.36,6.11-21.95,15.96-27.63s22.06-5.68,31.91,0l25.49,14.71c.82.48,1.69.8,2.57,1.06.19.06.37.11.56.16.87.21,1.76.34,2.64.35.04,0,.09.02.13.02.1,0,.19-.04.29-.04.83-.02,1.65-.13,2.45-.32.14-.03.28-.05.41-.09.87-.24,1.71-.6,2.51-1.04.08-.04.16-.06.24-.1l50.97-29.43c3.65-2.11,5.9-6.01,5.9-10.22v-58.86c0-4.22-2.25-8.11-5.9-10.22l-50.97-29.43c-3.65-2.11-8.15-2.11-11.81,0l-50.97,29.43c-.08.04-.13.11-.2.16-.78.48-1.51,1.02-2.15,1.66-.1.1-.18.21-.28.31-.57.6-1.08,1.26-1.51,1.97-.07.12-.15.22-.22.34-.44.77-.77,1.6-1.03,2.47-.05.19-.1.37-.14.56-.22.89-.37,1.81-.37,2.76v29.43c0,11.36-6.11,21.95-15.95,27.63-9.84,5.68-22.07,5.68-31.91,0l-25.49-14.71c-.82-.48-1.69-.8-2.58-1.06-.19-.06-.37-.11-.55-.16-.88-.21-1.76-.34-2.65-.35-.13,0-.26.02-.4.02-.83.02-1.66.13-2.47.32-.13.03-.27.05-.4.09-.87.24-1.71.6-2.51,1.04-.08.04-.16.06-.24.1l-50.97,29.43c-3.65,2.11-5.9,6.01-5.9,10.22v58.86c0,4.22,2.25,8.11,5.9,10.22Z"></path><path style="fill:#0294de" class="[--delay:1.2s]" d="M396.88,484.35l-50.97-29.43c-.08-.04-.17-.06-.24-.1-.8-.44-1.64-.79-2.51-1.03-.14-.04-.27-.06-.41-.09-.81-.19-1.64-.3-2.47-.32-.13,0-.26-.02-.39-.02-.89,0-1.78.13-2.66.35-.18.04-.36.1-.54.15-.88.26-1.76.59-2.58,1.07l-25.49,14.72c-9.84,5.68-22.06,5.68-31.9,0-9.84-5.68-15.96-16.27-15.96-27.63v-29.43c0-.95-.15-1.87-.37-2.76-.05-.19-.09-.37-.14-.56-.25-.86-.59-1.69-1.03-2.47-.07-.12-.15-.22-.22-.34-.43-.71-.94-1.37-1.51-1.97-.1-.1-.18-.21-.28-.31-.65-.63-1.37-1.18-2.15-1.66-.07-.04-.13-.11-.2-.16l-50.97-29.43c-3.65-2.11-8.15-2.11-11.81,0l-50.97,29.43c-3.65,2.11-5.9,6.01-5.9,10.22v58.86c0,4.22,2.25,8.11,5.9,10.22l50.97,29.43c.08.04.17.06.25.1.8.44,1.63.79,2.5,1.03.14.04.29.06.43.09.8.19,1.61.3,2.43.32.1,0,.2.04.3.04.04,0,.09-.02.13-.02.88,0,1.77-.13,2.64-.34.19-.04.37-.1.56-.16.88-.26,1.75-.59,2.57-1.06l25.49-14.71c9.84-5.68,22.06-5.68,31.91,0,9.84,5.68,15.95,16.27,15.95,27.63v29.43c0,.95.15,1.87.37,2.76.05.19.09.37.14.56.25.86.59,1.69,1.03,2.47.07.12.15.22.22.34.43.71.94,1.37,1.51,1.97.1.1.18.21.28.31.65.63,1.37,1.18,2.15,1.66.07.04.13.11.2.16l50.97,29.43c1.83,1.05,3.86,1.58,5.9,1.58s4.08-.53,5.9-1.58l50.97-29.43c3.65-2.11,5.9-6.01,5.9-10.22v-58.86c0-4.22-2.25-8.11-5.9-10.22Z"></path></svg>Try DeepWiki for private repos in Devin</a></div><div class="container-wrapper"><div class="container mx-auto flex w-full flex-row items-center gap-2 py-4 md:py-6"><a class="flex items-center gap-3" href="https://deepwiki.com"><span class="text-base font-medium leading-none text-white md:text-lg hidden sm:block">DeepWiki</span></a><div class="flex-1"><div class="flex flex-col gap-1"><a class="block text-xs font-medium leading-none text-white sm:hidden md:text-lg" href="https://deepwiki.com/">DeepWiki</a><p class="text-text-secondary text-sm font-normal leading-none md:text-lg"><a href="https://github.com/DSSAT/dssat-csm-os" target="_blank" rel="noopener noreferrer" class="text-[#8f8f8f] transition-colors hover:text-black dark:hover:text-white">DSSAT/dssat-csm-os</a></p></div></div><div class="flex items-center gap-4"><a href="https://devin.ai" target="_blank" rel="noopener noreferrer" class="group hidden items-center gap-1.5 md:flex"><div class="relative"><span class="text-xs font-light text-white/70 transition-colors group-hover:text-white">Try DeepWiki for private repos in</span><div class="absolute bottom-0 left-0 h-[1px] w-0 bg-black/30 transition-all duration-300 group-hover:w-full dark:bg-white/30"></div></div><div class="flex items-center gap-1 transition-transform duration-300 group-hover:translate-x-0.5"><svg class="size-4 transform transition-transform duration-700 group-hover:rotate-180 [&amp;_path]:stroke-0" xmlns="http://www.w3.org/2000/svg" viewBox="110 110 460 500"><path style="fill:#21c19a" class="" d="M418.73,332.37c9.84-5.68,22.07-5.68,31.91,0l25.49,14.71c.82.48,1.69.8,2.58,1.06.19.06.37.11.55.16.87.21,1.76.34,2.65.35.04,0,.08.02.13.02.1,0,.19-.03.29-.04.83-.02,1.64-.13,2.45-.32.14-.03.28-.05.42-.09.87-.24,1.7-.59,2.5-1.03.08-.04.17-.06.25-.1l50.97-29.43c3.65-2.11,5.9-6.01,5.9-10.22v-58.86c0-4.22-2.25-8.11-5.9-10.22l-50.97-29.43c-3.65-2.11-8.15-2.11-11.81,0l-50.97,29.43c-.08.04-.13.11-.2.16-.78.48-1.51,1.02-2.15,1.66-.1.1-.18.21-.28.31-.57.6-1.08,1.26-1.51,1.97-.07.12-.15.22-.22.34-.44.77-.77,1.6-1.03,2.47-.05.19-.1.37-.14.56-.22.89-.37,1.81-.37,2.76v29.43c0,11.36-6.11,21.95-15.95,27.63-9.84,5.68-22.06,5.68-31.91,0l-25.49-14.71c-.82-.48-1.69-.8-2.57-1.06-.19-.06-.37-.11-.56-.16-.88-.21-1.76-.34-2.65-.34-.13,0-.26.02-.4.02-.84.02-1.66.13-2.47.32-.13.03-.27.05-.4.09-.87.24-1.71.6-2.51,1.04-.08.04-.16.06-.24.1l-50.97,29.43c-3.65,2.11-5.9,6.01-5.9,10.22v58.86c0,4.22,2.25,8.11,5.9,10.22l50.97,29.43c.08.04.17.06.24.1.8.44,1.64.79,2.5,1.03.14.04.28.06.42.09.81.19,1.62.3,2.45.32.1,0,.19.04.29.04.04,0,.08-.02.13-.02.89,0,1.77-.13,2.65-.35.19-.04.37-.1.56-.16.88-.26,1.75-.59,2.58-1.06l25.49-14.71c9.84-5.68,22.06-5.68,31.91,0,9.84,5.68,15.95,16.27,15.95,27.63v29.43c0,.95.15,1.87.37,2.76.05.19.09.37.14.56.25.86.59,1.69,1.03,2.47.07.12.15.22.22.34.43.71.94,1.37,1.51,1.97.1.1.18.21.28.31.65.63,1.37,1.18,2.15,1.66.07.04.13.11.2.16l50.97,29.43c1.83,1.05,3.86,1.58,5.9,1.58s4.08-.53,5.9-1.58l50.97-29.43c3.65-2.11,5.9-6.01,5.9-10.22v-58.86c0-4.22-2.25-8.11-5.9-10.22l-50.97-29.43c-.08-.04-.16-.06-.24-.1-.8-.44-1.64-.8-2.51-1.04-.13-.04-.26-.05-.39-.09-.82-.2-1.65-.31-2.49-.33-.13,0-.25-.02-.38-.02-.89,0-1.78.13-2.66.35-.18.04-.36.1-.54.15-.88.26-1.75.59-2.58,1.07l-25.49,14.72c-9.84,5.68-22.07,5.68-31.9,0-9.84-5.68-15.95-16.27-15.95-27.63s6.11-21.95,15.95-27.63Z"></path><path style="fill:#3969ca" d="M141.09,317.65l50.97,29.43c1.83,1.05,3.86,1.58,5.9,1.58s4.08-.53,5.9-1.58l50.97-29.43c.08-.04.13-.11.2-.16.78-.48,1.51-1.02,2.15-1.66.1-.1.18-.21.28-.31.57-.6,1.08-1.26,1.51-1.97.07-.12.15-.22.22-.34.44-.77.77-1.6,1.03-2.47.05-.19.1-.37.14-.56.22-.89.37-1.81.37-2.76v-29.43c0-11.36,6.11-21.95,15.96-27.63s22.06-5.68,31.91,0l25.49,14.71c.82.48,1.69.8,2.57,1.06.19.06.37.11.56.16.87.21,1.76.34,2.64.35.04,0,.09.02.13.02.1,0,.19-.04.29-.04.83-.02,1.65-.13,2.45-.32.14-.03.28-.05.41-.09.87-.24,1.71-.6,2.51-1.04.08-.04.16-.06.24-.1l50.97-29.43c3.65-2.11,5.9-6.01,5.9-10.22v-58.86c0-4.22-2.25-8.11-5.9-10.22l-50.97-29.43c-3.65-2.11-8.15-2.11-11.81,0l-50.97,29.43c-.08.04-.13.11-.2.16-.78.48-1.51,1.02-2.15,1.66-.1.1-.18.21-.28.31-.57.6-1.08,1.26-1.51,1.97-.07.12-.15.22-.22.34-.44.77-.77,1.6-1.03,2.47-.05.19-.1.37-.14.56-.22.89-.37,1.81-.37,2.76v29.43c0,11.36-6.11,21.95-15.95,27.63-9.84,5.68-22.07,5.68-31.91,0l-25.49-14.71c-.82-.48-1.69-.8-2.58-1.06-.19-.06-.37-.11-.55-.16-.88-.21-1.76-.34-2.65-.35-.13,0-.26.02-.4.02-.83.02-1.66.13-2.47.32-.13.03-.27.05-.4.09-.87.24-1.71.6-2.51,1.04-.08.04-.16.06-.24.1l-50.97,29.43c-3.65,2.11-5.9,6.01-5.9,10.22v58.86c0,4.22,2.25,8.11,5.9,10.22Z"></path><path style="fill:#0294de" class="" d="M396.88,484.35l-50.97-29.43c-.08-.04-.17-.06-.24-.1-.8-.44-1.64-.79-2.51-1.03-.14-.04-.27-.06-.41-.09-.81-.19-1.64-.3-2.47-.32-.13,0-.26-.02-.39-.02-.89,0-1.78.13-2.66.35-.18.04-.36.1-.54.15-.88.26-1.76.59-2.58,1.07l-25.49,14.72c-9.84,5.68-22.06,5.68-31.9,0-9.84-5.68-15.96-16.27-15.96-27.63v-29.43c0-.95-.15-1.87-.37-2.76-.05-.19-.09-.37-.14-.56-.25-.86-.59-1.69-1.03-2.47-.07-.12-.15-.22-.22-.34-.43-.71-.94-1.37-1.51-1.97-.1-.1-.18-.21-.28-.31-.65-.63-1.37-1.18-2.15-1.66-.07-.04-.13-.11-.2-.16l-50.97-29.43c-3.65-2.11-8.15-2.11-11.81,0l-50.97,29.43c-3.65,2.11-5.9,6.01-5.9,10.22v58.86c0,4.22,2.25,8.11,5.9,10.22l50.97,29.43c.08.04.17.06.25.1.8.44,1.63.79,2.5,1.03.14.04.29.06.43.09.8.19,1.61.3,2.43.32.1,0,.2.04.3.04.04,0,.09-.02.13-.02.88,0,1.77-.13,2.64-.34.19-.04.37-.1.56-.16.88-.26,1.75-.59,2.57-1.06l25.49-14.71c9.84-5.68,22.06-5.68,31.91,0,9.84,5.68,15.95,16.27,15.95,27.63v29.43c0,.95.15,1.87.37,2.76.05.19.09.37.14.56.25.86.59,1.69,1.03,2.47.07.12.15.22.22.34.43.71.94,1.37,1.51,1.97.1.1.18.21.28.31.65.63,1.37,1.18,2.15,1.66.07.04.13.11.2.16l50.97,29.43c1.83,1.05,3.86,1.58,5.9,1.58s4.08-.53,5.9-1.58l50.97-29.43c3.65-2.11,5.9-6.01,5.9-10.22v-58.86c0-4.22-2.25-8.11-5.9-10.22Z"></path></svg><span class="text-sm font-medium text-white">Devin</span></div></a><button class="border-border bg-surface hover:border-border-hover hover:bg-component ml-auto flex cursor-pointer items-center gap-1.5 rounded-md border px-3 py-1.5 text-sm font-medium text-white transition-all" aria-label="Share"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><circle cx="18" cy="5" r="3"></circle><circle cx="6" cy="12" r="3"></circle><circle cx="18" cy="19" r="3"></circle><line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line><line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line></svg><span>Share</span></button><div class="h-8 w-8"></div></div></div></div></div><!--$--><div class="w-full flex-1"><div class="container-wrapper relative mx-auto h-full px-0"><div class="container relative mx-auto flex h-full w-full flex-col gap-0 max-md:!px-0 md:flex-row md:gap-6 lg:gap-10"><div class="border-r-border hidden max-h-screen border-r border-dashed py-7 pr-4 transition-[border-radius] md:sticky md:left-0 md:top-20 md:block md:h-[calc(100vh-82px)] md:w-64 md:flex-shrink-0 md:overflow-y-auto lg:py-9 xl:w-72"><div class="flex h-full w-full max-w-full flex-shrink-0 flex-col overflow-hidden" style="scrollbar-color:var(--color-border) transparent"><div class="flex-shrink-0 px-2"><div class="text-secondary pb-1 text-xs">Last indexed: <!-- -->6 May 2025<!-- --> (<a href="https://github.com/DSSAT/dssat-csm-os/commits/dc5d6ba0" target="_blank" rel="noopener noreferrer">dc5d6b</a>)</div></div><ul class="flex-1 flex-shrink-0 space-y-1 overflow-y-auto py-1" style="scrollbar-width:none"><li style="padding-left:0"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="1-overview">Overview</a></li><li style="padding-left:0"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="2-system-architecture">System Architecture</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="2.1-build-system">Build System</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="2.2-simulation-control">Simulation Control</a></li><li style="padding-left:0"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="3-core-modules">Core Modules</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="3.1-land-module">LAND Module</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="3.2-soil-module">SOIL Module</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="3.3-plant-module">PLANT Module</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="3.4-weather-module">WEATHER Module</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="3.5-spam-module">SPAM Module</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="3.6-management-operations">Management Operations</a></li><li style="padding-left:0"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="4-plant-models">Plant Models</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="4.1-cropgro-model">CROPGRO Model</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="4.2-ceres-models">CERES Models</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="4.3-forage-model">FORAGE Model</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="4.4-cscer-and-other-models">CSCER and Other Models</a></li><li style="padding-left:0"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="5-soil-processes">Soil Processes</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="5.1-soil-water-balance">Soil Water Balance</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="5.2-greenhouse-gas-emissions">Greenhouse Gas Emissions</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="5.3-soil-dynamics">Soil Dynamics</a></li><li style="padding-left:0"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="6-inputoutput-system">Input/Output System</a></li><li style="padding-left:12px"><a data-selected="true" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="6.1-input-module">Input Module</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="6.2-measurement-codes">Measurement Codes</a></li><li style="padding-left:12px"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="6.3-output-generation">Output Generation</a></li><li style="padding-left:0"><a data-selected="false" class="hover:bg-hover block w-full rounded px-2 py-1.5 text-left text-sm transition-none text-secondary data-[selected=true]:bg-hover data-[selected=true]:text-primary font-normal data-[selected=true]:font-normal" href="7-configuration-system">Configuration System</a></li></ul></div></div><div class="flex h-full flex-1 flex-col overflow-hidden"><div class="bg-main border-b-border sticky top-0 z-10 border-b border-dashed md:hidden"><div class="flex cursor-pointer items-center gap-2 p-3"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 256 256" class="transition-transform"><path d="M184.49,136.49l-80,80a12,12,0,0,1-17-17L159,128,87.51,56.49a12,12,0,1,1,17-17l80,80A12,12,0,0,1,184.49,136.49Z"></path></svg><span class="truncate text-base font-normal">Menu</span></div></div><div class="relative flex-1 overflow-y-auto px-3 pt-3 md:rounded-md md:px-0 md:pt-0 [&amp;_::selection]:bg-purple-500/40" style="scrollbar-color:var(--color-night) transparent"><div class="pb-30 mx-auto max-w-2xl md:pb-40 md:pt-6 lg:pt-8"><div class="prose prose-invert dark:prose-invert prose-headings:text-inherit prose-p:text-inherit max-w-none"><div><div class="prose-custom prose-custom-md prose-custom-gray !max-w-none text-neutral-300 [overflow-wrap:anywhere]"><h1 id="input-module" class="group flex items-center" data-header="true">Input Module<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h1>
<details>
<summary>Relevant source files</summary>
<ul>
<li><a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/COMGEN.blk" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4] rounded-r"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/COMGEN.blk</span></a></li>
<li><a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/INVAR.for" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4] rounded-r"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/INVAR.for</span></a></li>
<li><a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPSIM.for" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4] rounded-r"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPSIM.for</span></a></li>
<li><a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPVAR.for" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4] rounded-r"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPVAR.for</span></a></li>
<li><a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/OPHEAD.for" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4] rounded-r"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/OPHEAD.for</span></a></li>
<li><a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/OPTEMPXY2K.for" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4] rounded-r"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/OPTEMPXY2K.for</span></a></li>
<li><a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/SEVAR.for" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4] rounded-r"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/SEVAR.for</span></a></li>
<li><a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/optempy2k.for" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4] rounded-r"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/optempy2k.for</span></a></li>
<li><a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/SPAM/SPSUBS.for" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4] rounded-r"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>SPAM/SPSUBS.for</span></a></li>
<li><a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/SPAM/STEMP.for" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4] rounded-r"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>SPAM/STEMP.for</span></a></li>
<li><a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/SPAM/STEMP_EPIC.for" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4] rounded-r"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>SPAM/STEMP_EPIC.for</span></a></li>
<li><a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/SPAM/TRANS.for" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4] rounded-r"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>SPAM/TRANS.for</span></a></li>
</ul>
</details>
<h2 id="purpose-and-scope" class="group flex items-center" data-header="true">Purpose and Scope<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h2>
<p>The Input Module is a critical component of the DSSAT Cropping System Model (DSSAT-CSM) that handles the reading, processing, and validation of all input data required for crop simulations. This includes simulation control parameters, genetic coefficients for crop varieties, environmental data, field management information, and initialization conditions. The module ensures that all necessary inputs are correctly formatted and available to other modules in the simulation.</p>
<p>The Input Module serves as the bridge between the user&#x27;s experimental setup (defined in input files) and the simulation engine. It validates inputs, applies default values when needed, and prepares data structures for use by other components of the system.</p>
<p>For information about how the processed input data is used by the simulation engine, see sections on the Land Module (<a href="3.1-land-module" class="text-neutral-300 hover:text-neutral-200 hover:underline">3.1</a>), Soil Module (<a href="3.2-soil-module" class="text-neutral-300 hover:text-neutral-200 hover:underline">3.2</a>), and Plant Module (<a href="3.3-plant-module" class="text-neutral-300 hover:text-neutral-200 hover:underline">3.3</a>).</p>
<p>Sources: <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPSIM.for#L1-L45" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPSIM.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">1-45</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/OPHEAD.for#L1-L15" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/OPHEAD.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">1-15</span></a></p>
<h2 id="module-structure-and-data-flow" class="group flex items-center" data-header="true">Module Structure and Data Flow<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h2>
<p>The Input Module consists of several key components that work together to process different aspects of the simulation inputs. Below is a high-level overview of the module&#x27;s structure and data flow:</p>
<pre class="px-2 py-1.5 has-[code]:rounded-md has-[code]:!bg-[#e5e5e5] has-[div]:bg-transparent has-[div]:!p-0 has-[code]:text-stone-900 dark:has-[code]:!bg-[#242424] has-[code]:dark:text-white [&amp;_code]:block [&amp;_code]:border-none [&amp;_code]:bg-transparent [&amp;_code]:p-0"><!--$!--><template data-dgst="BAILOUT_TO_CLIENT_SIDE_RENDERING"></template><!--/$--></pre>
<p>The diagram shows how different input files are processed by various components of the Input Module, and how the processed data is organized into data structures like CONTROL, ISWITCH, and COMGEN for use by other modules.</p>
<p>Sources: <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPSIM.for#L43-L69" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPSIM.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">43-69</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPVAR.for#L1-L45" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPVAR.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">1-45</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/OPHEAD.for#L16-L29" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/OPHEAD.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">16-29</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/SEVAR.for#L1-L32" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/SEVAR.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">1-32</span></a></p>
<h2 id="key-components-and-their-functions" class="group flex items-center" data-header="true">Key Components and Their Functions<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h2>
<h3 id="ipsim---simulation-control" class="group flex items-center" data-header="true">IPSIM - Simulation Control<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h3>
<p>The IPSIM subroutine is the core component that reads and processes simulation control parameters from the FILEX file. It handles parameters related to:</p>
<ol>
<li>General simulation settings (run duration, starting date)</li>
<li>Environmental options (water, nitrogen, phosphorus, etc.)</li>
<li>Method selections (weather, soil, evaporation, etc.)</li>
<li>Management practices (planting, irrigation, fertilization, etc.)</li>
<li>Output options</li>
</ol>
<p>IPSIM reads the FILEX file section by section, processes the parameters, and stores them in the CONTROL and ISWITCH data structures. It also performs validation checks to ensure parameter compatibility and applies default values when necessary.</p>
<pre class="px-2 py-1.5 has-[code]:rounded-md has-[code]:!bg-[#e5e5e5] has-[div]:bg-transparent has-[div]:!p-0 has-[code]:text-stone-900 dark:has-[code]:!bg-[#242424] has-[code]:dark:text-white [&amp;_code]:block [&amp;_code]:border-none [&amp;_code]:bg-transparent [&amp;_code]:p-0"><!--$!--><template data-dgst="BAILOUT_TO_CLIENT_SIDE_RENDERING"></template><!--/$--></pre>
<p>The IPSIM subroutine processes several sections of the FILEX file:</p>
<ol>
<li>General simulation control: Runs, replications, start date</li>
<li>Option switches: Water, nitrogen, phosphorus, etc.</li>
<li>Method selections: Weather, soil water, evaporation, etc.</li>
<li>Management practices: Planting, irrigation, fertilization</li>
<li>Output settings: File types, detail levels, frequency</li>
</ol>
<p>It also handles parameter compatibility, ensuring that certain combinations of options are valid. For example, if water simulation is disabled (ISWWAT=&#x27;N&#x27;), then nitrogen and phosphorus simulation are automatically disabled as well.</p>
<p>Sources: <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPSIM.for#L43-L145" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPSIM.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">43-145</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPSIM.for#L180-L330" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPSIM.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">180-330</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPSIM.for#L606-L910" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPSIM.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">606-910</span></a></p>
<h3 id="ipvar---genetic-parameters" class="group flex items-center" data-header="true">IPVAR - Genetic Parameters<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h3>
<p>The IPVAR subroutine reads genetic parameters from the cultivar (FILEG) file for the specific crop variety being simulated. It supports different formats for various crop models (CROPGRO, CERES, etc.) and handles both default and user-defined cultivar parameters.</p>
<p>This component is critical for capturing the genetic differences between crop varieties that influence growth, development, and yield formation processes.</p>
<p>IPVAR reads cultivar-specific parameters such as:</p>
<ul>
<li>Photoperiod sensitivity</li>
<li>Thermal time requirements for development stages</li>
<li>Leaf growth parameters</li>
<li>Reproductive growth parameters</li>
<li>Yield formation parameters</li>
</ul>
<p>The parameters read by IPVAR are stored in the COMGEN common block, which makes them available to other modules in the simulation.</p>
<p>Table: Key Genetic Parameters for Different Crop Models</p>






























<table><thead><tr><th>Crop Model</th><th>Key Parameters</th><th>Description</th></tr></thead><tbody><tr><td>CROPGRO</td><td>CSDVAR, PPSEN, PHTHRS</td><td>Critical short day, photoperiod sensitivity, phase thresholds</td></tr><tr><td>CERES-Maize</td><td>P1, P2, P5, G2, G3, PHINT</td><td>Thermal time parameters, grain parameters, phyllochron interval</td></tr><tr><td>CERES-Wheat</td><td>P1V, P1D, P5, G1, G2, G3, PHINT</td><td>Vernalization, photoperiod, grain parameters</td></tr><tr><td>Sugarcane</td><td>MaxPARCE, APFMX, TBFT</td><td>Photosynthetic efficiency, partitioning, temperature thresholds</td></tr></tbody></table>
<p>Sources: <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPVAR.for#L1-L45" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPVAR.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">1-45</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPVAR.for#L160-L233" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPVAR.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">160-233</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/COMGEN.blk#L1-L85" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/COMGEN.blk</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">1-85</span></a></p>
<h3 id="ophead---output-header-generation" class="group flex items-center" data-header="true">OPHEAD - Output Header Generation<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h3>
<p>The OPHEAD subroutine generates headers for output files, including the Overview.OUT and daily output files. It creates a standardized header format that includes:</p>
<ol>
<li>Model version information</li>
<li>Run identification</li>
<li>Experiment details</li>
<li>Treatment information</li>
<li>Crop and cultivar information</li>
<li>Simulation dates</li>
<li>Soil and weather information</li>
<li>Management practices defined in the simulation</li>
</ol>
<p>The headers provide essential context for interpreting simulation results and are important for documentation and traceability of simulation studies.</p>
<pre class="px-2 py-1.5 has-[code]:rounded-md has-[code]:!bg-[#e5e5e5] has-[div]:bg-transparent has-[div]:!p-0 has-[code]:text-stone-900 dark:has-[code]:!bg-[#242424] has-[code]:dark:text-white [&amp;_code]:block [&amp;_code]:border-none [&amp;_code]:bg-transparent [&amp;_code]:p-0"><!--$!--><template data-dgst="BAILOUT_TO_CLIENT_SIDE_RENDERING"></template><!--/$--></pre>
<p>The OPHEAD subroutine stores header information in the Headers data structure, which is later used by various output routines to write headers to output files. This ensures consistency in how simulation information is presented across different output files.</p>
<p>Sources: <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/OPHEAD.for#L100-L150" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/OPHEAD.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">100-150</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/OPHEAD.for#L180-L280" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/OPHEAD.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">180-280</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/OPHEAD.for#L300-L433" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/OPHEAD.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">300-433</span></a></p>
<h2 id="input-file-processing" class="group flex items-center" data-header="true">Input File Processing<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h2>
<p>The Input Module processes several types of input files:</p>
<ol>
<li><strong>FILEX</strong> - Experiment files containing simulation control, treatments, and field management</li>
<li><strong>FILEC</strong> - Crop species files with crop-specific parameters</li>
<li><strong>FILEG</strong> - Cultivar files with genetic coefficients</li>
<li><strong>FILEE</strong> - Ecotype files with environmental adaptation parameters</li>
<li><strong>FILES</strong> - Soil files with soil profile information</li>
<li><strong>FILEW</strong> - Weather files with daily weather data</li>
</ol>
<p>The module includes a temporary file handling system (implemented in optempy2k.for and OPTEMPXY2K.for) that creates intermediate files in a standardized format for use by the simulation engine.</p>
<h3 id="filex-processing-workflow" class="group flex items-center" data-header="true">FILEX Processing Workflow<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h3>
<p>The FILEX file is the primary input file that defines an experiment, including its treatments, field conditions, and management practices. The processing of this file follows a structured workflow:</p>
<pre class="px-2 py-1.5 has-[code]:rounded-md has-[code]:!bg-[#e5e5e5] has-[div]:bg-transparent has-[div]:!p-0 has-[code]:text-stone-900 dark:has-[code]:!bg-[#242424] has-[code]:dark:text-white [&amp;_code]:block [&amp;_code]:border-none [&amp;_code]:bg-transparent [&amp;_code]:p-0"><!--$!--><template data-dgst="BAILOUT_TO_CLIENT_SIDE_RENDERING"></template><!--/$--></pre>
<p>The Input Module carefully validates inputs throughout this process, checking for valid parameter ranges, compatible option combinations, and the availability of required data. When issues are detected, the module either applies reasonable defaults or produces error messages to guide the user.</p>
<p>Sources: <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPSIM.for#L180-L210" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPSIM.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">180-210</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/optempy2k.for#L60-L180" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/optempy2k.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">60-180</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/OPTEMPXY2K.for#L90-L190" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/OPTEMPXY2K.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">90-190</span></a></p>
<h2 id="simulation-switches-and-methods" class="group flex items-center" data-header="true">Simulation Switches and Methods<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h2>
<p>A key function of the Input Module is to process and validate simulation switches and methods that control how different processes are simulated. These are defined in the FILEX file and processed by IPSIM.</p>
<h3 id="key-simulation-switches" class="group flex items-center" data-header="true">Key Simulation Switches<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h3>
<p>The ISWITCH structure contains various switches that enable or disable simulation components:</p>
<p>Table: Key Simulation Switches</p>


















































<table><thead><tr><th>Switch</th><th>Description</th><th>Possible Values</th></tr></thead><tbody><tr><td>ISWWAT</td><td>Water balance simulation</td><td>Y=yes, N=no</td></tr><tr><td>ISWNIT</td><td>Nitrogen simulation</td><td>Y=yes, N=no</td></tr><tr><td>ISWSYM</td><td>Symbiotic N fixation</td><td>Y=yes, N=no, U=unlimited</td></tr><tr><td>ISWPHO</td><td>Phosphorus simulation</td><td>Y=yes, N=no</td></tr><tr><td>ISWPOT</td><td>Potassium simulation</td><td>Y=yes, N=no</td></tr><tr><td>ISWDIS</td><td>Pest and disease</td><td>Y=yes, N=no</td></tr><tr><td>ISWCHE</td><td>Environmental applications</td><td>Y=yes, N=no</td></tr><tr><td>ICO2</td><td>CO2</td><td>M=measured, W=weighted, D=default</td></tr></tbody></table>
<h3 id="simulation-methods" class="group flex items-center" data-header="true">Simulation Methods<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h3>
<p>The module also processes method selections that define which algorithms to use for various processes:</p>
<p>Table: Simulation Methods</p>













































<table><thead><tr><th>Method</th><th>Description</th><th>Options</th></tr></thead><tbody><tr><td>MEWTH</td><td>Weather</td><td>M=measured, G=generated, S=simulated, W=calculated</td></tr><tr><td>MEEVP</td><td>Evapotranspiration</td><td>R=Priestley-Taylor, Z=Penman-FAO, F=FAO-56</td></tr><tr><td>MEINF</td><td>Infiltration</td><td>S=Soil Conservation Service, R=Ritchie</td></tr><tr><td>MEPHO</td><td>Photosynthesis</td><td>C=Canopy, L=Leaf</td></tr><tr><td>MESOM</td><td>Soil organic matter</td><td>G=Godwin, P=CENTURY/Parton</td></tr><tr><td>MESEV</td><td>Soil evaporation</td><td>R=Ritchie, S=Suleiman-Ritchie</td></tr><tr><td>MESOL</td><td>Soil layers</td><td>1=original, 2=new, 3=user-specified</td></tr></tbody></table>
<p>The Input Module enforces rules for compatibility between these switches and methods. For example, if water simulation is disabled (ISWWAT=&#x27;N&#x27;), then nitrogen and phosphorus simulations are automatically disabled as well. It also sets appropriate defaults based on crop type and simulation mode.</p>
<p>Sources: <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPSIM.for#L217-L254" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPSIM.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">217-254</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPSIM.for#L606-L680" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPSIM.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">606-680</span></a></p>
<h2 id="integration-with-other-modules" class="group flex items-center" data-header="true">Integration with Other Modules<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h2>
<p>The Input Module serves as the foundation for the entire simulation system by providing processed input data to other modules. The key integration points include:</p>
<pre class="px-2 py-1.5 has-[code]:rounded-md has-[code]:!bg-[#e5e5e5] has-[div]:bg-transparent has-[div]:!p-0 has-[code]:text-stone-900 dark:has-[code]:!bg-[#242424] has-[code]:dark:text-white [&amp;_code]:block [&amp;_code]:border-none [&amp;_code]:bg-transparent [&amp;_code]:p-0"><!--$!--><template data-dgst="BAILOUT_TO_CLIENT_SIDE_RENDERING"></template><!--/$--></pre>
<h3 id="interaction-with-spam-module" class="group flex items-center" data-header="true">Interaction with SPAM Module<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h3>
<p>The Input Module provides essential parameters to the Soil-Plant-Atmosphere Module (SPAM), which simulates energy balance and evapotranspiration. Key parameters include:</p>
<ul>
<li>Weather data location and format (MEWTH)</li>
<li>Evapotranspiration method (MEEVP)</li>
<li>Soil temperature method (METMP)</li>
<li>Soil evaporation method (MESEV)</li>
</ul>
<p>SPAM uses these parameters to calculate important processes like:</p>
<ul>
<li>Potential evapotranspiration (EO)</li>
<li>Potential plant transpiration (EOP)</li>
<li>Soil evaporation (ES)</li>
<li>Soil temperature profiles (ST)</li>
</ul>
<p>Sources: <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPSIM.for#L231-L247" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPSIM.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">231-247</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/SPAM/STEMP.for#L10-L40" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>SPAM/STEMP.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">10-40</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/SPAM/SPSUBS.for#L10-L40" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>SPAM/SPSUBS.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">10-40</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/SPAM/TRANS.for#L10-L40" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>SPAM/TRANS.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">10-40</span></a></p>
<h3 id="interaction-with-plant-module" class="group flex items-center" data-header="true">Interaction with Plant Module<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h3>
<p>The Input Module provides genetic parameters to the Plant Module through the COMGEN common block. These parameters define how specific crop varieties respond to environmental conditions and management practices.</p>
<p>The Plant Module uses these parameters to simulate:</p>
<ul>
<li>Development phases based on thermal time</li>
<li>Response to photoperiod and vernalization</li>
<li>Leaf area growth and senescence</li>
<li>Biomass accumulation and partitioning</li>
<li>Yield formation processes</li>
</ul>
<p>Different crop models (CROPGRO, CERES, etc.) use different sets of genetic parameters from the COMGEN block.</p>
<p>Sources: <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPVAR.for#L160-L233" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPVAR.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">160-233</span></a> <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/COMGEN.blk#L1-L85" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/COMGEN.blk</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">1-85</span></a></p>
<h2 id="error-handling-and-parameter-validation" class="group flex items-center" data-header="true">Error Handling and Parameter Validation<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h2>
<p>The Input Module includes comprehensive error handling and parameter validation to ensure the integrity of simulation inputs. Key validation processes include:</p>
<ol>
<li><strong>Parameter range checking</strong>: Ensuring parameter values are within acceptable ranges</li>
<li><strong>Compatibility validation</strong>: Checking that combinations of options and parameters are compatible</li>
<li><strong>Default value substitution</strong>: Applying reasonable defaults when parameters are missing</li>
<li><strong>Error messaging</strong>: Providing clear error messages when critical issues are detected</li>
</ol>
<p>For example, the module validates that:</p>
<ul>
<li>Crop models are compatible with selected options (e.g., nitrogen fixation for legume crops)</li>
<li>Methods are compatible with selected options (e.g., MEHYD with MEEVP)</li>
<li>Phosphorus and potassium models are only enabled for crops that support them</li>
</ul>
<p>These validation steps help prevent simulation failures and ensure that the model behaves as expected.</p>
<p>Sources: <a href="https://github.com/DSSAT/dssat-csm-os/blob/dc5d6ba0/InputModule/IPSIM.for#L606-L910" target="_blank" rel="noopener noreferrer" class="mb-1 mr-1 inline-flex items-stretch font-mono text-xs !no-underline transition-opacity hover:opacity-75"><span class="flex items-center break-all rounded-l px-2 py-1.5 bg-[#e5e5e5] text-[#333333] dark:bg-[#252525] dark:text-[#e4e4e4]"><svg class="mr-1.5 hidden h-3.5 w-3.5 flex-shrink-0 opacity-40 md:block" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path></svg>InputModule/IPSIM.for</span><span class="flex flex-shrink-0 items-center rounded-r border-l px-2 py-1.5 border-[#dddddd] bg-[#d8d8d8] text-[#666666] dark:border-[#333333] dark:bg-[#2a2a2a] dark:text-[#888888]">606-910</span></a></p>
<h2 id="summary" class="group flex items-center" data-header="true">Summary<button class="relative ml-2 cursor-pointer text-gray-400 opacity-0 transition-opacity hover:text-blue-400 focus:opacity-100 group-hover:opacity-100" aria-label="Copy link to header"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="h-4 w-4"><path d="M117.18,188.74a12,12,0,0,1,0,17l-5.12,5.12A58.26,58.26,0,0,1,70.6,228h0A58.62,58.62,0,0,1,29.14,127.92L63.89,93.17a58.64,58.64,0,0,1,98.56,28.11,12,12,0,1,1-23.37,5.44,34.65,34.65,0,0,0-58.22-16.58L46.11,144.89A34.62,34.62,0,0,0,70.57,204h0a34.41,34.41,0,0,0,24.49-10.14l5.11-5.12A12,12,0,0,1,117.18,188.74ZM226.83,45.17a58.65,58.65,0,0,0-82.93,0l-5.11,5.11a12,12,0,0,0,17,17l5.12-5.12a34.63,34.63,0,1,1,49,49L175.1,145.86A34.39,34.39,0,0,1,150.61,156h0a34.63,34.63,0,0,1-33.69-26.72,12,12,0,0,0-23.38,5.44A58.64,58.64,0,0,0,150.56,180h.05a58.28,58.28,0,0,0,41.47-17.17l34.75-34.75a58.62,58.62,0,0,0,0-82.91Z"></path></svg></button></h2>
<p>The Input Module serves as the critical interface between user-defined inputs and the DSSAT-CSM simulation engine. It processes, validates, and organizes all input data, making it available to the various simulation components in a structured and consistent manner.</p>
<p>Key strengths of the Input Module include:</p>
<ul>
<li>Comprehensive processing of various input file types</li>
<li>Robust validation of input parameters</li>
<li>Flexible support for different crop models and simulation methods</li>
<li>Careful handling of parameter interdependencies</li>
<li>Clear error messaging for troubleshooting</li>
</ul>
<p>By properly preparing all simulation inputs, the Input Module ensures that the DSSAT-CSM can accurately simulate crop growth, development, and yield under diverse environmental conditions and management practices.</p></div></div></div></div></div></div><div class="hidden overflow-hidden transition-[border-radius] xl:sticky xl:right-0 xl:top-20 xl:block xl:h-[calc(100vh-82px)] xl:w-64 xl:flex-shrink-0 2xl:w-72" style="scrollbar-width:none"><div class="flex max-h-full w-full flex-shrink-0 flex-col py-6 pt-0 text-sm lg:pb-4 lg:pt-8 xl:w-64 2xl:w-72" style="scrollbar-color:var(--color-night) transparent"><div><div class="mx-4 mb-3 rounded-md border border-neutral-200 bg-neutral-100 p-3 text-sm text-neutral-600 dark:border-neutral-800 dark:bg-neutral-900 dark:text-neutral-400"><p class="text-sm font-medium">Auto-refresh not enabled yet<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 256 256" class="ml-1.5 inline-block cursor-help text-neutral-400 transition-colors hover:text-neutral-600 dark:text-neutral-500 dark:hover:text-neutral-400" data-state="closed"><path d="M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm0,192a88,88,0,1,1,88-88A88.1,88.1,0,0,1,128,216Zm16-40a8,8,0,0,1-8,8,16,16,0,0,1-16-16V128a8,8,0,0,1,0-16,16,16,0,0,1,16,16v40A8,8,0,0,1,144,176ZM112,84a12,12,0,1,1,12,12A12,12,0,0,1,112,84Z"></path></svg></p><button class="mt-2 flex items-center gap-1 rounded-md bg-neutral-200 px-2 py-1 text-sm font-medium text-neutral-700 transition-colors hover:bg-neutral-300 disabled:cursor-not-allowed disabled:opacity-50 dark:bg-neutral-800 dark:text-neutral-300 dark:hover:bg-neutral-700"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 256 256"><path d="M240,56v48a8,8,0,0,1-8,8H184a8,8,0,0,1,0-16H211.4L184.81,71.64l-.25-.24a80,80,0,1,0-1.67,114.78,8,8,0,0,1,11,11.63A95.44,95.44,0,0,1,128,224h-1.32A96,96,0,1,1,195.75,60L224,85.8V56a8,8,0,1,1,16,0Z"></path></svg>Refresh wiki</button></div></div><h3 class="px-4 pb-5 text-lg font-medium leading-none">On this page</h3><ul style="scrollbar-width:none" class="min-h-0 flex-1 space-y-3 overflow-y-auto p-4 pt-0"><li class=""><a href="6.1-input-module#input-module" class="hover:text-primary pr-1 transition-all text-primary font-medium">Input Module</a></li><li class="ml-3"><a href="6.1-input-module#purpose-and-scope" class="hover:text-primary pr-1 font-normal transition-all text-secondary">Purpose and Scope</a></li><li class="ml-3"><a href="6.1-input-module#module-structure-and-data-flow" class="hover:text-primary pr-1 font-normal transition-all text-secondary">Module Structure and Data Flow</a></li><li class="ml-3"><a href="6.1-input-module#key-components-and-their-functions" class="hover:text-primary pr-1 font-normal transition-all text-secondary">Key Components and Their Functions</a></li><li class="ml-6"><a href="6.1-input-module#ipsim---simulation-control" class="hover:text-primary pr-1 font-normal transition-all text-secondary">IPSIM - Simulation Control</a></li><li class="ml-6"><a href="6.1-input-module#ipvar---genetic-parameters" class="hover:text-primary pr-1 font-normal transition-all text-secondary">IPVAR - Genetic Parameters</a></li><li class="ml-6"><a href="6.1-input-module#ophead---output-header-generation" class="hover:text-primary pr-1 font-normal transition-all text-secondary">OPHEAD - Output Header Generation</a></li><li class="ml-3"><a href="6.1-input-module#input-file-processing" class="hover:text-primary pr-1 font-normal transition-all text-secondary">Input File Processing</a></li><li class="ml-6"><a href="6.1-input-module#filex-processing-workflow" class="hover:text-primary pr-1 font-normal transition-all text-secondary">FILEX Processing Workflow</a></li><li class="ml-3"><a href="6.1-input-module#simulation-switches-and-methods" class="hover:text-primary pr-1 font-normal transition-all text-secondary">Simulation Switches and Methods</a></li><li class="ml-6"><a href="6.1-input-module#key-simulation-switches" class="hover:text-primary pr-1 font-normal transition-all text-secondary">Key Simulation Switches</a></li><li class="ml-6"><a href="6.1-input-module#simulation-methods" class="hover:text-primary pr-1 font-normal transition-all text-secondary">Simulation Methods</a></li><li class="ml-3"><a href="6.1-input-module#integration-with-other-modules" class="hover:text-primary pr-1 font-normal transition-all text-secondary">Integration with Other Modules</a></li><li class="ml-6"><a href="6.1-input-module#interaction-with-spam-module" class="hover:text-primary pr-1 font-normal transition-all text-secondary">Interaction with SPAM Module</a></li><li class="ml-6"><a href="6.1-input-module#interaction-with-plant-module" class="hover:text-primary pr-1 font-normal transition-all text-secondary">Interaction with Plant Module</a></li><li class="ml-3"><a href="6.1-input-module#error-handling-and-parameter-validation" class="hover:text-primary pr-1 font-normal transition-all text-secondary">Error Handling and Parameter Validation</a></li><li class="ml-3"><a href="6.1-input-module#summary" class="hover:text-primary pr-1 font-normal transition-all text-secondary">Summary</a></li></ul></div></div><div class="pointer-events-none fixed bottom-2 left-2 right-2 mt-2 md:bottom-4 md:left-0 md:right-0"><div class="z-10 mx-auto max-w-3xl"><!--$!--><template data-dgst="BAILOUT_TO_CLIENT_SIDE_RENDERING"></template><!--/$--></div></div></div></div></div><!--/$--></div><script src="../../_next/static/chunks/webpack-acbbbb548492d4a6.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX" async=""></script><script>(self.__next_f=self.__next_f||[]).push([0])</script><script>self.__next_f.push([1,"1:\"$Sreact.fragment\"\n2:I[51709,[\"9453\",\"static/chunks/b1298b8d-549c141f97a3b262.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"8970\",\"static/chunks/378e5a93-3b0f971d3611a8a5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1585\",\"static/chunks/f7f68e2d-40290491c524df5c.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"5009\",\"static/chunks/5009-cf1c1739f4eccbfa.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"3377\",\"static/chunks/3377-d302682beb4206f6.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"6671\",\"static/chunks/6671-b0da8a89e8d16b02.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"9853\",\"static/chunks/9853-ba5965ca136d44c2.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"7177\",\"static/chunks/app/layout-d0b9af9c0a55f7f8.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\"],\"RootProvider\"]\n3:I[87555,[],\"\"]\n4:I[31295,[],\"\"]\n6:I[90894,[],\"ClientPageRoot\"]\n7:I[87667,[\"9453\",\"static/chunks/b1298b8d-549c141f97a3b262.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"8970\",\"static/chunks/378e5a93-3b0f971d3611a8a5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1585\",\"static/chunks/f7f68e2d-40290491c524df5c.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"2545\",\"static/chunks/c16f53c3-c80d3b6d0c4af7a0.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"537\",\"static/chunks/537-d9d5e9261de3e69c.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"5009\",\"static/chunks/5009-cf1c1739f4eccbfa.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"2136\",\"static/chunks/2136-0f8d797058c844d4.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"3377\",\"static/chunks/3377-d302682beb4206f6.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"6671\",\"static/chunks/6671-b0da8a89e8d16b02.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"9970\",\"static/chunks/9970-05da82a5b9af6015.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1235\",\"static/chunks/1235-2bb070afbba964c5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"4889\",\"static/chunks/4889-88dda955466eba30.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"168\",\"static/chunks/168-d8e567d7acd9a9f8.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"9853\",\"static/chunks/9853-ba5965ca136d44c2.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"5313\",\"static/chunks/5"])</script><script>self.__next_f.push([1,"313-a7847b64d71d9faa.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"8335\",\"static/chunks/8335-a8e1c4449a152223.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"3285\",\"static/chunks/app/%5Borg%5D/%5Brepo%5D/%5B%5B...wikiRoutes%5D%5D/page-ca7c0c844ceea0c1.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\"],\"default\"]\na:I[59665,[],\"OutletBoundary\"]\nd:I[59665,[],\"ViewportBoundary\"]\nf:I[59665,[],\"MetadataBoundary\"]\n11:I[26614,[],\"\"]\n:HL[\"/_next/static/media/569ce4b8f30dc480-s.p.woff2\",\"font\",{\"crossOrigin\":\"\",\"type\":\"font/woff2\"}]\n:HL[\"/_next/static/media/93f479601ee12b01-s.p.woff2\",\"font\",{\"crossOrigin\":\"\",\"type\":\"font/woff2\"}]\n:HL[\"/_next/static/css/f30152c0704fba31.css?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"style\"]\n:HL[\"/_next/static/css/3b4ac2f8d4dcca10.css?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"style\"]\n"])</script><script>self.__next_f.push([1,"0:{\"P\":null,\"b\":\"RoJGJnOLEp9KRoEWzzauJ\",\"p\":\"\",\"c\":[\"\",\"DSSAT\",\"dssat-csm-os\",\"6.1-input-module\"],\"i\":false,\"f\":[[[\"\",{\"children\":[[\"org\",\"DSSAT\",\"d\"],{\"children\":[[\"repo\",\"dssat-csm-os\",\"d\"],{\"children\":[[\"wikiRoutes\",\"6.1-input-module\",\"oc\"],{\"children\":[\"__PAGE__\",{}]}]}]}]},\"$undefined\",\"$undefined\",true],[\"\",[\"$\",\"$1\",\"c\",{\"children\":[[[\"$\",\"link\",\"0\",{\"rel\":\"stylesheet\",\"href\":\"/_next/static/css/f30152c0704fba31.css?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"precedence\":\"next\",\"crossOrigin\":\"$undefined\",\"nonce\":\"$undefined\"}],[\"$\",\"link\",\"1\",{\"rel\":\"stylesheet\",\"href\":\"/_next/static/css/3b4ac2f8d4dcca10.css?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"precedence\":\"next\",\"crossOrigin\":\"$undefined\",\"nonce\":\"$undefined\"}]],[\"$\",\"html\",null,{\"lang\":\"en\",\"suppressHydrationWarning\":true,\"children\":[[\"$\",\"head\",null,{}],[\"$\",\"body\",null,{\"className\":\"__variable_5cfdac font-geist-sans relative min-h-screen __variable_9a8899 bg-background antialiased\",\"children\":[\"$\",\"$L2\",null,{\"children\":[\"$\",\"$L3\",null,{\"parallelRouterKey\":\"children\",\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"errorScripts\":\"$undefined\",\"template\":[\"$\",\"$L4\",null,{}],\"templateStyles\":\"$undefined\",\"templateScripts\":\"$undefined\",\"notFound\":[[[\"$\",\"title\",null,{\"children\":\"404: This page could not be found.\"}],[\"$\",\"div\",null,{\"style\":{\"fontFamily\":\"system-ui,\\\"Segoe UI\\\",Roboto,Helvetica,Arial,sans-serif,\\\"Apple Color Emoji\\\",\\\"Segoe UI Emoji\\\"\",\"height\":\"100vh\",\"textAlign\":\"center\",\"display\":\"flex\",\"flexDirection\":\"column\",\"alignItems\":\"center\",\"justifyContent\":\"center\"},\"children\":[\"$\",\"div\",null,{\"children\":[[\"$\",\"style\",null,{\"dangerouslySetInnerHTML\":{\"__html\":\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\"}}],[\"$\",\"h1\",null,{\"className\":\"next-error-h1\",\"style\":{\"display\":\"inline-block\",\"margin\":\"0 20px 0 0\",\"padding\":\"0 23px 0 0\",\"fontSize\":24,\"fontWeight\":500,\"verticalAlign\":\"top\",\"lineHeight\":\"49px\"},\"children\":404}],[\"$\",\"div\",null,{\"style\":{\"display\":\"inline-block\"},\"children\":[\"$\",\"h2\",null,{\"style\":{\"fontSize\":14,\"fontWeight\":400,\"lineHeight\":\"49px\",\"margin\":0},\"children\":\"This page could not be found.\"}]}]]}]}]],[]],\"forbidden\":\"$undefined\",\"unauthorized\":\"$undefined\"}]}]}]]}]]}],{\"children\":[[\"org\",\"DSSAT\",\"d\"],[\"$\",\"$1\",\"c\",{\"children\":[null,[\"$\",\"$L3\",null,{\"parallelRouterKey\":\"children\",\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"errorScripts\":\"$undefined\",\"template\":[\"$\",\"$L4\",null,{}],\"templateStyles\":\"$undefined\",\"templateScripts\":\"$undefined\",\"notFound\":\"$undefined\",\"forbidden\":\"$undefined\",\"unauthorized\":\"$undefined\"}]]}],{\"children\":[[\"repo\",\"dssat-csm-os\",\"d\"],[\"$\",\"$1\",\"c\",{\"children\":[null,\"$L5\"]}],{\"children\":[[\"wikiRoutes\",\"6.1-input-module\",\"oc\"],[\"$\",\"$1\",\"c\",{\"children\":[null,[\"$\",\"$L3\",null,{\"parallelRouterKey\":\"children\",\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"errorScripts\":\"$undefined\",\"template\":[\"$\",\"$L4\",null,{}],\"templateStyles\":\"$undefined\",\"templateScripts\":\"$undefined\",\"notFound\":\"$undefined\",\"forbidden\":\"$undefined\",\"unauthorized\":\"$undefined\"}]]}],{\"children\":[\"__PAGE__\",[\"$\",\"$1\",\"c\",{\"children\":[[\"$\",\"$L6\",null,{\"Component\":\"$7\",\"searchParams\":{},\"params\":{\"org\":\"DSSAT\",\"repo\":\"dssat-csm-os\",\"wikiRoutes\":[\"6.1-input-module\"]},\"promises\":[\"$@8\",\"$@9\"]}],\"$undefined\",null,[\"$\",\"$La\",null,{\"children\":[\"$Lb\",\"$Lc\",null]}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],[\"$\",\"$1\",\"h\",{\"children\":[null,[\"$\",\"$1\",\"lmjFQ2qfjvA3s9X5TirOc\",{\"children\":[[\"$\",\"$Ld\",null,{\"children\":\"$Le\"}],[\"$\",\"meta\",null,{\"name\":\"next-size-adjust\",\"content\":\"\"}]]}],[\"$\",\"$Lf\",null,{\"children\":\"$L10\"}]]}],false]],\"m\":\"$undefined\",\"G\":[\"$11\",\"$undefined\"],\"s\":false,\"S\":true}\n"])</script><script>self.__next_f.push([1,"12:I[53508,[\"9453\",\"static/chunks/b1298b8d-549c141f97a3b262.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"8970\",\"static/chunks/378e5a93-3b0f971d3611a8a5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1585\",\"static/chunks/f7f68e2d-40290491c524df5c.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"4129\",\"static/chunks/7bf36345-20a79815585d2583.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"537\",\"static/chunks/537-d9d5e9261de3e69c.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"5009\",\"static/chunks/5009-cf1c1739f4eccbfa.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"2136\",\"static/chunks/2136-0f8d797058c844d4.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"3377\",\"static/chunks/3377-d302682beb4206f6.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"6671\",\"static/chunks/6671-b0da8a89e8d16b02.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"9970\",\"static/chunks/9970-05da82a5b9af6015.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1235\",\"static/chunks/1235-2bb070afbba964c5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"4889\",\"static/chunks/4889-88dda955466eba30.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"7646\",\"static/chunks/7646-a48026d39d9219b5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"3449\",\"static/chunks/3449-68575972e52aa82b.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1915\",\"static/chunks/1915-d5f0c671ad4e8728.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"2933\",\"static/chunks/app/%5Borg%5D/%5Brepo%5D/layout-b6fc08207734c34b.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\"],\"CodebaseWikiHeader\"]\n13:I[6874,[\"9453\",\"static/chunks/b1298b8d-549c141f97a3b262.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"8970\",\"static/chunks/378e5a93-3b0f971d3611a8a5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1585\",\"static/chunks/f7f68e2d-40290491c524df5c.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"4129\",\"static/chunks/7bf36345-20a79815585d2583.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"537\",\"static/chunks/537-d9d5e9261de3e69c.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"5009\",\"static/chunks/5009-cf1c1739f4eccbfa.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"2136\",\"static/chunks/2136-0f8d797058c844d4.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe"])</script><script>self.__next_f.push([1,"5tB6DX\",\"3377\",\"static/chunks/3377-d302682beb4206f6.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"6671\",\"static/chunks/6671-b0da8a89e8d16b02.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"9970\",\"static/chunks/9970-05da82a5b9af6015.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1235\",\"static/chunks/1235-2bb070afbba964c5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"4889\",\"static/chunks/4889-88dda955466eba30.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"7646\",\"static/chunks/7646-a48026d39d9219b5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"3449\",\"static/chunks/3449-68575972e52aa82b.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1915\",\"static/chunks/1915-d5f0c671ad4e8728.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"2933\",\"static/chunks/app/%5Borg%5D/%5Brepo%5D/layout-b6fc08207734c34b.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\"],\"\"]\n14:\"$Sreact.suspense\"\n15:I[67807,[\"9453\",\"static/chunks/b1298b8d-549c141f97a3b262.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"8970\",\"static/chunks/378e5a93-3b0f971d3611a8a5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1585\",\"static/chunks/f7f68e2d-40290491c524df5c.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"4129\",\"static/chunks/7bf36345-20a79815585d2583.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"537\",\"static/chunks/537-d9d5e9261de3e69c.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"5009\",\"static/chunks/5009-cf1c1739f4eccbfa.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"2136\",\"static/chunks/2136-0f8d797058c844d4.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"3377\",\"static/chunks/3377-d302682beb4206f6.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"6671\",\"static/chunks/6671-b0da8a89e8d16b02.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"9970\",\"static/chunks/9970-05da82a5b9af6015.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1235\",\"static/chunks/1235-2bb070afbba964c5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"4889\",\"static/chunks/4889-88dda955466eba30.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"7646\",\"static/chunks/7646-a48026d39d9219b5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"3449\",\"static/chunks/3449-68575972e52aa82b.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1915"])</script><script>self.__next_f.push([1,"\",\"static/chunks/1915-d5f0c671ad4e8728.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"2933\",\"static/chunks/app/%5Borg%5D/%5Brepo%5D/layout-b6fc08207734c34b.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\"],\"ShinyText\"]\n8:{}\n9:{\"org\":\"DSSAT\",\"repo\":\"dssat-csm-os\",\"wikiRoutes\":\"$0:f:0:1:2:children:2:children:2:children:2:children:1:props:children:0:props:params:wikiRoutes\"}\n5:[\"$\",\"div\",null,{\"className\":\"flex min-h-screen w-full flex-col text-white\",\"id\":\"codebase-wiki-repo-page\",\"children\":[[\"$\",\"$L12\",null,{\"hideOnSm\":true,\"children\":[\"$\",\"div\",null,{\"className\":\"flex flex-col gap-1\",\"children\":[[\"$\",\"$L13\",null,{\"href\":\"/\",\"className\":\"block text-xs font-medium leading-none text-white sm:hidden md:text-lg\",\"children\":\"DeepWiki\"}],[\"$\",\"p\",null,{\"className\":\"text-text-secondary text-sm font-normal leading-none md:text-lg\",\"children\":[\"$\",\"a\",null,{\"href\":\"https://github.com/DSSAT/dssat-csm-os\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\",\"className\":\"text-[#8f8f8f] transition-colors hover:text-black dark:hover:text-white\",\"children\":\"DSSAT/dssat-csm-os\"}]}]]}]}],[\"$\",\"$14\",null,{\"fallback\":[\"$\",\"div\",null,{\"className\":\"container-wrapper flex flex-1 items-center justify-center px-4\",\"children\":[\"$\",\"$L15\",null,{\"className\":\"text-center text-lg\",\"text\":\"Loading DSSAT/dssat-csm-os...\",\"speed\":1}]}],\"children\":\"$L16\"}]]}]\n"])</script><script>self.__next_f.push([1,"e:[[\"$\",\"meta\",\"0\",{\"charSet\":\"utf-8\"}],[\"$\",\"meta\",\"1\",{\"name\":\"viewport\",\"content\":\"width=device-width, initial-scale=1\"}]]\nb:null\n"])</script><script>self.__next_f.push([1,"17:I[60168,[\"9453\",\"static/chunks/b1298b8d-549c141f97a3b262.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"8970\",\"static/chunks/378e5a93-3b0f971d3611a8a5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1585\",\"static/chunks/f7f68e2d-40290491c524df5c.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"4129\",\"static/chunks/7bf36345-20a79815585d2583.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"537\",\"static/chunks/537-d9d5e9261de3e69c.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"5009\",\"static/chunks/5009-cf1c1739f4eccbfa.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"2136\",\"static/chunks/2136-0f8d797058c844d4.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"3377\",\"static/chunks/3377-d302682beb4206f6.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"6671\",\"static/chunks/6671-b0da8a89e8d16b02.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"9970\",\"static/chunks/9970-05da82a5b9af6015.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1235\",\"static/chunks/1235-2bb070afbba964c5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"4889\",\"static/chunks/4889-88dda955466eba30.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"7646\",\"static/chunks/7646-a48026d39d9219b5.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"3449\",\"static/chunks/3449-68575972e52aa82b.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"1915\",\"static/chunks/1915-d5f0c671ad4e8728.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\",\"2933\",\"static/chunks/app/%5Borg%5D/%5Brepo%5D/layout-b6fc08207734c34b.js?dpl=dpl_DNWJF9zgJge8vGAmXvdqwe5tB6DX\"],\"WikiLayout\"]\n18:T3cfe,"])</script><script>self.__next_f.push([1,"# Overview\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [CSM_Main/CSM.for](CSM_Main/CSM.for)\n- [CSM_Main/LAND.for](CSM_Main/LAND.for)\n- [Data/DETAIL.CDE](Data/DETAIL.CDE)\n- [Data/ECONOMIC.CDE](Data/ECONOMIC.CDE)\n- [Data/GCOEFF.CDE](Data/GCOEFF.CDE)\n- [Data/GRSTAGE.CDE](Data/GRSTAGE.CDE)\n- [Data/Genotype/CBGRO048.CUL](Data/Genotype/CBGRO048.CUL)\n- [Data/Genotype/CBGRO048.ECO](Data/Genotype/CBGRO048.ECO)\n- [Data/Genotype/CBGRO048.SPE](Data/Genotype/CBGRO048.SPE)\n- [Data/JDATE.CDE](Data/JDATE.CDE)\n- [Data/OUTPUT.CDE](Data/OUTPUT.CDE)\n- [Data/PEST.CDE](Data/PEST.CDE)\n- [Data/SIMULATION.CDE](Data/SIMULATION.CDE)\n- [Data/SOIL.CDE](Data/SOIL.CDE)\n- [Data/WEATHER.CDE](Data/WEATHER.CDE)\n- [InputModule/input_sub.for](InputModule/input_sub.for)\n- [Plant/CROPGRO/CROPGRO.for](Plant/CROPGRO/CROPGRO.for)\n- [Plant/plant.for](Plant/plant.for)\n- [README.md](README.md)\n- [SPAM/SPAM.for](SPAM/SPAM.for)\n- [Soil/SOIL.for](Soil/SOIL.for)\n- [Soil/SoilWater/OPSWBL.for](Soil/SoilWater/OPSWBL.for)\n- [cmake/Modules/SetFortranFlags.cmake](cmake/Modules/SetFortranFlags.cmake)\n\n\u003c/details\u003e\n\n\n\nThe Decision Support System for Agrotechnology Transfer - Cropping System Model (DSSAT-CSM) is a process-based crop simulation framework that predicts crop growth, development, and yield as a function of soil-plant-atmosphere dynamics. It simulates more than 45 different crops through a modular structure that separates components along scientific discipline lines, allowing easy replacement or addition of modules.\n\nThis document provides an overview of the DSSAT-CSM architecture, key components, and their interactions. For specific details about individual modules, refer to their respective documentation pages in this wiki.\n\n## Purpose and Scope\n\nDSSAT-CSM serves as a research and decision support tool for:\n\n- Simulating crop growth and development under different environmental conditions\n- Evaluating management practices (planting dates, irrigation, fertilization, etc.)\n- Assessing climate change impacts on agricultural production\n- Supporting agricultural decision-making at field, farm, and regional scales\n- Providing a platform for research on crop physiology and agronomy\n\nThe system integrates soil, plant, atmosphere, and management components into a unified framework that operates on a daily time step, allowing simulation of crop responses to environmental factors throughout entire growing seasons or over multiple years.\n\nSources: [README.md:1-31](), [CSM_Main/CSM.for:35-48]()\n\n## System Architecture\n\nDSSAT-CSM uses a modular structure where components are separated along scientific discipline lines. The architecture consists of a main control module (CSM) that coordinates the overall simulation process, with specialized modules handling different aspects of the soil-plant-atmosphere system.\n\n### High-Level Architecture Diagram\n\n```mermaid\ngraph TD\n    CSM[\"CSM Main\u003cbr\u003eMain program control\"] --\u003e LAND[\"LAND Module\u003cbr\u003eCoordinates simulation\"]\n    LAND --\u003e SOIL[\"Soil Module\u003cbr\u003eSoil processes and properties\"]\n    LAND --\u003e PLANT[\"Plant Module\u003cbr\u003ePlant growth and development\"]\n    LAND --\u003e WEATHER[\"Weather Module\u003cbr\u003eClimate data and processing\"]\n    LAND --\u003e SPAM[\"SPAM Module\u003cbr\u003eSoil-Plant-Atmosphere\"]\n    LAND --\u003e MGMTOPS[\"Management Operations\u003cbr\u003eIrrigation, fertilization, etc.\"]\n    \n    INPUT[\"Input Module\u003cbr\u003eReading configuration and data\"] --\u003e CSM\n    INPUT --\u003e IPSIM[\"Simulation Control\u003cbr\u003eIPSIM\"]\n    INPUT --\u003e IPEXP[\"Experiment Input\u003cbr\u003eIPEXP\"]\n    INPUT --\u003e IPVAR[\"Cultivar Input\u003cbr\u003eIPVAR\"]\n    \n    SOIL --\u003e SOILWATER[\"Soil Water\u003cbr\u003eWATBAL\"]\n    SOIL --\u003e SOILCHEM[\"Soil Chemistry\u003cbr\u003eNutrients\"]\n    SOIL --\u003e SOILORG[\"Soil Organic Matter\u003cbr\u003eC and N cycles\"]\n    SOIL --\u003e SOILGHG[\"Soil GHG\u003cbr\u003eEmissions\"]\n    SOIL --\u003e SOILDYN[\"Soil Dynamics\u003cbr\u003eSOILDYN\"]\n    \n    PLANT --\u003e CROPGRO[\"CROPGRO Models\u003cbr\u003eLegumes and other crops\"]\n    PLANT --\u003e CERES[\"CERES Models\u003cbr\u003eCereal crops\"]\n    PLANT --\u003e FORAGE[\"FORAGE Models\u003cbr\u003eForage crops\"]\n    PLANT --\u003e CSCER[\"CSCER Models\u003cbr\u003eSmall grains\"]\n```\n\nSources: [README.md:25-35](), [CSM_Main/LAND.for:8-14](), [Plant/plant.for:9-22](), [Soil/SOIL.for:8-17](), [SPAM/SPAM.for:8-12](), [CSM_Main/CSM.for:35-48]()\n\n## Simulation Control Flow\n\nDSSAT-CSM operates as a time-step model with several distinct phases of execution, controlled by the DYNAMIC variable. The simulation proceeds through initialization, daily rate calculations, integration, and output stages.\n\n```mermaid\nsequenceDiagram\n    participant CSM as \"CSM Main\"\n    participant LAND as \"LAND Module\"\n    participant SOIL as \"Soil Module\"\n    participant SPAM as \"SPAM Module\"\n    participant PLANT as \"Plant Module\"\n    \n    Note over CSM: Program starts\n    CSM-\u003e\u003eCSM: Process command line\n    CSM-\u003e\u003eINPUT: Read input files\n    \n    Note over CSM: RUNINIT (Run initialization)\n    CSM-\u003e\u003eLAND: Initialize (DYNAMIC=RUNINIT)\n    LAND-\u003e\u003eSOIL: Initialize soil properties\n    LAND-\u003e\u003eSPAM: Initialize energy balance\n    LAND-\u003e\u003ePLANT: Initialize plant parameters\n    \n    Note over CSM: SEASINIT (Season initialization)\n    CSM-\u003e\u003eLAND: Start season (DYNAMIC=SEASINIT)\n    LAND-\u003e\u003eWEATHER: Initialize weather data\n    LAND-\u003e\u003eMGMTOPS: Set management operations\n    LAND-\u003e\u003eSOIL: Initialize soil conditions\n    LAND-\u003e\u003eSPAM: Initial soil-plant-atm\n    LAND-\u003e\u003ePLANT: Initialize crop growth\n    \n    Note over CSM: Daily simulation loop starts\n    loop For each day until YRDOY \u003e YREND\n        Note over CSM: RATE (Daily rate calculations)\n        CSM-\u003e\u003eLAND: Calculate rates (DYNAMIC=RATE)\n        LAND-\u003e\u003eWEATHER: Get daily weather\n        LAND-\u003e\u003eMGMTOPS: Apply operations\n        LAND-\u003e\u003eSOIL: Calculate soil processes\n        LAND-\u003e\u003eSPAM: Calculate energy balance\n        LAND-\u003e\u003ePLANT: Calculate plant processes\n        \n        Note over CSM: INTEGR (Integration)\n        CSM-\u003e\u003eLAND: Integrate states (DYNAMIC=INTEGR)\n        LAND-\u003e\u003eSOIL: Update soil state\n        LAND-\u003e\u003eSPAM: Update energy state\n        LAND-\u003e\u003ePLANT: Update plant state\n        \n        Note over CSM: OUTPUT (Daily output)\n        CSM-\u003e\u003eLAND: Generate output (DYNAMIC=OUTPUT)\n    end\n    \n    Note over CSM: SEASEND (End of season)\n    CSM-\u003e\u003eLAND: End season (DYNAMIC=SEASEND)\n    \n    Note over CSM: ENDRUN (End of all runs)\n    CSM-\u003e\u003eLAND: Final cleanup (DYNAMIC=ENDRUN)\n```\n\nSources: [CSM_Main/CSM.for:207-804](), [CSM_Main/LAND.for:119-531]()\n\n## Core Modules\n\n### CSM Main Module\n\nThe CSM Main module serves as the control center for the entire simulation. It:\n- Processes command-line arguments to determine simulation mode\n- Reads input files via the Input Module\n- Controls the simulation timing and sequence\n- Manages multiple seasonal or sequential runs\n- Coordinates calls to the LAND module at each dynamic stage\n\nThe CSM module uses a state-based approach to simulation, with different phases represented by the DYNAMIC variable:\n- RUNINIT: One-time initialization at the start of the simulation\n- SEASINIT: Initialization at the start of each season\n- RATE: Daily rate calculations\n- INTEGR: State integration and updates\n- OUTPUT: Output generation\n- SEASEND: End-of-season processing\n- ENDRUN: Final cleanup at the end of the simulation\n\nSources: [CSM_Main/CSM.for:34-208](), [CSM_Main/CSM.for:207-804]()\n\n### LAND Module\n\nThe LAND Module provides the interface between soil, weather, and crops. It coordinates the execution sequence of:\n- SOIL processes\n- SPAM (Soil-Plant-Atmosphere) calculations\n- PLANT growth and development\n\nFor each simulation stage (RUNINIT, SEASINIT, RATE, INTEGR, OUTPUT, SEASEND, ENDRUN), the LAND module calls the appropriate functions in each component module, ensuring proper data flow between them.\n\nSources: [CSM_Main/LAND.for:8-14](), [CSM_Main/LAND.for:119-531]()\n\n### SOIL Module\n\nThe SOIL Module handles all soil-related processes including:\n- Soil water balance (infiltration, drainage, runoff, evaporation)\n- Soil nutrient dynamics (nitrogen, phosphorus, potassium)\n- Soil organic matter transformations\n- Soil temperature\n- Soil physical properties dynamics\n\nThe module is further divided into specialized sub-modules like SoilDyn (soil dynamics), WATBAL (water balance), SoilN_inorg (inorganic soil N), SoilPi (inorganic soil P), SoilKi (inorganic soil K), and SoilOrg/CENTURY (organic matter).\n\nSources: [Soil/SOIL.for:8-17](), [README.md:27-32]()\n\n### PLANT Module\n\nThe PLANT Module simulates crop growth and development. It serves as a dispatcher for different crop models:\n- CROPGRO: Generic crop model for legumes and other crops\n- CERES: Models for cereal crops (maize, sorghum, millet, etc.)\n- CSCER/CSCRP: Models for wheat, barley\n- FORAGE: Models for forage crops\n- Various other specialized crop models\n\nThe module calculates:\n- Crop phenology (developmental stages)\n- Biomass accumulation\n- Partitioning to different plant organs\n- Yield components\n- Stress factors (water, temperature, nitrogen, etc.)\n- Root growth and water/nutrient uptake\n\nSources: [Plant/plant.for:9-22](), [Plant/plant.for:80-104](), [Plant/CROPGRO/CROPGRO.for:9-42]()\n\n### SPAM Module\n\nThe SPAM (Soil-Plant-Atmosphere) Module calculates the energy balance components at the soil-plant-atmosphere interface:\n- Potential evapotranspiration\n- Soil evaporation\n- Plant transpiration\n- Root water uptake\n- Energy partitioning\n\nThis module serves as a critical link between soil water availability, plant water demand, and atmospheric conditions.\n\nSources: [SPAM/SPAM.for:8-12](), [SPAM/SPAM.for:34-36]()\n\n### Weather Module\n\nThe Weather Module reads, processes, and provides daily weather data to the simulation:\n- Temperature (maximum, minimum, average)\n- Solar radiation\n- Precipitation\n- Wind speed\n- Relative humidity\n- CO2 concentration\n\nIt supports different methods for acquiring weather data, including measured data files, generated data, or simulated weather.\n\nSources: [Data/WEATHER.CDE:1-29](), [CSM_Main/LAND.for:161-296]()\n\n## Data Structures and Flow\n\nDSSAT-CSM uses structured data types (derived types in Fortran) to organize and exchange information between modules. Key data structures include:\n\n### Primary Data Types\n\n| Data Type | Description | Key Fields |\n|-----------|-------------|------------|\n| ControlType | Simulation control variables | DYNAMIC, CROP, MODEL, RUN, YRDOY, DAS |\n| SwitchType | Simulation option switches | ISWWAT, ISWNIT, ISWSYM, MEEVP, MEPHO |\n| SoilType | Soil properties | DLAYR, LL, DUL, SAT, NLAYR, KG2PPM |\n| WeatherType | Weather data | SRAD, TMAX, TMIN, RAIN, RHUM, WINDSP, CO2 |\n| ResidueType | Crop residue information | RESTYPE, RESIDUE, RESWT, RESE |\n| FloodWatType | Floodwater properties | FLOOD, RFLDD, FLDD |\n| FloodNType | Flood nitrogen components | FLOODN, FLOODC |\n| MulchType | Surface mulch properties | MULCHMASS, MULCHCOVER |\n\n### Data Flow Diagram\n\n```mermaid\ngraph TB\n    INPUT[\"Input Module\"] --\u003e |\"CONTROL\u003cbr\u003eISWITCH\u003cbr\u003eWEATHER\u003cbr\u003eSOILPROP\"| CSM[\"CSM Main\"]\n    CSM --\u003e |\"CONTROL\u003cbr\u003eISWITCH\"| LAND[\"LAND Module\"]\n    \n    LAND --\u003e |\"SW\u003cbr\u003eNO3\u003cbr\u003eNH4\u003cbr\u003eST\"| PLANT[\"Plant Module\"]\n    LAND --\u003e |\"WEATHER\"| PLANT\n    \n    PLANT --\u003e |\"RLV\u003cbr\u003eTRWUP\u003cbr\u003eUNO3\u003cbr\u003eUNH4\"| LAND\n    \n    LAND --\u003e |\"SW\u003cbr\u003eST\u003cbr\u003eNO3\u003cbr\u003eNH4\"| SOIL[\"Soil Module\"]\n    SOIL --\u003e |\"SW\u003cbr\u003eNO3\u003cbr\u003eNH4\u003cbr\u003eST\"| LAND\n    \n    LAND --\u003e |\"SW\u003cbr\u003eST\u003cbr\u003eRLV\u003cbr\u003eXHLAI\"| SPAM[\"SPAM Module\"]\n    SPAM --\u003e |\"ES\u003cbr\u003eEO\u003cbr\u003eEP\u003cbr\u003eTRWUP\"| LAND\n    \n    WEATHER[\"Weather Module\"] --\u003e |\"WEATHER\"| LAND\n    \n    LAND --\u003e |\"Management\u003cbr\u003eOperations\"| MGMTOPS[\"Management Operations\"]\n    MGMTOPS --\u003e |\"FERTDATA\u003cbr\u003eIRRAMT\u003cbr\u003eHARVFRAC\"| LAND\n    \n    CSM --\u003e |\"CONTROL\u003cbr\u003eYRDOY\u003cbr\u003eDAS\"| OUTPUT[\"Output Module\"]\n```\n\nSources: [CSM_Main/LAND.for:25-139](), [Soil/SOIL.for:57-98](), [SPAM/SPAM.for:38-101](), [Plant/plant.for:65-74](), [Plant/CROPGRO/CROPGRO.for:51-189]()\n\n## Input and Output System\n\n### Input System\n\nDSSAT-CSM uses a comprehensive input system to define simulation parameters. Key input files include:\n\n1. **FileX** - Experiment files containing:\n   - Crop and cultivar information\n   - Management practices (planting, irrigation, fertilization, etc.)\n   - Initial soil conditions\n   - Weather station information\n\n2. **Weather files** - Daily weather data including solar radiation, maximum and minimum temperatures, precipitation, etc.\n\n3. **Soil files** - Physical and chemical soil properties by layer\n\n4. **Genotype files** - Cultivar, ecotype, and species parameters for specific crops\n\n5. **Ecotype files** - Parameters defining groups of similar cultivars\n\n6. **Species files** - Parameters defining crop-specific processes\n\nSources: [InputModule/input_sub.for:9-19](), [Data/DETAIL.CDE:1-29](), [Data/SOIL.CDE:1-16](), [Data/WEATHER.CDE:1-29](), [Data/Genotype/CBGRO048.CUL:1-34](), [Data/Genotype/CBGRO048.ECO:1-37](), [Data/Genotype/CBGRO048.SPE:1-40]()\n\n### Output System\n\nDSSAT-CSM generates various output files to report simulation results:\n\n| Output Type | Description | Example Files |\n|-------------|-------------|---------------|\n| Daily Outputs | Detailed daily simulation results | PlantGro.OUT, SoilWat.OUT, Weather.OUT, ET.OUT |\n| Summary Outputs | Season-end summaries | Summary.OUT, Evaluate.OUT, Overview.OUT |\n| Balance Outputs | Mass balance checks | SoilWatBal.OUT, SoilNBal.OUT, PlantCBal.OUT |\n| Special Outputs | Model-specific detailed outputs | MulWatBal.OUT, SOMLITC.OUT |\n| CSV Formats | Comma-separated values for easy analysis | summary.csv, plantgro.csv |\n\nSources: [Data/OUTPUT.CDE:1-118](), [Soil/SoilWater/OPSWBL.for:1-8]()\n\n## Build System\n\nDSSAT-CSM uses CMake for building the software, which allows for cross-platform compilation and configuration. The build system supports different compilation modes:\n\n- **DEBUG**: Build with debugging information\n- **RELEASE**: Optimized build for production use\n- **TESTING**: Build for testing purposes\n\nThe CMAKE configuration handles compiler-specific flags, optimization levels, and other build options, making the code portable across different computing environments.\n\nSources: [README.md:54-113](), [cmake/Modules/SetFortranFlags.cmake:1-57]()\n\n## Simulation Modes\n\nDSSAT-CSM supports multiple simulation modes to address different research and application needs:\n\n| Mode | Code | Description |\n|------|------|-------------|\n| All Treatments | A | Run all treatments in an experiment file |\n| Batch | B | Run multiple experiments defined in a batch file |\n| Command Line | C | Single run with parameters from command line |\n| Debug | D | Development mode bypassing normal input |\n| Sensitivity | E | Sensitivity analysis mode |\n| Farm | F | Farm-scale simulation mode |\n| Gencalc | G/T | Genetic coefficient calculator modes |\n| Interactive | I | User interface mode for experiment selection |\n| Seasonal | N | Seasonal analysis across multiple years |\n| Sequence | Q | Sequential simulations (rotations) |\n| Spatial | S | Spatial simulations across multiple locations |\n| Yield Forecast | Y | In-season yield prediction mode |\n\nSources: [CSM_Main/CSM.for:154-175](), [Data/SIMULATION.CDE:8-148]()\n\n## Extended Features\n\nBeyond the core functionality, DSSAT-CSM includes specialized capabilities:\n\n- **Crop Rotations**: Support for multi-year, multi-crop simulations\n- **Climate Change Studies**: Ability to modify CO2 and weather parameters for climate change scenarios\n- **Sensitivity Analysis**: Tools for exploring model sensitivity to parameters\n- **Greenhouse Gas Emissions**: Modeling of N2O and methane emissions\n- **Resource Use Efficiency**: Water and nutrient use efficiency calculations\n\nSources: [README.md:141-147](), [Data/WEATHER.CDE:30-84](), [Data/ECONOMIC.CDE:1-44]()"])</script><script>self.__next_f.push([1,"19:T34b7,"])</script><script>self.__next_f.push([1,"# System Architecture\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [CSM_Main/CSM.for](CSM_Main/CSM.for)\n- [CSM_Main/LAND.for](CSM_Main/LAND.for)\n- [Data/Genotype/CBGRO048.CUL](Data/Genotype/CBGRO048.CUL)\n- [Data/Genotype/CBGRO048.ECO](Data/Genotype/CBGRO048.ECO)\n- [Data/Genotype/CBGRO048.SPE](Data/Genotype/CBGRO048.SPE)\n- [InputModule/input_sub.for](InputModule/input_sub.for)\n- [Plant/CROPGRO/CROPGRO.for](Plant/CROPGRO/CROPGRO.for)\n- [Plant/plant.for](Plant/plant.for)\n- [README.md](README.md)\n- [SPAM/SPAM.for](SPAM/SPAM.for)\n- [Soil/SOIL.for](Soil/SOIL.for)\n- [cmake/Modules/SetFortranFlags.cmake](cmake/Modules/SetFortranFlags.cmake)\n\n\u003c/details\u003e\n\n\n\n## Purpose and Scope\n\nThis document describes the overall architecture of the DSSAT Cropping System Model (DSSAT-CSM), a process-based crop simulation model that simulates crop growth, development, and yield under various environmental conditions and management practices. It outlines the major components, their interactions, control flow, and data flow within the system. For information about specific crop models, weather simulation, or soil processes, see the corresponding documentation pages in the [Core Modules](#3) section.\n\n## High-Level Architecture Overview\n\nDSSAT-CSM follows a modular design structure where components are separated by scientific discipline. The main program (CSM) coordinates multiple simulation loops and calls the LAND module, which serves as a central interface between soil, plant, atmosphere, and management components.\n\n```mermaid\ngraph TD\n    CSM[\"CSM Main\\n(program entry)\"] --\u003e LAND[\"LAND Module\\n(central interface)\"]\n    LAND --\u003e WEATHR[\"WEATHR\\n(weather data)\"]\n    LAND --\u003e SOIL[\"SOIL\\n(soil processes)\"]\n    LAND --\u003e SPAM[\"SPAM\\n(soil-plant-atmosphere)\"]\n    LAND --\u003e PLANT[\"PLANT\\n(crop models)\"]\n    LAND --\u003e MGMTOPS[\"MGMTOPS\\n(management operations)\"]\n    \n    INPUT_SUB[\"INPUT_SUB\\n(file processing)\"] --\u003e CSM\n    \n    SOIL --\u003e SOILDYN[\"SOILDYN\\n(soil dynamics)\"]\n    SOIL --\u003e WATBAL[\"WATBAL\\n(water balance)\"]\n    SOIL --\u003e SoilN[\"SoilNi\\n(inorganic N)\"]\n    SOIL --\u003e SoilP[\"SoilPi\\n(inorganic P)\"]\n    SOIL --\u003e SoilK[\"SoilKi\\n(inorganic K)\"]\n    SOIL --\u003e SOM[\"SoilOrg/CENTURY\\n(organic matter)\"]\n    \n    SPAM --\u003e STEMP[\"STEMP\\n(soil temperature)\"]\n    SPAM --\u003e PET[\"PET\\n(potential ET)\"]\n    SPAM --\u003e SOILEV[\"SOILEV\\n(soil evaporation)\"]\n    SPAM --\u003e TRANS[\"TRANS\\n(transpiration)\"]\n    SPAM --\u003e ROOTWU[\"ROOTWU\\n(root water uptake)\"]\n    \n    PLANT --\u003e CROPGRO[\"CROPGRO\\n(grain legumes)\"]\n    PLANT --\u003e CERES[\"CERES Models\\n(cereals)\"]\n    PLANT --\u003e CSCER[\"CSCER Models\\n(wheat, barley)\"]\n    PLANT --\u003e OTHER[\"Other Crop Models\"]\n```\n\nSources: [README.md:27-35](), [CSM_Main/CSM.for:424-425](), [CSM_Main/LAND.for:24-37](), [Plant/plant.for:65-108](), [Soil/SOIL.for:11-19](), [SPAM/SPAM.for:28-35]()\n\n## Simulation Control Flow\n\nThe DSSAT-CSM simulation follows a nested loop structure with well-defined execution phases:\n\n```mermaid\ngraph TD\n    subgraph \"Simulation Loops\"\n        START[\"CSM Program Start\"] --\u003e RUNINIT[\"Run Initialization\\n(DYNAMIC=RUNINIT)\"]\n        RUNINIT --\u003e RUN_LOOP[\"Run Loop\\n(different treatments)\"]\n        RUN_LOOP --\u003e SEASINIT[\"Seasonal Initialization\\n(DYNAMIC=SEASINIT)\"]\n        SEASINIT --\u003e SEAS_LOOP[\"Seasonal Loop\\n(multiple years)\"]\n        SEAS_LOOP --\u003e DAY_LOOP[\"Daily Loop\\n(time steps)\"]\n        DAY_LOOP --\u003e RATE[\"Rate Calculations\\n(DYNAMIC=RATE)\"]\n        RATE --\u003e INTEGR[\"Integration\\n(DYNAMIC=INTEGR)\"]\n        INTEGR --\u003e OUTPUT[\"Output\\n(DYNAMIC=OUTPUT)\"]\n        OUTPUT --\u003e DAY_NEXT{\"More Days?\"}\n        DAY_NEXT --\u003e|\"Yes\"| DAY_LOOP\n        DAY_NEXT --\u003e|\"No\"| SEASEND[\"Season End\\n(DYNAMIC=SEASEND)\"]\n        SEASEND --\u003e SEAS_NEXT{\"More Seasons?\"}\n        SEAS_NEXT --\u003e|\"Yes\"| SEAS_LOOP\n        SEAS_NEXT --\u003e|\"No\"| RUNEND[\"Run End\\n(DYNAMIC=ENDRUN)\"]\n        RUNEND --\u003e RUN_NEXT{\"More Runs?\"}\n        RUN_NEXT --\u003e|\"Yes\"| RUN_LOOP\n        RUN_NEXT --\u003e|\"No\"| END[\"Program End\"]\n    end\n```\n\nSources: [CSM_Main/CSM.for:254-599](), [CSM_Main/CSM.for:473-480](), [CSM_Main/CSM.for:507-511](), [CSM_Main/CSM.for:528-532](), [CSM_Main/CSM.for:542-545]()\n\n## Module Call Sequence\n\nFor each dynamic phase, modules are called in a specific sequence through the LAND module:\n\n```mermaid\nsequenceDiagram\n    participant CSM as CSM Main\n    participant LAND as LAND Module\n    participant WEATHR as WEATHR Module\n    participant MGMT as MGMTOPS Module\n    participant SOIL as SOIL Module\n    participant SPAM as SPAM Module\n    participant PLANT as PLANT Module\n    \n    CSM-\u003e\u003eLAND: Call with DYNAMIC=RATE\n    LAND-\u003e\u003eWEATHR: Get weather data\n    LAND-\u003e\u003eMGMT: Process management operations\n    LAND-\u003e\u003eSOIL: Calculate soil processes\n    LAND-\u003e\u003eSPAM: Calculate soil-plant-atmosphere interface\n    LAND-\u003e\u003ePLANT: Calculate plant growth rates\n    LAND--\u003e\u003eCSM: Return\n    \n    CSM-\u003e\u003eLAND: Call with DYNAMIC=INTEGR\n    LAND-\u003e\u003eSOIL: Integrate soil state variables\n    LAND-\u003e\u003eSPAM: Update cumulative totals\n    LAND-\u003e\u003ePLANT: Update plant state variables\n    LAND--\u003e\u003eCSM: Return\n    \n    CSM-\u003e\u003eLAND: Call with DYNAMIC=OUTPUT\n    LAND-\u003e\u003eSOIL: Output soil states\n    LAND-\u003e\u003eSPAM: Output water balance\n    LAND-\u003e\u003ePLANT: Output plant states\n    LAND--\u003e\u003eCSM: Return\n```\n\nSources: [CSM_Main/LAND.for:287-349](), [CSM_Main/LAND.for:354-392](), [CSM_Main/LAND.for:400-438]()\n\n## Core Modules\n\n### CSM Main Module\n\nThe CSM module is the main program entry point that:\n- Processes command line arguments for run mode (`RNMODE`)\n- Controls the nested loops for runs, seasons, and days\n- Manages the simulation dynamics (initialization, rate, integration, output)\n- Coordinates model components through calls to the LAND module\n\nKey functions include handling different run modes:\n- 'A' - Run all treatments\n- 'B' - Batch mode with multiple treatments\n- 'I' - Interactive mode\n- 'Q' - Sequence analysis\n- 'N' - Seasonal analysis\n\nSources: [CSM_Main/CSM.for:77-126](), [CSM_Main/CSM.for:154-176](), [CSM_Main/CSM.for:257-429](), [CSM_Main/CSM.for:434-546]()\n\n### LAND Module\n\nThe LAND module serves as the central interface between system components:\n- Coordinates sequential calling of all subsystem modules\n- Passes data between modules\n- Manages timing of module execution during simulation\n- Handles state transitions throughout the cropping system\n\nFor each execution phase (DYNAMIC), LAND calls the modules in a specific sequence:\n1. WEATHR - Weather data processing\n2. MGMTOPS - Management operations\n3. SOIL - Soil processes\n4. SPAM - Soil-plant-atmosphere interface\n5. PLANT - Plant growth and development\n\nSources: [CSM_Main/LAND.for:10-13](), [CSM_Main/LAND.for:25-26](), [CSM_Main/LAND.for:137-207](), [CSM_Main/LAND.for:211-281](), [CSM_Main/LAND.for:286-349]()\n\n### SOIL Module\n\nThe SOIL module integrates multiple soil processes:\n\n```mermaid\ngraph TD\n    SOIL[\"SOIL Module\"] --\u003e SOILDYN[\"SOILDYN\\n(soil properties)\"]\n    SOIL --\u003e WATBAL[\"WATBAL\\n(water balance)\"]\n    SOIL --\u003e OM[\"Organic Matter\\n(SoilOrg or CENTURY)\"]\n    SOIL --\u003e SoilNi[\"SoilNi\\n(inorganic N)\"]\n    SOIL --\u003e SoilPi[\"SoilPi\\n(inorganic P)\"]\n    SOIL --\u003e SoilKi[\"SoilKi\\n(inorganic K)\"]\n    \n    WATBAL --\u003e DRAIN[\"Drainage\"]\n    WATBAL --\u003e RUNOFF[\"Runoff\"]\n    WATBAL --\u003e INFILTRATION[\"Infiltration\"]\n    \n    OM --\u003e IMM[\"Immobilization\"]\n    OM --\u003e MNR[\"Mineralization\"]\n    \n    SoilNi --\u003e NITRIFICATION[\"Nitrification\"]\n    SoilNi --\u003e DENITRIFICATION[\"Denitrification\"]\n    SoilNi --\u003e LEACHING[\"N Leaching\"]\n```\n\nSources: [Soil/SOIL.for:9-19](), [Soil/SOIL.for:36-44](), [Soil/SOIL.for:126-191]()\n\n### SPAM Module (Soil-Plant-Atmosphere)\n\nThe SPAM module calculates energy balance at the soil-plant-atmosphere interface:\n- Soil temperature (STEMP or STEMP_EPIC)\n- Potential evapotranspiration (PET)\n- Soil evaporation (SOILEV)\n- Plant transpiration (TRANS)\n- Root water uptake (ROOTWU, XTRACT)\n\nKey energy balance components:\n- Potential evapotranspiration (EO)\n- Potential plant transpiration (EOP)\n- Potential soil evaporation (EOS)\n- Actual plant transpiration (EP)\n- Actual soil evaporation (ES)\n- Root water uptake by layer (RWU)\n\nSources: [SPAM/SPAM.for:9-12](), [SPAM/SPAM.for:28-35](), [SPAM/SPAM.for:175-184](), [SPAM/SPAM.for:300-305](), [SPAM/SPAM.for:314](), [SPAM/SPAM.for:435-438]()\n\n### PLANT Module\n\nThe PLANT module dispatches to the appropriate crop model based on the value of `MODEL`:\n\n```mermaid\ngraph TD\n    PLANT[\"PLANT Module\\n(dispatch mechanism)\"] --\u003e MODEL{\"MODEL value\"}\n    MODEL --\u003e|\"CRGRO\"| CROPGRO[\"CROPGRO\\n(legumes and others)\"]\n    MODEL --\u003e|\"CSCER\"| CSCER[\"CSCERES_Interface\\n(wheat, barley)\"]\n    MODEL --\u003e|\"MZCER\"| MZCER[\"MZ_CERES\\n(maize)\"]\n    MODEL --\u003e|\"SGCER\"| SGCER[\"SG_CERES\\n(sorghum)\"]\n    MODEL --\u003e|\"MLCER\"| MLCER[\"ML_CERES\\n(millet)\"]\n    MODEL --\u003e|\"RICER\"| RICER[\"RICE\\n(rice)\"]\n    MODEL --\u003e|\"PTSUB\"| PTSUB[\"PT_SUBSTOR\\n(potato)\"]\n    MODEL --\u003e|\"WHAPS\"| WHAPS[\"WH_APSIM\\n(N-wheat)\"]\n    MODEL --\u003e|\"TFCER\"| TFCER[\"TEFF\\n(tef)\"]\n    MODEL --\u003e|\"TRARO\"| TRARO[\"TR_SUBSTOR\\n(taro)\"]\n    MODEL --\u003e|\"SCCAN\"| SCCAN[\"SC_CNGRO\\n(sugarcane)\"]\n    \n    CROPGRO --\u003e PHOTO[\"PHOTO\\n(photosynthesis)\"]\n    CROPGRO --\u003e PHENOL[\"PHENOL\\n(phenology)\"]\n    CROPGRO --\u003e DEMAND[\"DEMAND\\n(carbon/N demand)\"]\n    CROPGRO --\u003e GROW[\"GROW\\n(biomass accumulation)\"]\n    CROPGRO --\u003e NFIX[\"NFIX\\n(N fixation)\"]\n```\n\nSources: [Plant/plant.for:10-13](), [Plant/plant.for:65-108](), [Plant/plant.for:373-729](), [Plant/CROPGRO/CROPGRO.for:45-52](), [Plant/CROPGRO/CROPGRO.for:249-369]()\n\n### Input Module\n\nThe input module (INPUT_SUB) processes simulation inputs:\n- Reads experimental parameters from FILEX\n- Processes soil characteristics\n- Handles cultivar coefficients\n- Sets initial conditions\n- Configures simulation options\n\nInput processing sequence:\n1. IPEXP - Experiment parameters\n2. IPSOIL - Soil data\n3. IPVAR - Cultivar data\n4. IPSLIN - Initial soil conditions\n5. IPSLAN - Soil analysis data\n\nSources: [InputModule/input_sub.for:9-19](), [InputModule/input_sub.for:183-192](), [InputModule/input_sub.for:198-203](), [InputModule/input_sub.for:208-211](), [InputModule/input_sub.for:217-232]()\n\n## Data Flow and Communication\n\nData flows between modules through structured variable types defined in ModuleDefs.for:\n\n| Type Name | Description | Key Variables |\n|-----------|-------------|---------------|\n| ControlType | Simulation control settings | DYNAMIC, CROP, YRDOY, DAS, RUN |\n| SwitchType | Simulation switches | ISWWAT, ISWNIT, ISWSYM, MEEVP, MEPHO |\n| SoilType | Soil properties | DLAYR, LL, DUL, SAT, NLAYR, SLPF |\n| WeatherType | Weather data | CO2, DAYL, PAR, SRAD, TAVG, TMAX, TMIN |\n| ResidueType | Crop residue information | RESWT, RESLig, RESE |\n| FloodWatType | Flood water management | FLOOD, BUNDED, EF |\n\nThe key constructed variables passed between modules are:\n- CONTROL - Simulation control settings\n- ISWITCH - Simulation switches\n- SOILPROP - Soil properties\n- WEATHER - Weather data\n- HARVRES - Harvest residue information\n- SENESCE - Plant senescence information\n- FLOODWAT - Flood water management\n\nSources: [CSM_Main/CSM.for:117-121](), [CSM_Main/LAND.for:59-71](), [CSM_Main/LAND.for:83-97](), [CSM_Main/LAND.for:107-128](), [SPAM/SPAM.for:94-100](), [Plant/CROPGRO/CROPGRO.for:184-189]()\n\n## Build System\n\nDSSAT-CSM uses CMake for building across platforms:\n\n```mermaid\ngraph TD\n    CMake[\"CMakeLists.txt\\n(main configuration)\"] --\u003e BUILD[\"build/ directory\\n(compilation artifacts)\"]\n    CMake --\u003e MODULES[\"cmake/Modules/\\n(compiler settings)\"]\n    \n    MODULES --\u003e SetFortranFlags[\"SetFortranFlags.cmake\\n(compiler flags)\"]\n    MODULES --\u003e SetCompileFlag[\"SetCompileFlag.cmake\\n(flag testing)\"]\n    \n    SetFortranFlags --\u003e FLAGS[\"Compiler flags by build type:\"]\n    FLAGS --\u003e DEBUG[\"DEBUG\\n(-O0, -g, -traceback)\"]\n    FLAGS --\u003e TESTING[\"TESTING\\n(-O2)\"]\n    FLAGS --\u003e RELEASE[\"RELEASE\\n(-O3, -unroll-loops)\"]\n    \n    BUILD --\u003e BIN[\"bin/\\n(executables)\"]\n    BUILD --\u003e MOD[\"mod/\\n(.mod files)\"]\n```\n\nKey build options:\n- CMAKE_BUILD_TYPE: DEBUG, RELEASE, or TESTING \n- DYNAMIC_LINK: Static or dynamic linking (default is OFF)\n- CMAKE_Fortran_COMPILER: Fortran compiler selection\n\nThe build process typically follows these steps:\n```\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=RELEASE\nmake\n```\n\nSources: [README.md:54-112](), [cmake/Modules/SetFortranFlags.cmake:5-219]()\n\n## Genotype Data Files\n\nThe model uses three types of data files to parameterize crops:\n\n1. **Species Files (*.SPE)** - Basic physiological parameters\n   - Photosynthesis parameters (PARMAX, PHTMAX, KCAN)\n   - Respiration parameters (RES30C, RNO3C)\n   - Plant composition values (PROLFI, PCARLF)\n   - Carbon and nitrogen mining parameters\n\n2. **Cultivar Files (*.CUL)** - Cultivar-specific parameters\n   - Phenology parameters (EM-FL, FL-SH, SD-PM)\n   - Growth parameters (LFMAX, SLAVR, SIZLF)\n   - Yield components (WTPSD, SDPDV, THRSH)\n\n3. **Ecotype Files (*.ECO)** - Environmental adaptation parameters\n   - Temperature adaptation (OPTBI, SLOBI)\n   - Developmental stages (PL-EM, EM-V1, JU-R0)\n   - Growth characteristics (RWIDTH, RHGHT)\n\nSources: [Data/Genotype/CBGRO048.SPE:1-133](), [Data/Genotype/CBGRO048.CUL:1-49](), [Data/Genotype/CBGRO048.ECO:1-58]()\n\nThis architecture is designed to be modular, allowing individual components to be replaced or improved while maintaining the overall structure of the system. The approach facilitates the addition of new crop models and environmental process simulations without requiring changes to the core framework."])</script><script>self.__next_f.push([1,"1a:T2656,"])</script><script>self.__next_f.push([1,"# Build System\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [CMakeLists.txt](CMakeLists.txt)\n- [Data/Genotype/SRGRO048.CUL](Data/Genotype/SRGRO048.CUL)\n- [Data/Genotype/SRGRO048.ECO](Data/Genotype/SRGRO048.ECO)\n- [Plant/SUBSTOR-Potato/PT_ROOTGR.for](Plant/SUBSTOR-Potato/PT_ROOTGR.for)\n- [ReleaseNotes.md](ReleaseNotes.md)\n- [Resources/Version48.rc](Resources/Version48.rc)\n- [Utilities/CSMVersion.for.in](Utilities/CSMVersion.for.in)\n\n\u003c/details\u003e\n\n\n\nThe DSSAT-CSM (Decision Support System for Agrotechnology Transfer - Cropping System Model) build system is based on CMake, providing a cross-platform solution for compiling the model on different operating systems. This page describes the configuration, compilation process, and version management system used in DSSAT-CSM.\n\nFor information about the overall system architecture, see [System Architecture](#2).\n\n## CMake Configuration\n\nDSSAT-CSM uses CMake as its build system, which allows the code to be compiled on various platforms including Windows, Linux, and macOS. The main configuration file is located at the root of the repository.\n\nThe minimum CMake version required is 3.5.0, as specified in the configuration file:\n\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 3.5.0)\n```\n\nThe build system prohibits in-source builds to prevent source code pollution and requires creating a separate build directory:\n\n```\nif(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_BINARY_DIR}\")\n   message(FATAL_ERROR \"DSSAT in-source builds are not permitted. \\nMake a separate folder\"\n                       \"for building:\\nmkdir build; cd build; cmake ..\\nBefore that,\"\n                       \"remove the files already created:\\n\"\n                       \"CMakeCache.txt and CMakeFiles\\n\")\nendif(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_BINARY_DIR}\")\n```\n\nSources: [CMakeLists.txt:7-14]()\n\n## Version Management\n\n### Version Information\n\nDSSAT-CSM uses a four-component versioning system:\n- MAJOR: Major version number\n- MINOR: Minor version number\n- MODEL: Model version number\n- BUILD: Build number\n\nThe version numbers are defined in the main CMake configuration file and are used throughout the build process:\n\n```\nSET(MAJOR 4)\nSET(MINOR 8)\nSET(MODEL 5)\nSET(BUILD 12)\n```\n\nSources: [CMakeLists.txt:22-25]()\n\n### Git Integration\n\nThe build system integrates with Git to extract information about the current branch and commit. This information is incorporated into the version system:\n\n```mermaid\ngraph TD\n    A[\"CMake Build System\"]\n    B[\"Git Repository\"]\n    C[\"Version Information\"]\n    D[\"Executable\"]\n    \n    A --\u003e|\"execute_process\"| B\n    B --\u003e|\"Returns branch name\"| A\n    B --\u003e|\"Returns commit hash\"| A\n    A --\u003e|\"Configures\"| C\n    C --\u003e|\"Incorporated into\"| D\n```\n\nSources: [CMakeLists.txt:27-48](), [Utilities/CSMVersion.for.in:13-21]()\n\nThe build system retrieves the current branch name and commit hash using Git commands:\n\n```\n# Get the current working branch\nexecute_process(\n  COMMAND git rev-parse --abbrev-ref HEAD\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  OUTPUT_VARIABLE BRANCH\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\n# Get the latest commit hash of the working branch\nexecute_process(\n  COMMAND git log -1 --format=%H\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  OUTPUT_VARIABLE GIT_COMMIT_HASH\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n```\n\nSources: [CMakeLists.txt:27-41]()\n\n### Version Template\n\nThe version information is passed to a Fortran module through template substitution. The template file `CSMVersion.for.in` contains placeholders that are replaced by CMake during the build process:\n\n```\nTYPE VersionType\n  INTEGER :: Major = @MAJOR@\n  INTEGER :: Minor = @MINOR@\n  INTEGER :: Model = @MODEL@\n  INTEGER :: Build = @BUILD@\nEND TYPE VersionType\nTYPE (VersionType) Version\nCHARACTER(len=*), PARAMETER :: VBranch = '-@BRANCH@'\n```\n\nSources: [Utilities/CSMVersion.for.in:13-21]()\n\nThe configured version file is then generated as part of the build process:\n\n```\nconfigure_file(\n    \"${PROJECT_SOURCE_DIR}/Utilities/CSMVersion.for.in\"\n    \"${PROJECT_SOURCE_DIR}/Utilities/CSMVersion.for\"\n)\n```\n\nSources: [CMakeLists.txt:91-94]()\n\n## Build Process\n\n### Build Workflow\n\nThe build process follows this general workflow:\n\n```mermaid\nflowchart TD\n    A[\"Configure CMake (cmake ..)\"]\n    B[\"Compile (make)\"]\n    C[\"Install (make install)\"]\n    \n    A --\u003e|\"Generates Makefiles\"| B\n    B --\u003e|\"Creates executable\"| C\n    C --\u003e|\"Copies files to destination\"| D[\"Installation Directory\"]\n    \n    E[\"CSMVersion.for.in\"] --\u003e|\"configure_file\"| F[\"CSMVersion.for\"]\n    G[\"Platform Detection\"] --\u003e|\"Windows\"| H[\"OSDefsWINDOWS.for\"]\n    G --\u003e|\"Linux/macOS\"| I[\"OSDefsLINUX.for\"]\n    \n    F --\u003e B\n    H --\u003e B\n    I --\u003e B\n```\n\nSources: [CMakeLists.txt:91-110]()\n\n### Platform-Specific Configuration\n\nThe build system detects the operating system and configures platform-specific files:\n\n- For Windows:\n  ```\n  IF(WIN32)\n      SET(OSDefinitions \"Utilities/OSDefsWINDOWS.for\")\n      add_definitions(-DWIN32=1})\n  ```\n\n- For Linux/macOS:\n  ```\n  ELSE()\n      SET(DSSAT_INSTALL_DIR $CMAKE_INSTALL_PREFIX)\n      SET(OSDefinitions \"Utilities/OSDefsLINUX.for\")\n      configure_file(\n          \"${PROJECT_SOURCE_DIR}/Data/DSSATPRO.L48.in\"\n          \"${PROJECT_SOURCE_DIR}/Data/DSSATPRO.L48\"\n      )\n      configure_file(\n          \"${PROJECT_SOURCE_DIR}/Utilities/run_dssat.in\"\n          \"${PROJECT_SOURCE_DIR}/Utilities/run_dssat\"\n      )\n  ENDIF(WIN32)\n  ```\n\nSources: [CMakeLists.txt:96-110]()\n\n### Build Output Organization\n\nThe build system organizes the output files to keep them organized and properly located:\n\n```\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\nset(CMAKE_Fortran_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/mod)\n```\n\nSources: [CMakeLists.txt:67-68]()\n\n## Source Files Management\n\n### Source File Organization\n\nThe build system defines a comprehensive list of source files to be compiled, organized by module:\n\n```mermaid\ngraph TD\n    A[\"DSSAT-CSM Source Code\"]\n    B[\"Utilities\"]\n    C[\"CSM_Main\"]\n    D[\"InputModule\"]\n    E[\"Management\"]\n    F[\"Plant Models\"]\n    G[\"Soil Modules\"]\n    H[\"SPAM\"]\n    I[\"Weather\"]\n    \n    A --\u003e B\n    A --\u003e C\n    A --\u003e D\n    A --\u003e E\n    A --\u003e F\n    A --\u003e G\n    A --\u003e H\n    A --\u003e I\n    \n    F --\u003e F1[\"CERES-Maize\"]\n    F --\u003e F2[\"CROPGRO\"]\n    F --\u003e F3[\"CERES-Rice\"]\n    F --\u003e F4[\"Many other crop models\"]\n```\n\nSources: [CMakeLists.txt:113-657]()\n\nThe source files are added to the executable target:\n\n```\nADD_EXECUTABLE(${EXECUTABLE_NAME} ${source_list})\n```\n\nSources: [CMakeLists.txt:658]()\n\nFor IDE organization (particularly Visual Studio), the build system groups the source files by directory:\n\n```\nforeach(source IN LISTS source_list)\n    get_filename_component(source_path \"${source}\" PATH)\n    string(REPLACE \"/\" \"\\\\\" source_path_msvc \"${source_path}\")\n    source_group(\"${source_path_msvc}\" FILES \"${source}\")\nendforeach()\n```\n\nSources: [CMakeLists.txt:660-664]()\n\n## Compilation and Installation\n\n### Executable Naming\n\nThe executable name is constructed from the version information:\n\n```\nSET(EXECUTABLE_NAME dscsm0${MAJOR}${MINOR})\n```\n\nFor version 4.8, this would result in `dscsm048`.\n\nSources: [CMakeLists.txt:91]()\n\n### Installation Configuration\n\nThe build system defines the installation targets, specifying what files should be installed and where:\n\n```\ninstall(TARGETS ${EXECUTABLE_NAME} DESTINATION\n    RUNTIME DESTINATION .)\n\ninstall(FILES Utilities/run_dssat DESTINATION .\n    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE\n    )\n\ninstall(DIRECTORY Data/ DESTINATION .\n    PATTERN \"*.in\" EXCLUDE)\n```\n\nSources: [CMakeLists.txt:667-675]()\n\n### Build Information Summary\n\nAt the end of the CMake configuration, a summary of the build settings is displayed:\n\n```\nmessage( \"-- Flags\" )\nmessage( \"   FFLAGS       ${CMAKE_Fortran_FLAGS}\" )\nmessage( \"   RELEASE      ${CMAKE_Fortran_FLAGS_RELEASE}\" )\nmessage( \"   DEBUG        ${CMAKE_Fortran_FLAGS_DEBUG}\")\nmessage( \"   LINKER       ${CMAKE_EXE_LINKER_FLAGS}\")\nmessage( \"-- Build Info\" )\nmessage( \"   BUILD TYPE   ${CMAKE_BUILD_TYPE}\" )\nmessage( \"   VERSION      ${MAJOR}.${MINOR}.${MODEL}.${BUILD}\" )\nmessage( \"   I. PREFIX    ${CMAKE_INSTALL_PREFIX}\" )\nmessage( \"   Executable   ${EXECUTABLE_NAME}\" )\n```\n\nSources: [CMakeLists.txt:681-690]()\n\n## Building DSSAT-CSM\n\n### Build Instructions\n\nTo build DSSAT-CSM, follow these steps:\n\n1. Create a build directory:\n   ```\n   mkdir build\n   cd build\n   ```\n\n2. Configure the build:\n   ```\n   cmake ..\n   ```\n\n3. Compile the code:\n   ```\n   make\n   ```\n\n4. Install (optional):\n   ```\n   make install\n   ```\n\nThe compiled executable will be located in the `build/bin` directory.\n\nSources: [CMakeLists.txt:7-14]()\n\n### Compiler Requirements\n\nThe build system requires a Fortran compiler with F90 support:\n\n```\nIF(NOT CMAKE_Fortran_COMPILER_SUPPORTS_F90)\n    MESSAGE(FATAL_ERROR \"Fortran compiler does not support F90\")\nENDIF(NOT CMAKE_Fortran_COMPILER_SUPPORTS_F90)\n```\n\nSources: [CMakeLists.txt:71-73]()\n\n## Version History\n\nThe DSSAT-CSM version history is maintained in the `CSMVersion.for.in` file, which includes a list of past versions and their corresponding release dates:\n\n| Version | Date | Description |\n|---------|------|-------------|\n| 4.8.5.12 | 2025-05-03 | PR 494 Commit SHA: 54fff70 |\n| 4.8.5.11 | 2025-05-02 | PR 493 Commit SHA: 4e29d72 |\n| 4.8.5.10 | 2025-05-02 | PR 481 Commit SHA: 483791e |\n| 4.8.5.9 | 2025-04-25 | PR 483 Commit SHA: a0056f0 |\n| 4.8.5.8 | 2025-04-25 | PR 485 Commit SHA: dcd1aa3 |\n| 4.8.5.0 | 2024-12-19 | v4.8.5 Release 2024 |\n| 4.8.2.0 | 2023-09-02 | v4.8.2 Release 2023 |\n| 4.8.1.0 | 2022-10-28 | v4.8.1 Interim release 2022 |\n| 4.8.0.1 | 2020-07-21 | v4.8 (=v4.7.5.14) |\n\nSources: [Utilities/CSMVersion.for.in:22-48](), [ReleaseNotes.md:3]()"])</script><script>self.__next_f.push([1,"1b:T24c2,"])</script><script>self.__next_f.push([1,"# Simulation Control\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [Data/DETAIL.CDE](Data/DETAIL.CDE)\n- [Data/ECONOMIC.CDE](Data/ECONOMIC.CDE)\n- [Data/GCOEFF.CDE](Data/GCOEFF.CDE)\n- [Data/GRSTAGE.CDE](Data/GRSTAGE.CDE)\n- [Data/JDATE.CDE](Data/JDATE.CDE)\n- [Data/OUTPUT.CDE](Data/OUTPUT.CDE)\n- [Data/PEST.CDE](Data/PEST.CDE)\n- [Data/SIMULATION.CDE](Data/SIMULATION.CDE)\n- [Data/SOIL.CDE](Data/SOIL.CDE)\n- [Data/WEATHER.CDE](Data/WEATHER.CDE)\n- [InputModule/IPSIM.for](InputModule/IPSIM.for)\n- [SPAM/SPSUBS.for](SPAM/SPSUBS.for)\n- [SPAM/STEMP.for](SPAM/STEMP.for)\n- [SPAM/STEMP_EPIC.for](SPAM/STEMP_EPIC.for)\n- [SPAM/TRANS.for](SPAM/TRANS.for)\n- [Soil/SoilWater/OPSWBL.for](Soil/SoilWater/OPSWBL.for)\n\n\u003c/details\u003e\n\n\n\n## Purpose and Scope\n\nThis document describes the Simulation Control system in DSSAT-CSM, which governs how crop simulations are configured and executed. Simulation Control sets parameters for simulation duration, timing, model selection, environmental factors, management practices, and output generation. For information about specific agricultural models or environmental processes, see related pages on [Core Modules](#3) and [Plant Models](#4).\n\n## Simulation Control Overview\n\nThe Simulation Control module reads simulation parameters from input files (primarily the FILEX experiment file), processes these parameters, and distributes the validated configuration to other modules through standardized data structures. It serves as the central configuration hub that determines how a simulation will be executed.\n\n```mermaid\ngraph TD\n    FILEX[\"FILEX Input File\"] --\u003e IPSIM[\"IPSIM Subroutine\\nSimulation Control\"]\n    IPSIM --\u003e CONTROL[\"CONTROL Structure\\n(Timing, Run Parameters)\"]\n    IPSIM --\u003e ISWITCH[\"ISWITCH Structure\\n(Simulation Options)\"]\n    External[\"External Simulation\\nControl File\"] -.-\u003e |Optional override| IPSIM\n    \n    CONTROL --\u003e OtherModules[\"Other DSSAT Modules\"]\n    ISWITCH --\u003e OtherModules\n```\n\nSources: [InputModule/IPSIM.for:43-96](), [InputModule/IPSIM.for:488-489]()\n\n## Key Parameters and Options\n\nThe Simulation Control system organizes configuration into several key sections, which are read from specific lines in the FILEX input file:\n\n### General Settings (Line 1)\n- Simulation duration (years)\n- Number of replications\n- Simulation start method (S = specified date)\n- Start date (YRDOY)\n- Random number seed for stochastic processes\n\n### Simulation Options (Line 2)\nOptions are typically set with Y (yes) or N (no) flags:\n\n| Option | Description | Default |\n|--------|-------------|---------|\n| ISWWAT | Water balance simulation | Y |\n| ISWNIT | Nitrogen simulation | Y |\n| ISWSYM | Symbiotic N fixation (legumes) | Y |\n| ISWPHO | Phosphorus simulation | N |\n| ISWPOT | Potassium simulation | N |\n| ISWDIS | Pest \u0026 disease simulation | N |\n| ISWCHE | Chemical applications | N |\n| ISWTIL | Tillage effects | Y |\n| ICO2   | CO2 effect (M=measured, D=default 380ppm) | M |\n\n### Simulation Methods (Line 3)\nMethods determine which algorithms are used for various processes:\n\n| Method | Description | Options |\n|--------|-------------|---------|\n| MEWTH  | Weather data source | M=measured, G=generated, W=simulated |\n| MESIC  | Soil initial conditions | M=as reported |\n| MELI   | Light interception | E=elliptic leaf distribution |\n| MEEVP  | Evapotranspiration | R=Priestley-Taylor/Ritchie, F=FAO-56 |\n| MEINF  | Infiltration | S=SCS curve number, R=Ritchie, N=no mulch effects |\n| MEPHO  | Photosynthesis | C=canopy curve, L=leaf photosynthesis |\n| MEHYD  | Hydrology | R=Ritchie water balance |\n| MESOM  | Soil organic matter | G=Godwin (CERES), P=Parton (CENTURY) |\n| MESEV  | Soil evaporation | R=Ritchie, S=Suleiman-Ritchie |\n| MESOL  | Soil layer distribution | 1=model-specific, 2=modified (default), 3=unmodified |\n| METMP  | Soil temperature | D=DSSAT, R=Ritchie, E=EPIC |\n| MEGHG  | Greenhouse gas emissions | 0=original DSSAT, 1=DayCent N2O |\n\n### Management Operations (Line 4)\nControls how management practices are handled:\n\n| Option | Description | Values |\n|--------|-------------|--------|\n| IPLTI  | Planting | A=automatic, R=reported date |\n| IIRRI  | Irrigation | A=automatic, N=none, F=fixed, R=reported |\n| IFERI  | Fertilization | R=reported dates, N=none |\n| IRESI  | Residue management | R=reported dates, N=none |\n| IHARI  | Harvest | A=automatic, M=maturity, R=reported |\n\n### Output Options (Line 5)\nControls what information is generated:\n\n| Option | Description | Values |\n|--------|-------------|--------|\n| IOX    | Overview.OUT file | Y/N |\n| IDETO  | Detailed output | Y/N |\n| IDETS  | Summary output | Y/N |\n| FROP   | Output frequency (days) | Integer (default=10) |\n| IDETG  | Plant growth output | Y/N |\n| IDETC  | Carbon output | Y/N |\n| IDETW  | Water output | Y/N |\n| IDETN  | Nitrogen output | Y/N |\n| IDETP  | Phosphorus output | Y/N |\n| IDETD  | Pest \u0026 disease output | Y/N |\n| IDETL  | Verbosity level | N=minimal, D=detailed, A=all |\n| FMOPT  | Output format | A=ASCII, C=CSV |\n\nSources: [InputModule/IPSIM.for:192-296](). [Data/SIMULATION.CDE:1-152]()\n\n## Automatic Management Parameters\n\nThe Simulation Control also handles parameters for automatic management operations:\n\n### Automatic Planting (Line 6)\n- Planting window (first and last days)\n- Required soil water conditions (min, max)\n- Required soil temperature\n\n### Automatic Irrigation (Line 7)\n- Management depth\n- Irrigation thresholds\n- Efficiency \n- Application methods\n\n### Automatic Fertilization (Line 8)\n- Soil depth\n- Soil N concentration thresholds\n\n### Automatic Harvest (Line 10)\n- Harvest delay after maturity\n- Latest harvest date\n- Percentage of product to harvest\n\nSources: [InputModule/IPSIM.for:287-404]()\n\n## Validation and Compatibility Checks\n\nThe Simulation Control module performs extensive validation to ensure compatibility between selected options:\n\n```mermaid\nflowchart TD\n    IPSIM[\"IPSIM\\nRead Parameters\"] --\u003e Validate[\"Validate Parameters\"]\n    Validate --\u003e CheckWater[\"Check Water Option\\nIf N, disable N,P,K\"]\n    CheckWater --\u003e CheckCO2[\"Check CO2 Option\\nDefault to M or D\"]\n    CheckCO2 --\u003e CheckN[\"Check N Model Compatibility\\nwith Crop Model\"]\n    CheckN --\u003e CheckP[\"Check P Model Compatibility\\nwith Crop Model\"]\n    CheckP --\u003e CheckK[\"Check K Model Compatibility\\nwith Crop Model\"]\n    CheckK --\u003e CheckSYM[\"Check Symbiosis\\nLegumes only\"]\n    CheckSYM --\u003e FillSwitches[\"Fill CONTROL and\\nISWITCH structures\"]\n```\n\nKey compatibility rules include:\n- If water simulation is disabled, nutrient simulation is disabled\n- CO2 effects default to measured (M) for experimental or default (D) for sequence runs\n- Nitrogen, phosphorus, and potassium models are only checked for compatibility with specific crop models\n- Symbiotic N fixation is only available for legume crops\n\nSources: [InputModule/IPSIM.for:607-954]()\n\n## External Simulation Control\n\nThe simulation parameters can be overridden by an external control file, allowing for:\n- Batch processing of multiple simulations\n- Sensitivity analyses\n- Parameter sweeps without modifying original experiment files\n\nThe external control values take precedence over those in the FILEX file.\n\nSources: [InputModule/IPSIM.for:488-537]()\n\n## Output Files\n\nThe Simulation Control determines which output files are generated during a simulation. These can include:\n\n| File Type | Description | Example Files |\n|-----------|-------------|--------------|\n| Daily plant outputs | Plant growth, carbon, nitrogen | PlantGro.OUT, PlantC.OUT, PlantN.OUT |\n| Daily soil outputs | Water, temperature, nutrients | SoilWat.OUT, SoilTemp.OUT, SoilNi.OUT |\n| Environmental | Weather, ET, spatial data | Weather.OUT, ET.OUT |\n| Management | Operations timing and impacts | MgmtOps.OUT |\n| Summary | End-of-season summaries | Summary.OUT, Overview.OUT |\n| Evaluation | Compare simulated vs measured | Evaluate.OUT |\n\nSources: [Data/OUTPUT.CDE:1-119]()\n\n## Interaction with Core Modules\n\nSimulation Control interacts with all major system components through the CONTROL and ISWITCH structures:\n\n```mermaid\ngraph LR\n    SimControl[\"Simulation Control\"] --\u003e SPAM[\"SPAM Module\\nSoil-Plant-Atmosphere\"]\n    SimControl --\u003e LAND[\"LAND Module\\nMain Simulation Driver\"]\n    SimControl --\u003e SOIL[\"SOIL Module\\nSoil Processes\"]\n    SimControl --\u003e PLANT[\"PLANT Module\\nCrop Models\"]\n    SimControl --\u003e MGMT[\"Management\\nOperations\"]\n    \n    subgraph \"Control Structures\"\n        CONTROL[\"CONTROL\\nTiming, run parameters\"]\n        ISWITCH[\"ISWITCH\\nSimulation switches\"]\n    end\n    \n    SimControl --\u003e CONTROL\n    SimControl --\u003e ISWITCH\n    \n    CONTROL --\u003e OutputSystem[\"Output System\"]\n    ISWITCH --\u003e OutputSystem\n```\n\nSources: [InputModule/IPSIM.for:103-104](). [SPAM/SPSUBS.for:61-67](), [SPAM/STEMP.for:65-70]()\n\n## Code Implementation\n\nThe main simulation control code is in the `IPSIM` subroutine within `InputModule/IPSIM.for`. This subroutine:\n\n1. Reads simulation parameters from the FILEX file\n2. Validates parameters and sets defaults when necessary\n3. Checks compatibility between options\n4. Calls `External_SimControls` to check for external overrides\n5. Fills the `CONTROL` and `ISWITCH` data structures\n6. Passes control to other modules\n\nThe subroutine is called by `IPEXP` during experiment initialization and influences all subsequent simulation processes.\n\nSources: [InputModule/IPSIM.for:43-960]()"])</script><script>self.__next_f.push([1,"1c:T24fd,"])</script><script>self.__next_f.push([1,"# Core Modules\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [CSM_Main/CSM.for](CSM_Main/CSM.for)\n- [CSM_Main/LAND.for](CSM_Main/LAND.for)\n- [InputModule/IPSIM.for](InputModule/IPSIM.for)\n- [InputModule/input_sub.for](InputModule/input_sub.for)\n- [Plant/CROPGRO/CROPGRO.for](Plant/CROPGRO/CROPGRO.for)\n- [Plant/plant.for](Plant/plant.for)\n- [SPAM/SPAM.for](SPAM/SPAM.for)\n- [SPAM/SPSUBS.for](SPAM/SPSUBS.for)\n- [SPAM/STEMP.for](SPAM/STEMP.for)\n- [SPAM/STEMP_EPIC.for](SPAM/STEMP_EPIC.for)\n- [SPAM/TRANS.for](SPAM/TRANS.for)\n- [Soil/SOIL.for](Soil/SOIL.for)\n\n\u003c/details\u003e\n\n\n\nThis page provides an overview of the primary functional modules in DSSAT-CSM (Decision Support System for Agrotechnology Transfer - Cropping System Model). These core modules work together to simulate crop growth and development within the agricultural system. For information about specific crop models, see [Plant Models](#4), and for details on how these modules are coordinated during a simulation, see [System Architecture](#2).\n\n## Module Architecture\n\nThe DSSAT-CSM system is built on a modular design where specialized components handle different aspects of crop simulation. The following diagram shows the primary modules and their relationships:\n\n```mermaid\ngraph TD\n    CSM[\"CSM Main\"] --\u003e LAND[\"LAND Module\"]\n    INPUT[\"Input Module\"] --\u003e CSM\n    LAND --\u003e SOIL[\"SOIL Module\"]\n    LAND --\u003e PLANT[\"PLANT Module\"]\n    LAND --\u003e WEATHER[\"WEATHER Module\"]\n    LAND --\u003e SPAM[\"SPAM Module\u003cbr\u003eSoil-Plant-Atmosphere\"]\n    LAND --\u003e MGMT[\"Management Operations\"]\n```\n\nSources: [CSM_Main/CSM.for:1-47](), [CSM_Main/LAND.for:1-20]()\n\n## CSM Main\n\nThe CSM Main module serves as the primary control program for the entire simulation. It handles:\n\n1. Initialization of the simulation\n2. Processing command-line arguments to determine run modes\n3. Managing the seasonal and daily simulation loops\n4. Coordinating time stepping across all modules\n\nThe CSM module employs different dynamics levels to control the simulation flow:\n\n```mermaid\ngraph TD\n    RUNINIT[\"RUNINIT\u003cbr\u003eRun Initialization\u003cbr\u003eOnce per simulation\"] --\u003e SEASINIT\n    SEASINIT[\"SEASINIT\u003cbr\u003eSeasonal Initialization\u003cbr\u003eOnce per season\"] --\u003e RATE\n    RATE[\"RATE\u003cbr\u003eDaily Rate Calculations\"] --\u003e INTEGR\n    INTEGR[\"INTEGR\u003cbr\u003eDaily Integration\"] --\u003e OUTPUT\n    OUTPUT[\"OUTPUT\u003cbr\u003eOutput Generation\"] --\u003e NEXT\n    NEXT{\"Next Day?\"} --\u003e|\"Yes\"| RATE\n    NEXT --\u003e|\"No\"| SEASEND\n    SEASEND[\"SEASEND\u003cbr\u003eSeason End Operations\"] --\u003e NEXT_SEASON\n    NEXT_SEASON{\"Next Season?\"} --\u003e|\"Yes\"| SEASINIT\n    NEXT_SEASON --\u003e|\"No\"| ENDRUN\n    ENDRUN[\"ENDRUN\u003cbr\u003eEnd of Run Operations\"]\n```\n\nSources: [CSM_Main/CSM.for:428-554]()\n\n## LAND Module\n\nThe LAND Module serves as the coordinating interface between all other modules. Its primary functions include:\n\n- Calling other modules in the correct sequence\n- Managing data flow between modules\n- Handling initialization across different time scales\n\n```mermaid\ngraph LR\n    LAND[\"LAND Module\"] --\u003e WEATHER[\"WEATHER Module\"]\n    LAND --\u003e SOIL[\"SOIL Module\"]\n    LAND --\u003e SPAM[\"SPAM Module\"]\n    LAND --\u003e PLANT[\"PLANT Module\"]\n    LAND --\u003e MGMTOPS[\"Management Operations\"]\n    LAND --\u003e OPSUM[\"Summary Output\"]\n```\n\nSources: [CSM_Main/LAND.for:8-20](), [CSM_Main/LAND.for:124-274]()\n\n## SOIL Module\n\nThe SOIL Module simulates all soil-related processes, integrating several sub-modules:\n\n```mermaid\ngraph TD\n    SOIL[\"SOIL Module\"] --\u003e SOILDYN[\"SOILDYN\u003cbr\u003eSoil Dynamics\"]\n    SOIL --\u003e WATBAL[\"WATBAL\u003cbr\u003eWater Balance\"]\n    SOIL --\u003e SoilNi[\"SoilNi\u003cbr\u003eInorganic N\"]\n    SOIL --\u003e SoilPi[\"SoilPi\u003cbr\u003eInorganic P\"]\n    SOIL --\u003e SoilKi[\"SoilKi\u003cbr\u003eInorganic K\"]\n    SOIL --\u003e SOM[\"Soil Organic Matter\"]\n    SOM --\u003e CENTURY[\"CENTURY Model\"]\n    SOM --\u003e SoilOrg[\"SoilOrg\u003cbr\u003e(CERES-based)\"]\n```\n\nKey responsibilities include:\n- Managing soil water balance (infiltration, runoff, drainage)\n- Simulating soil nutrient dynamics (N, P, K)\n- Tracking soil organic matter transformations\n- Calculating soil temperature and other physical properties\n\nSources: [Soil/SOIL.for:9-35](), [Soil/SOIL.for:123-192]()\n\n## PLANT Module\n\nThe PLANT Module serves as a dispatcher that calls the appropriate crop-specific model based on the crop being simulated:\n\n```mermaid\ngraph TD\n    PLANT[\"PLANT Module\"] --\u003e CROPGRO[\"CROPGRO Models\u003cbr\u003eLegumes \u0026 Other Crops\"]\n    PLANT --\u003e CERES[\"CERES Models\u003cbr\u003eCereals (Maize, Wheat, Rice)\"]\n    PLANT --\u003e SUBSTOR[\"SUBSTOR Models\u003cbr\u003eRoot Crops\"]\n    PLANT --\u003e CANEGRO[\"CANEGRO\u003cbr\u003eSugarcane\"]\n    PLANT --\u003e CASUPRO[\"CASUPRO\u003cbr\u003eSugarcane\"]\n    PLANT --\u003e OTHER[\"Other Specialty Models\"]\n```\n\nThe module supports over 42 crop models with consistent interfaces, standardizing:\n- Plant development and growth calculations\n- Water, nitrogen, and carbon balance\n- Stress responses\n- Yield formation\n\nSources: [Plant/plant.for:8-20](), [Plant/plant.for:80-95](), [Plant/plant.for:373-728]()\n\n## WEATHER Module\n\nThe WEATHER Module reads and processes weather data, providing:\n\n1. Daily weather variables to other modules (temperature, rainfall, solar radiation)\n2. Hourly weather distribution for energy balance calculations\n3. Creation of derived weather variables needed by crop models\n\n## SPAM Module\n\nThe SPAM (Soil-Plant-Atmosphere Module) calculates energy balance components, including:\n\n```mermaid\ngraph TD\n    SPAM[\"SPAM Module\"] --\u003e PET[\"PET\u003cbr\u003ePotential Evapotranspiration\"]\n    SPAM --\u003e STEMP[\"STEMP\u003cbr\u003eSoil Temperature\"]\n    SPAM --\u003e TRANS[\"TRANS\u003cbr\u003ePlant Transpiration\"]\n    SPAM --\u003e SOILEV[\"SOILEV\u003cbr\u003eSoil Evaporation\"]\n    SPAM --\u003e ROOTWU[\"ROOTWU\u003cbr\u003eRoot Water Uptake\"]\n```\n\nThis module serves as the critical link between atmospheric conditions and soil-plant processes, calculating:\n- Potential evapotranspiration using multiple methods\n- Actual soil evaporation\n- Plant transpiration\n- Energy partitioning between soil and plant\n- Soil temperature at various depths\n\nSources: [SPAM/SPAM.for:10-35](), [SPAM/SPAM.for:92-191](), [SPAM/TRANS.for:9-24]()\n\n## Management Operations Module\n\nThis module simulates agricultural management practices, including:\n\n| Operation | Functions |\n|-----------|-----------|\n| Planting | Date, depth, method, population |\n| Irrigation | Amount, timing, method |\n| Fertilization | Application amount, type, method, depth |\n| Tillage | Type, depth, residue incorporation |\n| Harvest | Timing, harvest fractions |\n\nThese operations can be scheduled based on calendar dates or triggered by crop development stages or environmental conditions.\n\n## Data Flow Between Modules\n\nThe following diagram illustrates how data flows between the core modules:\n\n```mermaid\ngraph TD\n    INPUT[\"Input Module\"] --\"Parameters\"--\u003e CSM\n    CSM --\"Control\"--\u003e LAND\n    \n    WEATHER --\"Weather Data\"--\u003e SPAM\n    WEATHER --\"Weather Data\"--\u003e PLANT\n    \n    SOIL --\"Soil Properties\"--\u003e SPAM\n    SOIL --\"Soil Water/Nutrients\"--\u003e PLANT\n    \n    SPAM --\"Energy Balance/ET\"--\u003e SOIL\n    SPAM --\"Transpiration\"--\u003e PLANT\n    \n    PLANT --\"Root Growth\"--\u003e SOIL\n    PLANT --\"Water Uptake\"--\u003e SOIL\n    PLANT --\"Nutrient Uptake\"--\u003e SOIL\n```\n\nSources: [CSM_Main/LAND.for:165-273](), [SPAM/SPAM.for:267-370]()\n\n## Dynamics Implementation\n\nEach module implements the same dynamics sequence to ensure synchronization:\n\n```\nRUNINIT → SEASINIT → RATE → INTEGR → OUTPUT → SEASEND → ENDRUN\n```\n\nThe following code snippet shows how the LAND module calls other modules for each dynamics stage:\n\n```\nIF (DYNAMIC .EQ. RUNINIT) THEN\n  CALL IPIBS (CONTROL, ISWITCH, CROP, IDETS, MODEL)\n  CALL WEATHR(CONTROL, ISWITCH, WEATHER, YREND)\n  CALL SOIL(CONTROL, ISWITCH, ...)\n  CALL SPAM(CONTROL, ISWITCH, ...)\n  CALL PLANT(CONTROL, ISWITCH, ...)\n  CALL OPSUM (CONTROL, ISWITCH, YRPLT)\nELSEIF (DYNAMIC .EQ. SEASINIT) THEN\n  ...\nELSEIF (DYNAMIC .EQ. RATE) THEN\n  ...\n```\n\nSources: [CSM_Main/LAND.for:140-295]()\n\n## Module Switches\n\nDSSAT-CSM employs numerous switches to control simulation behavior throughout the core modules:\n\n| Switch | Description | Possible Values |\n|--------|-------------|----------------|\n| ISWWAT | Water balance simulation | Y=Yes, N=No |\n| ISWNIT | Nitrogen simulation | Y=Yes, N=No |\n| ISWSYM | Symbiotic N fixation | Y=Yes, N=No |\n| ISWPHO | Phosphorus simulation | Y=Yes, N=No |\n| ISWPOT | Potassium simulation | Y=Yes, N=No |\n| ISWDIS | Disease simulation | Y=Yes, N=No |\n| MEEVP | ET method | R=Priestley-Taylor, P=Penman-FAO, D=ASCE-Penman-Monteith |\n| MEPHO | Photosynthesis method | C=Canopy, L=Leaf |\n| METMP | Soil temperature method | D=DSSAT, E=EPIC |\n| MESOM | Soil organic matter | G=Godwin, P=Parton/Century |\n\nSources: [InputModule/IPSIM.for:54-181](), [InputModule/IPSIM.for:623-702]()\n\n## Common Data Structures\n\nThe core modules share data through standardized constructed variable types:\n\n| Type | Description | Key Components |\n|------|-------------|----------------|\n| ControlType | Simulation control | DYNAMIC, YRDOY, MODEL, RUN, CROP |\n| SwitchType | Simulation switches | ISWWAT, ISWNIT, MEEVP, MEPHO |\n| SoilType | Soil properties | DLAYR, DUL, LL, SAT, BD, OC |\n| WeatherType | Weather variables | TMAX, TMIN, RAIN, SRAD, PAR, CO2 |\n| FloodWatType | Floodwater data | FLOOD, DRAIN, EF |\n| ResidueType | Plant residues | RESWT, RESLIG, RESE |\n\nSources: [Plant/plant.for:107-189](), [SPAM/SPAM.for:95-132]()\n\nThis modular design with standardized data structures allows DSSAT-CSM to flexibly simulate a wide range of crops, management practices, and environmental conditions."])</script><script>self.__next_f.push([1,"1d:T22fd,"])</script><script>self.__next_f.push([1,"# LAND Module\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [CSM_Main/CSM.for](CSM_Main/CSM.for)\n- [CSM_Main/LAND.for](CSM_Main/LAND.for)\n- [InputModule/input_sub.for](InputModule/input_sub.for)\n- [Plant/CROPGRO/CROPGRO.for](Plant/CROPGRO/CROPGRO.for)\n- [Plant/plant.for](Plant/plant.for)\n- [SPAM/SPAM.for](SPAM/SPAM.for)\n- [Soil/SOIL.for](Soil/SOIL.for)\n\n\u003c/details\u003e\n\n\n\nThe LAND Module serves as the central coordination point in the DSSAT Cropping System Model (CSM). It functions as the interface between soil processes, plant processes, weather data, and the soil-plant-atmosphere interface to simulate agricultural systems. This module manages the overall simulation flow by calling specialized modules in sequence during each phase of the simulation. Unlike lower-level modules that handle specific processes (such as plant growth or soil water dynamics), the LAND module orchestrates these components to work together as a cohesive system.\n\n## Architecture and Interface\n\nThe LAND Module receives control information and simulation switches and coordinates the execution of five primary components:\n\n```mermaid\ngraph TD\n    CSM[\"CSM Main Program\"] --\u003e LAND[\"LAND Module\"]\n    LAND --\u003e WEATHR[\"Weather Module\u003cbr\u003eEnvironmental Data\"]\n    LAND --\u003e SOIL[\"Soil Module\u003cbr\u003eSoil Processes\"]\n    LAND --\u003e SPAM[\"SPAM Module\u003cbr\u003eSoil-Plant-Atmosphere\"]\n    LAND --\u003e PLANT[\"Plant Module\u003cbr\u003eCrop Models\"]\n    LAND --\u003e MGMTOPS[\"Management Module\u003cbr\u003eOperations\"]\n```\n\nThe module signature in the source code demonstrates its primary interface:\n\n```fortran\nSUBROUTINE LAND(CONTROL, ISWITCH, YRPLT, MDATE, YREND)\n```\n\nWhere:\n- `CONTROL`: Contains simulation control parameters\n- `ISWITCH`: Contains model option switches\n- `YRPLT`: Planting date (output)\n- `MDATE`: Maturity date (output)\n- `YREND`: End of season date (output)\n\nSources: [CSM_Main/LAND.for:25-27](), [CSM_Main/CSM.for:424-426]()\n\n## Simulation Dynamics\n\nThe LAND module operates through different simulation phases controlled by the DYNAMIC variable in the CONTROL structure:\n\n| Phase | Description | Key Actions |\n|-------|-------------|-------------|\n| RUNINIT | Run initialization | Initialize all modules once per simulation |\n| SEASINIT | Seasonal initialization | Set up seasonal variables, planting dates |\n| RATE | Daily rate calculations | Calculate daily rates of change |\n| INTEGR | Daily integration | Update system state variables |\n| OUTPUT | Daily output | Generate simulation outputs |\n| SEASEND | Seasonal end | Finalize season, generate summaries |\n\nSources: [CSM_Main/LAND.for:144-201](), [CSM_Main/LAND.for:217-274](), [CSM_Main/LAND.for:286-349](), [CSM_Main/LAND.for:354-406](), [CSM_Main/LAND.for:411-454](), [CSM_Main/LAND.for:459-506]()\n\n## Data Flow Between Modules\n\nThe LAND module orchestrates a complex flow of variables between modules:\n\n```mermaid\ngraph TD\n    LAND[\"LAND Module\"] -- \"WEATHER\u003cbr\u003e(TMAX, TMIN, SRAD, CO2)\" --\u003e SOIL\n    LAND -- \"WEATHER\u003cbr\u003e(TMAX, TMIN, SRAD, CO2)\" --\u003e SPAM\n    LAND -- \"WEATHER\u003cbr\u003e(TMAX, TMIN, SRAD, CO2)\" --\u003e PLANT\n    LAND -- \"SOILPROP\u003cbr\u003e(DLAYR, LL, DUL, SAT)\" --\u003e SPAM\n    LAND -- \"SOILPROP\u003cbr\u003e(DLAYR, LL, DUL, SAT)\" --\u003e PLANT\n    SOIL -- \"NH4_plant, NO3_plant\u003cbr\u003eSW, ST\" --\u003e PLANT\n    SOIL -- \"SW, ST\" --\u003e SPAM\n    SOIL -- \"SOILPROP\" --\u003e LAND\n    SPAM -- \"EO, EOP, ES\u003cbr\u003eTRWUP\" --\u003e PLANT\n    SPAM -- \"SRFTEMP, ST\" --\u003e LAND\n    PLANT -- \"RLV, CANHT, KTRANS\" --\u003e SPAM\n    PLANT -- \"RLV, XHLAI\" --\u003e SOIL\n    PLANT -- \"MDATE, YREND\" --\u003e LAND\n```\n\nKey variables exchanged include:\n\n### Weather Variables\n- `WEATHER`: Structure containing daily weather data (temperatures, solar radiation, CO2)\n\n### Soil Variables\n- `SOILPROP`: Structure containing soil properties by layer\n- `SW`: Soil water content by layer\n- `ST`: Soil temperature by layer\n- `NH4_plant`, `NO3_plant`: Nitrogen available to plants\n\n### Water Balance Variables\n- `EO`: Potential evapotranspiration\n- `EOP`: Potential plant transpiration\n- `ES`: Soil evaporation\n- `TRWUP`: Potential root water uptake\n\n### Plant Variables\n- `RLV`: Root length density by layer\n- `CANHT`: Canopy height\n- `XHLAI`: Healthy leaf area index\n- `XLAI`: Total leaf area index\n- `KTRANS`: Light extinction coefficient for transpiration\n\nSources: [CSM_Main/LAND.for:168-176](), [CSM_Main/LAND.for:253-259](), [CSM_Main/LAND.for:264-273]()\n\n## Module Execution Sequence\n\nThe LAND module follows a specific calling sequence during simulation:\n\n```mermaid\nsequenceDiagram\n    participant CSM as CSM Main\n    participant LAND as LAND Module\n    participant WEATHR as Weather Module\n    participant MGMTOPS as Management Ops\n    participant SOIL as Soil Module\n    participant SPAM as SPAM Module\n    participant PLANT as Plant Module\n    \n    Note over CSM,PLANT: RUNINIT Phase (Once per simulation)\n    CSM-\u003e\u003eLAND: RUNINIT\n    LAND-\u003e\u003eWEATHR: Initialize Weather\n    LAND-\u003e\u003eSOIL: Initialize Soil\n    LAND-\u003e\u003eSPAM: Initialize SPAM\n    LAND-\u003e\u003ePLANT: Initialize Plant\n    \n    Note over CSM,PLANT: SEASINIT Phase (Once per season)\n    CSM-\u003e\u003eLAND: SEASINIT\n    LAND-\u003e\u003eWEATHR: Get Weather Data\n    LAND-\u003e\u003eMGMTOPS: Set Planting Date\n    LAND-\u003e\u003eSOIL: Initialize Season\n    LAND-\u003e\u003eSPAM: Initialize Season\n    LAND-\u003e\u003ePLANT: Initialize Season\n    \n    Note over CSM,PLANT: Daily Simulation Loop\n    CSM-\u003e\u003eLAND: RATE (Daily)\n    LAND-\u003e\u003eWEATHR: Get Daily Weather\n    LAND-\u003e\u003eMGMTOPS: Check Operations\n    LAND-\u003e\u003eSOIL: Calculate Rates\n    LAND-\u003e\u003eSPAM: Calculate Rates\n    LAND-\u003e\u003ePLANT: Calculate Rates\n    \n    CSM-\u003e\u003eLAND: INTEGR (Daily)\n    LAND-\u003e\u003eSOIL: Integrate Soil\n    LAND-\u003e\u003eSPAM: Integrate SPAM\n    LAND-\u003e\u003ePLANT: Integrate Plant\n    LAND-\u003e\u003eMGMTOPS: Check Harvest\n    \n    CSM-\u003e\u003eLAND: OUTPUT (Daily)\n    LAND-\u003e\u003eSOIL: Output Soil\n    LAND-\u003e\u003eSPAM: Output SPAM\n    LAND-\u003e\u003ePLANT: Output Plant\n    \n    Note over CSM,PLANT: SEASEND Phase (End of season)\n    CSM-\u003e\u003eLAND: SEASEND\n    LAND-\u003e\u003eWEATHR: Close Weather\n    LAND-\u003e\u003eSOIL: End Soil\n    LAND-\u003e\u003eSPAM: End SPAM\n    LAND-\u003e\u003ePLANT: End Plant\n    LAND-\u003e\u003eOPSUM: Write Summary\n```\n\nSources: [CSM_Main/LAND.for:142-204](), [CSM_Main/LAND.for:211-273](), [CSM_Main/LAND.for:286-349](), [CSM_Main/LAND.for:354-406](), [CSM_Main/LAND.for:411-454](), [CSM_Main/LAND.for:459-506]()\n\n## Key Modules Called by LAND\n\n### SOIL Module\nThe Soil module handles soil processes including:\n- Water balance\n- Nitrogen dynamics\n- Phosphorus dynamics\n- Potassium dynamics\n- Soil organic matter dynamics\n\nSource: [Soil/SOIL.for:9-17]()\n\n### SPAM Module (Soil-Plant-Atmosphere)\nThe SPAM module calculates soil-plant-atmosphere interface energy balance:\n- Potential evapotranspiration\n- Soil evaporation\n- Plant transpiration\n- Root water uptake\n\nSource: [SPAM/SPAM.for:10-12]()\n\n### PLANT Module\nThe Plant module calls appropriate crop models based on crop type:\n- CROPGRO models (legumes, some vegetables)\n- CERES models (cereals)\n- Other specialized crop models\n\nSource: [Plant/plant.for:10-22]()\n\n## Detailed Module Implementation\n\nThe LAND subroutine implementation follows a consistent pattern across different dynamic phases:\n\n1. **Transfer control variables** from constructed data types to local variables\n2. **Call Weather module** to get daily weather data\n3. **Call Management Operations** module to check for operations\n4. **Call Soil module** to calculate soil processes\n5. **Call SPAM module** to calculate water balance\n6. **Call Plant module** to simulate plant growth\n7. **Transfer output values** back to calling routine\n\nFor each phase (RUNINIT, SEASINIT, RATE, INTEGR, OUTPUT, SEASEND), the same modules are called but with different operations appropriate to the phase.\n\nSource: [CSM_Main/LAND.for:142-506]()\n\n## Key Data Structures\n\nLAND utilizes several key data structures defined in ModuleDefs.for:\n\n- **ControlType**: Simulation control parameters\n- **SwitchType**: Model option switches \n- **WeatherType**: Weather variables\n- **SoilType**: Soil properties\n- **FloodWatType/FloodNType**: Flood water variables for paddy systems\n- **MulchType**: Surface mulch properties\n- **ResidueType**: Crop residue information\n\nSource: [CSM_Main/LAND.for:57-73](), [CSM_Main/LAND.for:125-128]()\n\n## Internal Module Structure\n\nThe LAND module has a relatively simple structure, primarily serving as a coordinator:\n\n```mermaid\ngraph TD\n    LAND[\"LAND Subroutine\"] --\u003e TRANSFER[\"Transfer variables from\u003cbr\u003econstructed types to local vars\"]\n    TRANSFER --\u003e CALL_MODULES[\"Call various modules\u003cbr\u003ebased on DYNAMIC phase\"]\n    CALL_MODULES --\u003e MODULES[\"IPIBS, WEATHR,\u003cbr\u003eSOIL, SPAM, PLANT,\u003cbr\u003eMGMTOPS, OPSUM\"]\n    CALL_MODULES --\u003e RETURN[\"Return control to\u003cbr\u003emain program\"]\n```\n\nSource: [CSM_Main/LAND.for:25-603]()\n\nThe LAND module thus performs the critical role of integration and coordination between the specialized modules of the DSSAT-CSM system, ensuring proper data flow and sequence of operations throughout the simulation.\n\nSources: [CSM_Main/LAND.for:9-14](), [CSM_Main/CSM.for:424-545]()"])</script><script>self.__next_f.push([1,"1e:T2fd1,"])</script><script>self.__next_f.push([1,"# SOIL Module\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [InputModule/ipexp.for](InputModule/ipexp.for)\n- [SPAM/ESR_SoilEvap.for](SPAM/ESR_SoilEvap.for)\n- [SPAM/SOILEV.for](SPAM/SOILEV.for)\n- [Soil/SoilUtilities/SOILDYN.for](Soil/SoilUtilities/SOILDYN.for)\n- [Soil/SoilWater/RNOFF.for](Soil/SoilWater/RNOFF.for)\n\n\u003c/details\u003e\n\n\n\n## Purpose and Scope\n\nThe SOIL Module in DSSAT-CSM (Decision Support System for Agrotechnology Transfer - Cropping System Model) is responsible for simulating soil processes and maintaining soil state variables. This core component provides the foundation for plant growth by modeling water and nutrient availability in the soil profile. The module handles soil property initialization, soil water dynamics, organic matter processing, and changes in soil physical characteristics over time. For detailed information about specific soil processes like water balance calculations, see [Soil Water Balance](#5.1).\n\nSources: [Soil/SoilUtilities/SOILDYN.for:1-36]()\n\n## Module Architecture\n\nThe SOIL Module consists of several interconnected components that handle different aspects of soil processes:\n\n```mermaid\nflowchart TD\n    SOIL[\"SOIL Module\"] --\u003e SoilWater[\"SoilWater\u003cbr\u003eWATBAL\"]\n    SOIL --\u003e SoilChem[\"SoilChemistry\"]\n    SOIL --\u003e SoilOrg[\"SoilOrganicMatter\"]\n    SOIL --\u003e SoilGHG[\"SoilGHG\u003cbr\u003eMethane\"]\n    SOIL --\u003e SoilDyn[\"SoilDynamics\u003cbr\u003eSOILDYN\"]\n\n    SoilWater --\u003e Infiltration[\"Infiltration\"]\n    SoilWater --\u003e Runoff[\"Runoff\u003cbr\u003eRNOFF\"]\n    SoilWater --\u003e SoilEvap[\"SoilEvaporation\u003cbr\u003eSOILEV/ESR_SoilEvap\"]\n    SoilWater --\u003e Drainage[\"Drainage\"]\n    SoilWater --\u003e TileDrain[\"TileDrainage\"]\n\n    SoilDyn --\u003e SoilProps[\"SoilProperties\u003cbr\u003eInitialization \u0026 Updates\"]\n    SoilDyn --\u003e WaterRetention[\"WaterRetention\u003cbr\u003eParameters\"]\n    SoilDyn --\u003e TillageEffects[\"TillageEffects\"]\n    SoilDyn --\u003e SOMEffects[\"SOMEffects\u003cbr\u003eon SoilProperties\"]\n```\n\nSources: [Soil/SoilUtilities/SOILDYN.for:9-10](), [Soil/SoilWater/RNOFF.for:1-20]()\n\n## Key Soil Properties\n\nThe SOIL Module manages a comprehensive set of soil properties organized by soil layers. These properties are stored in the `SOILPROP` variable type and include:\n\n| Property | Description | Units |\n|----------|-------------|-------|\n| DLAYR | Thickness of soil layer | cm |\n| DS | Depth to bottom of soil layer | cm |\n| LL | Lower limit of plant-extractable soil water | cm³/cm³ |\n| DUL | Drained upper limit (field capacity) | cm³/cm³ |\n| SAT | Saturated water content | cm³/cm³ |\n| BD | Bulk density | g/cm³ |\n| OC | Organic carbon content | % |\n| CLAY | Clay content | % |\n| SILT | Silt content | % |\n| SAND | Sand content | % |\n| PH | Soil pH | - |\n| SWCN | Saturated hydraulic conductivity | cm/h |\n| KG2PPM | Conversion factor kg/ha to ppm | - |\n| TEXTURE | Textural class | - |\n| WCR | Residual water content | cm³/cm³ |\n\nSources: [Soil/SoilUtilities/SOILDYN.for:73-86](), [Soil/SoilUtilities/SOILDYN.for:846-902]()\n\n## Soil Dynamics (SOILDYN)\n\nThe SOILDYN subroutine is the central component for computing and distributing soil parameters throughout the simulation:\n\n```mermaid\nflowchart TD\n    SOILDYN[\"SOILDYN Subroutine\"] --\u003e InitSoil[\"InitializeSoilProperties\"]\n    SOILDYN --\u003e CalcDerived[\"CalculateDerivedProperties\"]\n    SOILDYN --\u003e TextClass[\"SoilTextureClassification\"]\n    SOILDYN --\u003e CalcWR[\"CalculateWaterRetentionParameters\"]\n    SOILDYN --\u003e UpdateSOM[\"UpdatePropertiesBasedOnSOM\"]\n    SOILDYN --\u003e TillageImpact[\"ApplyTillageImpacts\"]\n\n    InitSoil --\u003e ReadSoil[\"ReadSoilProfileData\"]\n    InitSoil --\u003e Validate[\"ValidateSoilParameters\"]\n\n    CalcDerived --\u003e KG2PPM[\"CalculateKg/haToPpmConversion\"]\n    CalcDerived --\u003e CalculatePoros[\"CalculatePorosity\"]\n    CalcDerived --\u003e CalculateTotOrgN[\"CalculateTotalOrganicN\"]\n\n    CalcWR --\u003e VanGenuchten[\"VanGenuchtenParameters\u003cbr\u003ealphaVG, mVG, nVG\"]\n    CalcWR --\u003e BrooksCorey[\"Brooks\u0026CoreyParameters\u003cbr\u003ehb, lambda\"]\n```\n\nSources: [Soil/SoilUtilities/SOILDYN.for:37-42](), [Soil/SoilUtilities/SOILDYN.for:190-434]()\n\n### Key SOILDYN Operations\n\n1. **Initialization Phase (RUNINIT)**: \n   - Reads soil profile data from input files\n   - Validates and initializes soil parameters\n   - Sets defaults for missing parameters\n   - Classifies soil texture based on sand, silt, and clay percentages\n\n2. **Soil Property Calculation**:\n   - Calculates KG2PPM conversion factors for nutrient calculations\n   - Computes porosity for each soil layer\n   - Calculates total organic nitrogen from total nitrogen\n   - Estimates missing organic carbon values based on texture\n\n3. **Water Retention Parameters**:\n   - Calculates van Genuchten parameters (alphaVG, mVG, nVG)\n   - Computes Brooks \u0026 Corey parameters (hb, lambda)\n   - Estimates residual water content (WCR)\n\n4. **Organic Matter Effects**:\n   - Updates bulk density based on organic matter content\n   - Modifies water holding capacity parameters (DUL, LL)\n   - Recalculates layer thicknesses affected by organic matter\n\n5. **Tillage Impacts**:\n   - Applies tillage effects on bulk density\n   - Modifies hydraulic conductivity\n   - Updates curve number for runoff calculations\n\nSources: [Soil/SoilUtilities/SOILDYN.for:195-770](), [Soil/SoilUtilities/SOILDYN.for:779-835]()\n\n## Soil Water Balance\n\n### Runoff Calculation (RNOFF)\n\nThe RNOFF subroutine calculates surface water runoff using the Williams-SCS curve number technique:\n\n```mermaid\nflowchart TD\n    RNOFF[\"RNOFF Subroutine\"] --\u003e CalcSMX[\"CalculateSoilStorage\u003cbr\u003eSMX = 254 * (100/CN - 1)\"]\n    RNOFF --\u003e CalcSWABI[\"CalculateInitialAbstractionRatio\u003cbr\u003ebased on soil water content\"]\n    RNOFF --\u003e CalcIABS[\"CalculateInitialAbstraction\u003cbr\u003emodified by mulch cover\"]\n    RNOFF --\u003e CalcPB[\"CalculatePB\u003cbr\u003ePB = WATAVL - IABS * SMX\"]\n    RNOFF --\u003e CalcRUNOFF[\"CalculateRUNOFF\u003cbr\u003eRUNOFF = PB²/(WATAVL + (1-IABS)*SMX)\"]\n    RNOFF --\u003e AdjustPM[\"AdjustForPlasticMulch\"]\n```\n\nSources: [Soil/SoilWater/RNOFF.for:22-24](), [Soil/SoilWater/RNOFF.for:72-116]()\n\nRunoff calculation involves several key steps:\n1. Calculate maximum soil water storage capacity (SMX) from curve number (CN)\n2. Determine initial abstraction ratio (SWABI) based on soil water content\n3. Adjust initial abstraction for surface mulch effects\n4. Calculate potential runoff based on available water (WATAVL)\n5. Adjust runoff for plastic mulch effects if present\n\nThe curve number approach requires:\n- Current soil water content in top layers\n- Runoff curve number (a soil-specific parameter)\n- Water available for infiltration or runoff (rainfall plus irrigation)\n- Mulch cover information\n\nSources: [Soil/SoilWater/RNOFF.for:78-116]()\n\n### Soil Evaporation\n\nThe SOIL Module includes two methods for calculating soil evaporation:\n\n```mermaid\nflowchart TD\n    SoilEvap[\"Soil Evaporation Methods\"] --\u003e SOILEV[\"SOILEV\u003cbr\u003eTraditional Ritchie Method\"]\n    SoilEvap --\u003e ESR[\"ESR_SoilEvap\u003cbr\u003eSuleiman-Ritchie Method\"]\n\n    SOILEV --\u003e Stage1[\"Stage1Evaporation\u003cbr\u003eEnergy-limited\"]\n    SOILEV --\u003e Stage2[\"Stage2Evaporation\u003cbr\u003eDiffusion-limited\"]\n    SOILEV --\u003e AdjustSW[\"AdjustForAvailableWater\"]\n    SOILEV --\u003e AdjustPM[\"AdjustForPlasticMulch\"]\n\n    ESR --\u003e ProfileType[\"DetermineProfileType\u003cbr\u003eWet, Intermediate, Dry\"]\n    ESR --\u003e DepthCoef[\"CalculateDepth-dependentCoefficients\"]\n    ESR --\u003e CalcEvap[\"CalculateLayerEvaporation\"]\n    ESR --\u003e LimitEvap[\"LimitToPotentialEvaporation\"]\n    ESR --\u003e AdjustPM2[\"AdjustForPlasticMulch\"]\n```\n\nSources: [SPAM/SOILEV.for:1-16](), [SPAM/ESR_SoilEvap.for:1-34](), [SPAM/ESR_SoilEvap.for:80-175]()\n\n#### 1. SOILEV: Traditional Two-Stage Evaporation Model\n\nThe traditional Ritchie method separates soil evaporation into two stages:\n- **Stage 1**: Energy-limited evaporation (constant rate)\n- **Stage 2**: Diffusion-limited evaporation (decreasing rate)\n\nThe transition between stages is determined by the cumulative evaporation sum (SUMES1) reaching a soil-specific upper limit (U).\n\nSources: [SPAM/SOILEV.for:96-122](), [SPAM/SOILEV.for:200-228]()\n\n#### 2. ESR_SoilEvap: Enhanced Suleiman-Ritchie Model\n\nThis method implements the approach described by Ritchie, Porter, et al. (2009):\n- Determines soil profile type (wet, intermediate, or dry) based on moisture conditions\n- Applies depth-dependent coefficients for calculating evaporation from each layer\n- Calculates upward water movement associated with evaporation\n- Limits total evaporation to potential soil evaporation (EOS)\n\nThe profile classification uses:\n- Wet profile: Soil water content exceeds DUL in at least one layer in the top 100 cm\n- Intermediate profile: Wet profile but top layer below threshold water content\n- Dry profile: All layers in top 100 cm below DUL\n\nSources: [SPAM/ESR_SoilEvap.for:33-35](), [SPAM/ESR_SoilEvap.for:80-179]()\n\nBoth methods consider plastic mulch effects, reducing evaporation proportionally to the plastic mulch coverage fraction:\n\n```\nIF (PMFRACTION .GT. 1.E-6) THEN\n  ES = ES * (1.0 - PMFRACTION)\nENDIF\n```\n\nSources: [SPAM/SOILEV.for:161-164](), [SPAM/ESR_SoilEvap.for:147-150]()\n\n## Input Processing and Initialization\n\nSoil properties are read from input files and processed by the input module before being used by the SOIL module:\n\n```mermaid\nflowchart TD\n    InputFiles[\"Input Files\"] --\u003e FILEX[\"Experiment File\u003cbr\u003e*.X\"]\n    InputFiles --\u003e SOIL_SOL[\"Soil Profile File\u003cbr\u003eSOIL.SOL\"]\n    \n    FILEX --\u003e IPEXP[\"IPEXP Subroutine\u003cbr\u003eProcess Experiment Data\"]\n    SOIL_SOL --\u003e ReadSoil[\"Read Soil Profile Data\"]\n    \n    IPEXP --\u003e SOILDYN[\"SOILDYN Subroutine\"]\n    ReadSoil --\u003e SOILDYN\n    \n    SOILDYN --\u003e InitSoil[\"Initialize Soil Properties\"]\n    SOILDYN --\u003e ValidateSoil[\"Validate Soil Parameters\"]\n    SOILDYN --\u003e StoreSOILPROP[\"Store in SOILPROP Variable\"]\n```\n\nSources: [InputModule/ipexp.for:575-649](), [Soil/SoilUtilities/SOILDYN.for:195-434]()\n\nThe soil input processing involves:\n\n1. Reading experiment details from FILEX files\n2. Identifying and loading the appropriate soil profile file (SOIL.SOL)\n3. Reading layer-specific soil properties\n4. Validating parameters and applying defaults for missing values\n5. Computing derived parameters\n6. Storing all values in the SOILPROP structured variable\n\nKey validation steps include:\n- Checking for valid ranges of parameters (e.g., pH between 1-10)\n- Estimating missing organic carbon based on soil texture\n- Ensuring soil water content limits are consistent (LL \u003c DUL \u003c SAT)\n- Calculating vanGenuchten and Brooks-Corey parameters for soil water retention\n\nSources: [Soil/SoilUtilities/SOILDYN.for:260-434](), [Soil/SoilUtilities/SOILDYN.for:436-614]()\n\n## Integration with Other Modules\n\nThe SOIL Module interacts with several other DSSAT-CSM modules to provide a comprehensive simulation:\n\n```mermaid\nflowchart TD\n    InputModule[\"Input Module\"] --\u003e|\"Soil Profile Data\"| SOIL[\"SOIL Module\"]\n    SOIL --\u003e|\"Water \u0026 Nutrient Availability\"| PLANT[\"PLANT Module\"]\n    SOIL --\u003e|\"Soil Temperature\"| SPAM[\"SPAM Module\u003cbr\u003eSoil-Plant-Atmosphere\"]\n    MGMTOPS[\"Management Operations\"] --\u003e|\"Tillage, Residue,\u003cbr\u003eIrrigation\"| SOIL\n    WEATHER[\"WEATHER Module\"] --\u003e|\"Precipitation,\u003cbr\u003eTemperature\"| SOIL\n    SOIL --\u003e|\"Soil Water Status\"| LAND[\"LAND Module\"]\n```\n\nSources: [Soil/SoilUtilities/SOILDYN.for:37-40]()\n\n### Key Interfaces:\n\n1. **Input Module**: Provides soil profile data, experiment parameters, and management decisions\n2. **PLANT Module**: Receives soil water and nutrient availability information for simulating plant growth\n3. **SPAM Module**: Exchanges information about soil temperature and energy balance components\n4. **Management Operations**: Provides tillage, residue, and irrigation data that affect soil properties\n5. **WEATHER Module**: Supplies precipitation and temperature data for soil water balance calculations\n\nSources: [InputModule/ipexp.for:575-649]()\n\n## Summary\n\nThe SOIL Module is a central component of DSSAT-CSM that simulates the soil environment for crop growth. It manages soil properties, calculates water balance components including runoff and evaporation, and accounts for changes in soil characteristics due to organic matter dynamics and tillage operations. The module's comprehensive approach enables realistic simulation of the soil environment under varying management practices and environmental conditions."])</script><script>self.__next_f.push([1,"1f:T3793,"])</script><script>self.__next_f.push([1,"# PLANT Module\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [CSM_Main/CSM.for](CSM_Main/CSM.for)\n- [CSM_Main/LAND.for](CSM_Main/LAND.for)\n- [InputModule/input_sub.for](InputModule/input_sub.for)\n- [Plant/CROPGRO/CROPGRO.for](Plant/CROPGRO/CROPGRO.for)\n- [Plant/plant.for](Plant/plant.for)\n- [SPAM/SPAM.for](SPAM/SPAM.for)\n- [Soil/SOIL.for](Soil/SOIL.for)\n\n\u003c/details\u003e\n\n\n\nThe PLANT Module is a core component in the DSSAT Cropping System Model (DSSAT-CSM) that serves as an interface between the main simulation controller and various crop-specific growth models. It standardizes the input/output for different crop models, enabling consistent handling of diverse crops within the overall simulation framework. Unlike CROPGRO crops, which have their own specialized handling, other crop models are accessed through this PLANT interface.\n\n## 1. Purpose and Role in System Architecture\n\nThe PLANT Module functions as a mediator that:\n\n1. Calls the appropriate plant growth routines based on the crop type\n2. Initializes standardized output values\n3. Manages the dynamic execution flow for crop models\n4. Transfers data between crop models and other system components\n5. Handles both generic and crop-specific parameters\n\nThe module serves as a critical bridge between the LAND Module (which coordinates overall simulation) and the individual crop growth models.\n\n```mermaid\ngraph TD\n    subgraph \"System Architecture\"\n        CSM[\"CSM Main\"]\n        LAND[\"LAND Module\"]\n        PLANT[\"PLANT Module\"]\n        SOIL[\"SOIL Module\"]\n        SPAM[\"SPAM Module\u003cbr\u003eSoil-Plant-Atmosphere\"]\n        WEATHER[\"WEATHER Module\"]\n        MGMT[\"Management Operations\"]\n        \n        CSM --\u003e LAND\n        LAND --\u003e SOIL\n        LAND --\u003e PLANT\n        LAND --\u003e WEATHER\n        LAND --\u003e SPAM\n        LAND --\u003e MGMT\n    end\n    \n    subgraph \"PLANT Module Calls\"\n        PLANT --\u003e CERES[\"CERES Models\u003cbr\u003e(Maize, Wheat, Rice, etc.)\"]\n        PLANT --\u003e CROPGRO[\"CROPGRO Models\u003cbr\u003e(Legumes \u0026 others)\"]\n        PLANT --\u003e SUBSTOR[\"SUBSTOR Models\u003cbr\u003e(Potato, Taro)\"]\n        PLANT --\u003e OTHER[\"Other Models\u003cbr\u003e(Sugarcane, Teff, etc.)\"]\n    end\n```\n\nSources: [Plant/plant.for:1-105](), [CSM_Main/LAND.for:1-50](), [CSM_Main/CSM.for:1-100]()\n\n## 2. Supported Crop Models\n\nThe PLANT Module interfaces with a wide range of crop simulation models. Each model is identified by a unique 5-character model name code:\n\n| Model Code | Description | Crops |\n|------------|-------------|-------|\n| CRGRO | CROPGRO | Grain legumes and other crops |\n| CSCER | CERES | Wheat, Barley |\n| CSCRP | CropSim | Wheat, Barley |\n| CSCAS | CropSim/GumCAS | Cassava |\n| CSYCA | CIAT | Cassava |\n| MLCER | CERES-Millet | Millet |\n| MZCER | CERES-Maize | Maize |\n| PTSUB | SUBSTOR | Potato |\n| RICER | CERES-Rice | Rice |\n| SCCAN | CANEGRO | Sugarcane |\n| SCCSP | CASUPRO | Sugarcane |\n| SCSAM | SAMUCA | Sugarcane |\n| SGCER | CERES-Sorghum | Sorghum |\n| SWCER | CERES-Sweet corn | Sweet corn |\n| MZIXM | IXIM Maize | Maize |\n| TNARO | Aroids | Tanier |\n| TRARO | Aroids | Taro |\n| WHAPS | APSIM | N-wheat |\n| TFAPS | APSIM | Tef |\n| TFCER | CERES | Teff |\n| PRFRM | Perennial | Forage model |\n| BSCER | CERES | Sugarbeet |\n| SUOIL | OilcropSun | Sunflower |\n\nSources: [Plant/plant.for:80-105]()\n\n## 3. Module Structure and Execution Flow\n\nThe PLANT Module follows the standard DSSAT-CSM dynamic execution framework, with distinct phases that control the simulation process:\n\n```mermaid\nflowchart TD\n    START([\"PLANT Subroutine Entry\"])\n    \n    subgraph DYNAMIC[\"Dynamic Execution Flow\"]\n        RUNINIT[\"RUNINIT\u003cbr\u003eOnce per simulation\"]\n        SEASINIT[\"SEASINIT\u003cbr\u003eOnce per season\"]\n        RATE[\"RATE\u003cbr\u003eDaily rate calculations\"]\n        INTEGR[\"INTEGR\u003cbr\u003eDaily integration\"]\n        SEASEND[\"SEASEND\u003cbr\u003eEnd of season\"]\n    end\n    \n    START --\u003e DYNAMIC\n    \n    RUNINIT --\u003e|\"Initialize Models\u003cbr\u003eSet defaults\"| SEASINIT\n    SEASINIT --\u003e|\"Initialize Season\u003cbr\u003eSet initial conditions\"| RATE\n    RATE --\u003e|\"Calculate Daily Rates\u003cbr\u003eof Growth \u0026 Development\"| INTEGR\n    INTEGR --\u003e|\"Update Plant State\u003cbr\u003eVariables\"| RATE\n    INTEGR --\u003e|\"Simulation\u003cbr\u003eComplete\"| SEASEND\n    \n    subgraph PROCESSING[\"Process Flow\"]\n        MODELSEL[\"Select Crop Model\u003cbr\u003eBased on MODEL Name\"]\n        CALL[\"Call Selected Model\u003cbr\u003ewith Current DYNAMIC Value\"]\n        PROCESS[\"Process Results\u003cbr\u003eSet Common Variables\"]\n    end\n    \n    DYNAMIC --\u003e MODELSEL\n    MODELSEL --\u003e CALL\n    CALL --\u003e PROCESS\n```\n\nSources: [Plant/plant.for:107-267](), [Plant/plant.for:348-400](), [Plant/plant.for:706-801]()\n\n## 4. Model Selection Mechanism\n\nThe PLANT Module uses a SELECT CASE statement to route the execution to the appropriate crop model based on the first 5 characters of the MODEL variable. This architecture allows for easy addition of new crop models to the system.\n\n```mermaid\nflowchart TD\n    SEL[[\"SELECT CASE(MODEL(1:5)))\"]]\n    \n    SEL --\u003e CRGRO[\"CASE('CRGRO')\u003cbr\u003eCROPGRO Models\"]\n    SEL --\u003e PRFRM[\"CASE('PRFRM')\u003cbr\u003eForage Model\"]\n    SEL --\u003e CSCER[\"CASE('CSCER')\u003cbr\u003eCERES Wheat/Barley\"]\n    SEL --\u003e CSCRP[\"CASE('CSCRP')\u003cbr\u003eCropSim Wheat/Barley\"]\n    SEL --\u003e CSCAS[\"CASE('CSCAS')\u003cbr\u003eCropSim Cassava\"]\n    SEL --\u003e CSYCA[\"CASE('CSYCA')\u003cbr\u003eCIAT Cassava\"]\n    SEL --\u003e WHAPS[\"CASE('WHAPS')\u003cbr\u003eAPSIM N-wheat\"]\n    SEL --\u003e TFAPS[\"CASE('TFAPS')\u003cbr\u003eAPSIM Tef\"]\n    SEL --\u003e MLCER[\"CASE('MLCER')\u003cbr\u003eCERES-Millet\"]\n    SEL --\u003e MZCER[\"CASE('MZCER','MZIXM','SWCER')\u003cbr\u003eMaize Models\"]\n    SEL --\u003e BSCER[\"CASE('BSCER')\u003cbr\u003eSugarbeet\"]\n    SEL --\u003e PTSUB[\"CASE('PTSUB')\u003cbr\u003eSUBSTOR-Potato\"]\n    SEL --\u003e RICER[\"CASE('RICER')\u003cbr\u003eCERES-Rice\"]\n    SEL --\u003e TFCER[\"CASE('TFCER')\u003cbr\u003eCERES-Teff\"]\n    SEL --\u003e SCCAN[\"CASE('SCCAN')\u003cbr\u003eCANEGRO Sugarcane\"]\n    SEL --\u003e SCSAM[\"CASE('SCSAM')\u003cbr\u003eSAMUCA Sugarcane\"]\n    SEL --\u003e SCCSP[\"CASE('SCCSP')\u003cbr\u003eCASUPRO Sugarcane\"]\n    SEL --\u003e SGCER[\"CASE('SGCER')\u003cbr\u003eCERES-Sorghum\"]\n    SEL --\u003e SUOIL[\"CASE('SUOIL')\u003cbr\u003eSunflower\"]\n    SEL --\u003e TRARO[\"CASE('TRARO','TNARO')\u003cbr\u003eAroids\"]\n    SEL --\u003e PIALO[\"CASE('PIALO')\u003cbr\u003ePineapple\"]\n```\n\nSources: [Plant/plant.for:373-728]()\n\n## 5. Key Inputs and Outputs\n\nThe PLANT Module serves as a data exchange hub between the crop models and the rest of the DSSAT-CSM system. Here's a summary of its key inputs and outputs:\n\n### Key Input Variables\n\n| Category | Variables | Description |\n|----------|-----------|-------------|\n| Control | CONTROL | Composite variable containing simulation control parameters |\n| Switches | ISWITCH | Contains switches for controlling simulation options |\n| Weather | WEATHER | Composite variable with weather data |\n| Water Balance | EO, EOP, EOS, EP, ES | Potential and actual evaporation and transpiration |\n| Soil State | NH4, NO3, ST, SW | Soil ammonium, nitrate, temperature, and water content |\n| Soil Properties | SOILPROP | Composite variable with soil characteristics |\n| Management | HARVFRAC, IRRAMT | Harvest fraction and irrigation amount |\n| Planting/Harvest | YRPLT, YREND | Planting and harvest dates |\n\n### Key Output Variables\n\n| Category | Variables | Description |\n|----------|-----------|-------------|\n| Canopy | CANHT, XHLAI, XLAI | Canopy height, healthy leaf area index, total leaf area index |\n| Stress Factors | NSTRES, PSTRES1 | Nitrogen and phosphorus stress factors |\n| Root System | RLV, RWUMX, PORMIN | Root length density, maximum water uptake rate, minimum pore space |\n| Growth Stage | MDATE, STGDOY | Maturity date, growth stage dates |\n| Nutrient Uptake | UNH4, UNO3, PUptake, KUptake | Plant uptake of nutrients |\n| Residue | HARVRES, SENESCE | Harvest residue and senesced plant material |\n| Water Use | EORATIO, KSEVAP, KTRANS | Parameters for evaporation and transpiration |\n\n```mermaid\ngraph LR\n    subgraph \"Inputs\"\n        CONTROL[\"CONTROL\u003cbr\u003eSimulation control\"]\n        ISWITCH[\"ISWITCH\u003cbr\u003eSimulation switches\"]\n        WEATHER[\"WEATHER\u003cbr\u003eWeather data\"]\n        WATER[\"EO, EOP, ES, EP\u003cbr\u003eWater balance components\"]\n        SOIL[\"NH4, NO3, ST, SW\u003cbr\u003eSoil state\"]\n        SOILPROP[\"SOILPROP\u003cbr\u003eSoil properties\"]\n        MGT[\"HARVFRAC, IRRAMT\u003cbr\u003eManagement\"]\n        DATES[\"YRPLT, YREND\u003cbr\u003eDates\"]\n    end\n    \n    subgraph \"PLANT Module\"\n        PROCESS[\"Process \u0026\u003cbr\u003eModel Selection\"]\n    end\n    \n    subgraph \"Outputs\"\n        CANOPY[\"CANHT, XHLAI, XLAI\u003cbr\u003eCanopy characteristics\"]\n        STRESS[\"NSTRES, PSTRES1\u003cbr\u003eStress factors\"]\n        ROOT[\"RLV, RWUMX, PORMIN\u003cbr\u003eRoot parameters\"]\n        GROWTH[\"MDATE, STGDOY\u003cbr\u003eGrowth stages\"]\n        NUTRIENT[\"UNH4, UNO3, PUptake, KUptake\u003cbr\u003eNutrient uptake\"]\n        RESIDUE[\"HARVRES, SENESCE\u003cbr\u003eResidue components\"]\n        EVAPTRANS[\"EORATIO, KSEVAP, KTRANS\u003cbr\u003eEvapotranspiration parameters\"]\n    end\n    \n    CONTROL --\u003e PROCESS\n    ISWITCH --\u003e PROCESS\n    WEATHER --\u003e PROCESS\n    WATER --\u003e PROCESS\n    SOIL --\u003e PROCESS\n    SOILPROP --\u003e PROCESS\n    MGT --\u003e PROCESS\n    DATES --\u003e PROCESS\n    \n    PROCESS --\u003e CANOPY\n    PROCESS --\u003e STRESS\n    PROCESS --\u003e ROOT\n    PROCESS --\u003e GROWTH\n    PROCESS --\u003e NUTRIENT\n    PROCESS --\u003e RESIDUE\n    PROCESS --\u003e EVAPTRANS\n```\n\nSources: [Plant/plant.for:65-74](), [Plant/plant.for:72-74](), [Plant/plant.for:272-296]()\n\n## 6. Initialization Process\n\nDuring the initialization phases (RUNINIT and SEASINIT), the PLANT Module:\n\n1. Checks for compatibility of switches (e.g., warning if incompatible evapotranspiration methods are selected)\n2. Initializes standardized output variables with default values\n3. Sets up canopy height parameters for dynamic evapotranspiration methods\n4. Pushes control variables to other modules using the PUT function\n5. Sets seasonal initialization values for all crop-specific variables\n\n```mermaid\nflowchart TD\n    RUNINIT[\"RUNINIT Phase\"]\n    SEASINIT[\"SEASINIT Phase\"]\n    \n    RUNINIT --\u003e|\"First step\"| CHECK[\"Check Method\u003cbr\u003eCompatibility\"]\n    CHECK --\u003e WARN[\"Issue Warnings\u003cbr\u003eIf Needed\"]\n    WARN --\u003e INIT[\"Initialize Output\u003cbr\u003eVariables\"]\n    INIT --\u003e CANHT[\"Set Default\u003cbr\u003eCanopy Height\"]\n    \n    SEASINIT --\u003e|\"After RUNINIT\"| ZERO[\"Zero Accumulator\u003cbr\u003eVariables\"]\n    ZERO --\u003e INIT2[\"Initialize Key\u003cbr\u003eState Variables\"]\n    INIT2 --\u003e CALL[\"Call Crop Model\u003cbr\u003efor SEASINIT\"]\n    CALL --\u003e HARVEST[\"Process Harvest\u003cbr\u003eResidue\"]\n```\n\nSources: [Plant/plant.for:208-346]()\n\n## 7. Integration with Soil-Plant-Atmosphere Module (SPAM)\n\nThe PLANT Module works closely with the SPAM Module, providing several key parameters that control water use and evapotranspiration:\n\n1. **KTRANS** - Light extinction coefficient for transpiration (= KEP or KCAN + 0.15)\n2. **KSEVAP** - Light extinction coefficient for soil evaporation\n3. **EORATIO** - Ratio for potential evapotranspiration adjustment\n4. **RWUMX** - Maximum root water uptake per unit root length\n5. **PORMIN** - Minimum pore space for optimal root function\n\nThese parameters are calculated by crop-specific models and then provided to the SPAM Module for soil water balance and evapotranspiration calculations.\n\n```mermaid\nsequenceDiagram\n    participant LAND as \"LAND Module\"\n    participant PLANT as \"PLANT Module\"\n    participant CROP as \"Crop Model\"\n    participant SPAM as \"SPAM Module\"\n    \n    LAND-\u003e\u003ePLANT: Call PLANT with DYNAMIC value\n    PLANT-\u003e\u003eCROP: Call specific crop model\n    CROP--\u003e\u003ePLANT: Return KTRANS, KSEVAP, EORATIO\n    PLANT--\u003e\u003eLAND: Return parameters\n    LAND-\u003e\u003eSPAM: Call with transpiration parameters\n    SPAM--\u003e\u003eLAND: Return water balance components\n    LAND-\u003e\u003ePLANT: Updated water states for next cycle\n```\n\nSources: [Plant/plant.for:454-461](), [CSM_Main/LAND.for:180-187](), [SPAM/SPAM.for:166-179]()\n\n## 8. Daily Operation Cycle\n\nDuring daily simulation (RATE and INTEGR phases), the PLANT Module:\n\n1. Processes the crop model's response to current conditions\n2. Updates plant state variables based on calculated growth and development rates\n3. Computes cumulative values for seasonal totals\n4. Manages senescence and root growth\n5. Handles crop status updates\n\nThe most critical operation is selecting and calling the appropriate crop model based on the MODEL identifier. This routing mechanism ensures that each crop is simulated using the most appropriate algorithms.\n\nSources: [Plant/plant.for:348-450](), [Plant/plant.for:706-766]()\n\n## 9. End of Season and Crop Status Handling\n\nAt the end of a growing season (SEASEND), the PLANT Module:\n\n1. Finalizes all plant-related calculations\n2. Records crop status codes for reporting\n3. Generates summary output data\n4. Manages harvest residue for the next season\n\nThe module includes comprehensive crop status codes that indicate how the crop finished the season:\n\n| Status | Description | Category |\n|--------|-------------|----------|\n| 1 | Crop matured normally | NORMAL |\n| 2 | Crop harvested on reported date | NORMAL |\n| 3 | Crop harvested at reported growth stage | NORMAL |\n| 6 | Auto-harvest within window | NORMAL |\n| 11 | Failure to plant | NO_SOW |\n| 12 | Failure to germinate | NOGERM |\n| 13 | Failure to emerge | NOEMRG |\n| 21 | Crop mature due to slow grain filling | SLOGRN |\n| 31 | Crop died due to heat stress | HOT |\n| 32 | Crop died due to cold stress | COLD |\n| 33 | Crop died due to deficit water stress | DRY |\n| 34 | Crop died due to excess water stress | WET |\n| 39 | Crop died due to excess stress | STRESS |\n| 51 | Crop died due to pest damage | PEST |\n| 100 | Crop season length exceeded limits | SEASON |\n| 200 | Weather data error | WEATHER |\n| 999 | Unspecified error condition | UNKNOWN |\n\nSources: [Plant/plant.for:766-798]()\n\n## 10. Extension and Integration\n\nThe PLANT Module is designed to be extensible, allowing for the addition of new crop models with minimal changes to the overall system. This is facilitated by:\n\n1. The use of a generic model selection mechanism\n2. Standardized input/output interfaces\n3. Consistent dynamic execution framework\n4. Modular approach to crop model integration\n\nWhen adding a new crop model, developers need to:\n1. Add the model identifier to the SELECT CASE statement\n2. Implement the model with the standard interface\n3. Ensure compatibility with the dynamic execution phases\n\nThis architecture has allowed DSSAT-CSM to expand from a few crop models to supporting over 20 different crops with varied modeling approaches.\n\nSources: [Plant/plant.for:373-728]()"])</script><script>self.__next_f.push([1,"20:T2ee9,"])</script><script>self.__next_f.push([1,"# WEATHER Module\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [Utilities/ModuleDefs.for](Utilities/ModuleDefs.for)\n- [Weather/IPWTH_alt.for](Weather/IPWTH_alt.for)\n- [Weather/ModForecast.f90](Weather/ModForecast.f90)\n- [Weather/OPWEATH.for](Weather/OPWEATH.for)\n- [Weather/WGEN.for](Weather/WGEN.for)\n- [Weather/weathr.for](Weather/weathr.for)\n\n\u003c/details\u003e\n\n\n\nThe WEATHER Module in DSSAT-CSM handles all aspects of weather data processing for crop simulation models. This includes reading weather data from files, generating synthetic weather when observed data is unavailable, calculating derived weather parameters, and providing both daily and hourly weather information to other system components. The module supports various input methods and includes weather forecasting capabilities for yield prediction scenarios.\n\n## 1. Module Overview\n\nThe WEATHER Module is a critical component of the DSSAT Cropping System Model (CSM) as it provides essential environmental inputs for simulating crop growth and development. Weather conditions directly affect photosynthesis, evapotranspiration, stress factors, and many other processes in crop models.\n\n```mermaid\ngraph TD\n    MAIN[\"Main Program\"] --\u003e WEATHR[\"WEATHR Subroutine\\nMain weather handler\"]\n    WEATHR --\u003e IPWTH[\"IPWTH\\nInput weather data\"]\n    WEATHR --\u003e WGEN[\"WGEN\\nGenerate weather data\"]\n    WEATHR --\u003e SOLAR[\"SOLAR\\nCompute solar parameters\"]\n    WEATHR --\u003e DAYLEN[\"DAYLEN\\nCalculate day length\"]\n    WEATHR --\u003e HMET[\"HMET\\nGenerate hourly data\"]\n    WEATHR --\u003e WTHMOD[\"WTHMOD\\nModify weather data\"]\n    WEATHR --\u003e OPWEATH[\"OPWEATH\\nOutput weather data\"]\n    \n    IPWTH --\u003e WeatherFiles[\"Weather Files\\n(.WTH format)\"]\n    WGEN --\u003e WGENIN[\"WGENIN\\nRead generator inputs\"]\n    WGEN --\u003e SIMMIN[\"SIMMIN\\nRead SIMMETEO inputs\"]\n    \n    WEATHR --\u003e OtherModules[\"Other CSM Modules\"]\n```\n\nSources: [Weather/weathr.for:1-45](), [Weather/IPWTH_alt.for:1-27](), [Weather/WGEN.for:1-19]()\n\n### 1.1 Supported Weather Variables\n\nThe module processes and provides the following key weather variables:\n\n| Variable | Description | Units |\n|----------|-------------|-------|\n| SRAD | Solar radiation | MJ/m²-d |\n| TMAX | Maximum daily temperature | °C |\n| TMIN | Minimum daily temperature | °C |\n| RAIN | Precipitation depth | mm |\n| TDEW | Dew point temperature | °C |\n| WINDSP | Wind speed | km/d |\n| PAR | Photosynthetically active radiation | MJ/m²-d |\n| RHUM | Relative humidity | % |\n| CO2 | Atmospheric CO₂ concentration | ppm |\n| OZON7 | Daily ozone concentration | ppb |\n| DAYL | Day length | hours |\n| VPDF | Vapor pressure deficit | kPa |\n\nSources: [Utilities/ModuleDefs.for:144-161](), [Weather/OPWEATH.for:95-102]()\n\n### 1.2 Weather Data Sources\n\nThe WEATHER Module supports four methods for obtaining weather data, controlled by the `MEWTH` parameter:\n\n- `M`: Read measured data from weather files\n- `G`: Generated weather data using parameters from weather files\n- `S`: Use SIMMETEO inputs to generate weather data\n- `W`: Use WGEN inputs to generate weather data\n\nSources: [Weather/weathr.for:167-176](), [Weather/weathr.for:346-363]()\n\n## 2. Module Architecture and Data Flow\n\nThe WEATHER Module has a modular structure with specialized components for different aspects of weather data processing.\n\n```mermaid\nflowchart TD\n    subgraph \"WEATHR Main Routine\"\n        Initialization[\"Initialization\\n(RUNINIT, SEASINIT)\"]\n        DailyCalc[\"Daily Rate Calculations\\n(RATE)\"]\n        OutputData[\"Output\\n(OUTPUT, SEASEND)\"]\n    end\n    \n    subgraph \"Input Methods\"\n        ReadWeather[\"Read Weather Files\\n(IPWTH)\"]\n        GenerateWeather[\"Generate Weather\\n(WGEN)\"]\n        ForecastWeather[\"Forecast Weather\\n(ModForecast)\"]\n    end\n    \n    subgraph \"Processing\"\n        SolarCalc[\"Solar Calculations\\n(SOLAR)\"]\n        DaylLength[\"Day Length\\n(DAYLEN)\"]\n        HourlyGen[\"Hourly Generation\\n(HMET)\"]\n    end\n    \n    subgraph \"Storage\"\n        WeatherType[\"WeatherType Structure\"]\n    end\n    \n    Initialization --\u003e ReadWeather\n    Initialization --\u003e GenerateWeather\n    Initialization --\u003e ForecastWeather\n    Initialization --\u003e SolarCalc\n    Initialization --\u003e DaylLength\n    Initialization --\u003e HourlyGen\n    \n    DailyCalc --\u003e ReadWeather\n    DailyCalc --\u003e GenerateWeather\n    DailyCalc --\u003e ForecastWeather\n    DailyCalc --\u003e SolarCalc\n    DailyCalc --\u003e DaylLength\n    DailyCalc --\u003e HourlyGen\n    \n    ReadWeather --\u003e WeatherType\n    GenerateWeather --\u003e WeatherType\n    ForecastWeather --\u003e WeatherType\n    SolarCalc --\u003e WeatherType\n    DaylLength --\u003e WeatherType\n    HourlyGen --\u003e WeatherType\n    \n    WeatherType --\u003e OutputData\n    WeatherType --\u003e OtherModules[\"Other DSSAT Modules\"]\n```\n\nSources: [Weather/weathr.for:118-145](), [Weather/weathr.for:320-440](), [Weather/weathr.for:458-485]()\n\n### 2.1 WeatherType Data Structure\n\nThe `WeatherType` is the central data structure used to store and pass weather information throughout the system:\n\n```mermaid\nclassDiagram\n    class WeatherType {\n        +REFHT: Real\n        +WINDHT: Real\n        +XLAT: Real\n        +XLONG: Real\n        +XELEV: Real\n        +CLOUDS: Real\n        +CO2: Real\n        +DAYL: Real\n        +DCO2: Real\n        +PAR: Real\n        +RAIN: Real\n        +RHUM: Real\n        +SRAD: Real\n        +TAMP: Real\n        +TAV: Real\n        +TAVG: Real\n        +TDAY: Real\n        +TDEW: Real\n        +TGROAV: Real\n        +TGRODY: Real\n        +TMAX: Real\n        +TMIN: Real\n        +TWILEN: Real\n        +VAPR: Real\n        +WINDSP: Real\n        +OZON7: Real\n        +NOTDEW: Logical\n        +NOWIND: Logical\n        +AMTRH[TS]: Real\n        +AZZON[TS]: Real\n        +BETA[TS]: Real\n        +RADHR[TS]: Real\n        +RHUMHR[TS]: Real\n        +TAIRHR[TS]: Real\n        +TGRO[TS]: Real\n        +WINDHR[TS]: Real\n    }\n```\n\nSources: [Utilities/ModuleDefs.for:144-161]()\n\n## 3. Weather Data Input and Generation\n\n### 3.1 Reading Weather Files\n\nThe IPWTH subroutine handles reading weather data from files. It supports different weather file formats and includes robust error checking.\n\n```mermaid\nflowchart TD\n    Start[\"IPWTH Subroutine\"] --\u003e OpenFile[\"Open weather file\"]\n    OpenFile --\u003e ReadHeader[\"Read station data header\\n(LAT, LONG, ELEV, etc.)\"]\n    ReadHeader --\u003e ReadDailyHeader[\"Read daily data header\"]\n    ReadDailyHeader --\u003e ReadData[\"Read daily weather records\"]\n    ReadData --\u003e CheckData[\"Check data for errors\"]\n    CheckData --\u003e StoreData[\"Store data in arrays\"]\n    StoreData --\u003e Return[\"Return to WEATHR\"]\n    \n    subgraph \"Error Handling\"\n        CheckData --\u003e |\"Data Invalid\"| ErrorMsg[\"Call ERROR or WeatherError\"]\n        ErrorMsg --\u003e Default[\"Use default values\"]\n    end\n```\n\nSources: [Weather/IPWTH_alt.for:126-143](), [Weather/IPWTH_alt.for:371-498](), [Weather/IPWTH_alt.for:577-650]()\n\nWeather data is read from standardized files with specific formats:\n\n1. The first header line contains station information (latitude, longitude, elevation)\n2. The second header line contains column headers for daily data\n3. Daily data records follow with date and weather variables\n\nKey functions of IPWTH:\n- Reads and parses weather file headers and data\n- Handles different date formats (2-digit and 4-digit years)\n- Provides quality control and error checking\n- Supports multiple weather files for forecast mode\n\nSources: [Weather/IPWTH_alt.for:348-497]()\n\n### 3.2 Weather Generation\n\nWhen measured weather data is unavailable, the WGEN subroutine can generate synthetic weather data based on monthly climate parameters:\n\n```mermaid\nflowchart TD\n    Start[\"WGEN Subroutine\"] --\u003e ReadParams[\"Read parameters from file\"]\n    ReadParams --\u003e InitCalc[\"Initialize calculations\"]\n    InitCalc --\u003e GenParams[\"Calculate generator parameters\\n(WGENPM)\"]\n    GenParams --\u003e GenDaily[\"Generate daily values\\n(WGENGN)\"]\n    GenDaily --\u003e CheckData[\"Check generated data\"]\n    CheckData --\u003e Return[\"Return to WEATHR\"]\n    \n    subgraph \"Parameter Reading\"\n        direction LR\n        ReadParams --\u003e WGENIN[\"WGENIN\\n(WGEN inputs)\"]\n        ReadParams --\u003e SIMMIN[\"SIMMIN\\n(SIMMETEO inputs)\"]\n    end\n```\n\nSources: [Weather/WGEN.for:70-227](), [Weather/WGEN.for:324-485](), [Weather/WGEN.for:509-726]()\n\nThe weather generator uses:\n- Monthly means and statistical parameters\n- Markov chain for precipitation occurrence\n- Gamma distribution for precipitation amount\n- Multivariate generation for temperature and radiation\n- Correlations between weather variables\n\nSources: [Weather/WGEN.for:742-781](), [Weather/WGEN.for:802-968]()\n\n### 3.3 Weather Forecasting\n\nThe Forecast module provides specialized functionality for yield forecasting by:\n\n1. Storing observed in-season weather data\n2. Retrieving historical weather data for generating ensembles\n3. Blending observed and forecast data\n\n```mermaid\nflowchart TD\n    Start[\"Forecast Mode\"] --\u003e FCAST_STORE[\"FCAST_STORE\\nStore in-season data\"]\n    FCAST_STORE --\u003e FCAST_RETRIEVE[\"FCAST_RETRIEVE\\nRetrieve data for current date\"]\n    FCAST_RETRIEVE --\u003e |\"Before forecast date\"| UseObserved[\"Use observed data\"]\n    FCAST_RETRIEVE --\u003e |\"After forecast date\"| UseEnsemble[\"Use ensemble data\"]\n    UseObserved --\u003e ReturnData[\"Return weather data\"]\n    UseEnsemble --\u003e ReturnData\n```\n\nSources: [Weather/ModForecast.f90:23-204](), [Weather/ModForecast.f90:207-265]()\n\n## 4. Weather Data Processing\n\n### 4.1 Daily Weather Calculations\n\nThe main WEATHR subroutine performs several important calculations and adjustments to weather data:\n\n1. Calculates day length and solar parameters\n2. Adjusts wind speed from reference height to 2m height\n3. Estimates dew point temperature if not provided\n4. Calculates hourly weather data from daily values\n5. Computes derived variables like average temperature\n\nSources: [Weather/weathr.for:243-306](), [Weather/weathr.for:374-438]()\n\n### 4.2 Hourly Weather Generation\n\nThe HMET subroutine (called by WEATHR) generates hourly values from daily data for:\n- Temperature\n- Solar radiation\n- Relative humidity\n- Wind speed\n- PAR (Photosynthetically Active Radiation)\n\nThis hourly data is crucial for detailed process-based modeling of photosynthesis, transpiration, and other plant processes.\n\nSources: [Weather/weathr.for:296-304](), [Weather/weathr.for:430-438]()\n\n## 5. Integration and Module Communication\n\n### 5.1 Data Exchange System\n\nThe WEATHER Module uses a modular data exchange system to make weather information available to other components:\n\n```mermaid\nflowchart TD\n    WEATHR[\"WEATHR\\nMain routine\"] --\u003e PUT[\"PUT\\nStore data\"]\n    PUT --\u003e SAVE_data[\"SAVE_data\\nGlobal storage\"]\n    \n    OtherModules[\"Other DSSAT Modules\"] --\u003e GET[\"GET\\nRetrieve data\"]\n    GET --\u003e SAVE_data\n    \n    subgraph \"ModuleData Interface\"\n        PUT\n        GET\n        SAVE_data\n    end\n```\n\nSources: [Utilities/ModuleDefs.for:425-533](), [Utilities/ModuleDefs.for:538-561]()\n\nThe weather data is stored in a centralized data structure and made available through PUT and GET procedures, allowing standardized access from any module in the system.\n\n### 5.2 Output Generation\n\nThe OPWEATH subroutine handles output of daily weather data to files:\n\n1. Creates and manages the Weather.OUT file\n2. Writes daily weather variable values\n3. Supports both standard text output and CSV format\n\nSources: [Weather/OPWEATH.for:13-170]()\n\n## 6. Summary\n\nThe WEATHER Module is a sophisticated component of DSSAT-CSM that handles all aspects of weather data management. It provides flexible options for obtaining weather data (measured, generated, or forecast), processes this data to calculate additional parameters, and makes the information available to other modules through a standardized interface. Its modular design allows for easy enhancement and integration with the rest of the system.\n\nThe module's ability to generate synthetic weather data and support forecast scenarios makes it particularly valuable for applications such as climate change studies, seasonal forecasting, and risk assessment in agricultural systems."])</script><script>self.__next_f.push([1,"21:T3189,"])</script><script>self.__next_f.push([1,"# SPAM Module\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [InputModule/IPSIM.for](InputModule/IPSIM.for)\n- [SPAM/SPSUBS.for](SPAM/SPSUBS.for)\n- [SPAM/STEMP.for](SPAM/STEMP.for)\n- [SPAM/STEMP_EPIC.for](SPAM/STEMP_EPIC.for)\n- [SPAM/TRANS.for](SPAM/TRANS.for)\n\n\u003c/details\u003e\n\n\n\n## Introduction and Purpose\n\nThe SPAM (Soil-Plant-Atmosphere Module) is a core component of the DSSAT-CSM system that calculates energy balance components at the interface between soil, plants, and atmospheric processes. It handles critical processes including soil temperature dynamics, evapotranspiration partitioning, and root water uptake. By simulating these energy balance and water movement processes, SPAM provides essential inputs to crop models regarding water availability and stress factors, while also contributing to accurate modeling of soil processes.\n\nThe SPAM module serves as a vital link in the soil-plant-atmosphere continuum, translating environmental conditions and soil properties into factors that directly affect plant growth and development.\n\nSources: [InputModule/IPSIM.for:1-69](), [SPAM/SPSUBS.for:1-15]()\n\n## Module Components and Structure\n\n### Component Diagram\n\n```mermaid\ngraph TD\n    SPAM[\"SPAM Module\"] --\u003e STEMP[\"Soil Temperature\\nComponent (STEMP)\"]\n    SPAM --\u003e TRANS[\"Transpiration\\nComponent (TRANS)\"]\n    SPAM --\u003e XTRACT[\"Root Water Uptake\\nComponent (XTRACT)\"]\n    SPAM --\u003e OPSPAM[\"Output Component\\n(OPSPAM)\"]\n    \n    STEMP --\u003e SOILT[\"Soil Temperature\\nCalculation (SOILT)\"]\n    TRANS --\u003e TRATIO[\"CO2 Effect on\\nTranspiration (TRATIO)\"]\n    \n    subgraph \"Alternative Methods\"\n        STEMP_EPIC[\"EPIC Soil Temperature\\n(STEMP_EPIC)\"]\n        SOILT_EPIC[\"EPIC Temperature\\nCalculation (SOILT_EPIC)\"]\n    end\n    \n    STEMP_EPIC --\u003e SOILT_EPIC\n    STEMP -.-\u003e STEMP_EPIC\n```\n\nThe SPAM module consists of four primary components:\n\n1. **Soil Temperature Component (STEMP)**: Calculates soil temperature profiles through the soil layers using either the default DSSAT method or an alternative EPIC-based approach.\n\n2. **Transpiration Component (TRANS)**: Calculates potential plant transpiration (EOP) based on evaporative demand, plant characteristics, and CO2 concentration effects.\n\n3. **Root Water Uptake Component (XTRACT)**: Determines water extraction by plant roots from each soil layer based on root distribution and water availability.\n\n4. **Output Component (OPSPAM)**: Generates detailed output for daily soil water data and energy balance components.\n\nSources: [SPAM/STEMP.for:10-34](), [SPAM/TRANS.for:2-8](), [SPAM/SPSUBS.for:400-413](), [SPAM/SPSUBS.for:2-14]()\n\n## Data Flow and Processing\n\n### Data Flow Diagram\n\n```mermaid\ngraph TD\n    INPUTS[\"Inputs\"] --\u003e SPAM[\"SPAM Module\"]\n    SPAM --\u003e OUTPUTS[\"Outputs\"]\n    \n    subgraph \"Input Data\"\n        SOIL_PROPS[\"Soil Properties\\n- Bulk Density\\n- Hydraulic Properties\\n- Layer Structure\"]\n        WEATHER_DATA[\"Weather Data\\n- Temperature\\n- Solar Radiation\\n- Wind Speed\"]\n        PLANT_PARAMS[\"Plant Parameters\\n- Leaf Area Index\\n- Root Distribution\\n- Crop Coefficients\"]\n        CONFIG[\"Configuration\\n- ET Method\\n- Temperature Method\\n- Output Options\"]\n    end\n    \n    subgraph \"Processing Steps\"\n        CALC_TEMP[\"Calculate Soil\\nTemperature Profiles\"]\n        CALC_ET[\"Calculate Potential\\nEvapotranspiration\"]\n        CALC_RWU[\"Calculate Root\\nWater Uptake\"]\n        GEN_OUTPUT[\"Generate\\nOutputs\"]\n    end\n    \n    subgraph \"Output Data\"\n        TEMP_PROFILE[\"Soil Temperature\\nProfile\"]\n        ET_COMPONENTS[\"ET Components\\n- Transpiration\\n- Soil Evaporation\"]\n        WATER_UPTAKE[\"Water Uptake\\nby Layer\"]\n        ENERGY_BALANCE[\"Energy Balance\\nComponents\"]\n    end\n    \n    SOIL_PROPS --\u003e INPUTS\n    WEATHER_DATA --\u003e INPUTS\n    PLANT_PARAMS --\u003e INPUTS\n    CONFIG --\u003e INPUTS\n    \n    SPAM --\u003e CALC_TEMP\n    SPAM --\u003e CALC_ET\n    SPAM --\u003e CALC_RWU\n    SPAM --\u003e GEN_OUTPUT\n    \n    CALC_TEMP --\u003e TEMP_PROFILE\n    CALC_ET --\u003e ET_COMPONENTS\n    CALC_RWU --\u003e WATER_UPTAKE\n    GEN_OUTPUT --\u003e ENERGY_BALANCE\n    \n    TEMP_PROFILE --\u003e OUTPUTS\n    ET_COMPONENTS --\u003e OUTPUTS\n    WATER_UPTAKE --\u003e OUTPUTS\n    ENERGY_BALANCE --\u003e OUTPUTS\n```\n\nThe SPAM module processes data through several key steps:\n\n1. It receives inputs from soil, weather, and plant modules, as well as configuration settings.\n2. It calculates soil temperature profiles based on energy balance principles.\n3. It determines potential evapotranspiration and its components.\n4. It calculates root water uptake distribution across soil layers.\n5. It generates output for various energy balance components.\n\nSources: [SPAM/STEMP.for:60-88](), [SPAM/TRANS.for:29-66](), [SPAM/SPSUBS.for:414-483]()\n\n## Integration with Other Modules\n\n### Module Integration Diagram\n\n```mermaid\ngraph TD\n    LAND[\"LAND Module\\n(Main Coordination)\"] --\u003e SPAM[\"SPAM Module\\n(Soil-Plant-Atmosphere)\"]\n    \n    SOIL[\"SOIL Module\"] \u003c--\u003e SPAM\n    PLANT[\"PLANT Module\"] \u003c--\u003e SPAM\n    WEATHER[\"WEATHER Module\"] --\u003e SPAM\n    MANAGEMENT[\"Management\\nOperations\"] --\u003e SPAM\n    \n    subgraph \"Data Exchanges\"\n        SOIL_TO_SPAM[\"- Soil Properties\\n- Soil Water Content\\n- Hydraulic Parameters\"]\n        SPAM_TO_SOIL[\"- Soil Evaporation\\n- Surface Temperature\"]\n        \n        PLANT_TO_SPAM[\"- Leaf Area Index\\n- Root Distribution\\n- Crop Parameters\"]\n        SPAM_TO_PLANT[\"- Transpiration\\n- Soil Temperature\\n- Water Stress Factors\"]\n        \n        WEATHER_TO_SPAM[\"- Temperature\\n- Solar Radiation\\n- Wind Speed\\n- Precipitation\"]\n        \n        MGMT_TO_SPAM[\"- Irrigation\\n- Mulch Coverage\\n- Residue Management\"]\n    end\n    \n    SOIL --\u003e SOIL_TO_SPAM\n    SOIL_TO_SPAM --\u003e SPAM\n    SPAM --\u003e SPAM_TO_SOIL\n    SPAM_TO_SOIL --\u003e SOIL\n    \n    PLANT --\u003e PLANT_TO_SPAM\n    PLANT_TO_SPAM --\u003e SPAM\n    SPAM --\u003e SPAM_TO_PLANT\n    SPAM_TO_PLANT --\u003e PLANT\n    \n    WEATHER --\u003e WEATHER_TO_SPAM\n    WEATHER_TO_SPAM --\u003e SPAM\n    \n    MANAGEMENT --\u003e MGMT_TO_SPAM\n    MGMT_TO_SPAM --\u003e SPAM\n```\n\nThe SPAM module interfaces with several other modules in the DSSAT-CSM system:\n\n- **SOIL Module**: Provides soil physical properties and receives information about soil evaporation and temperature.\n- **PLANT Module**: Provides plant parameters like leaf area index and receives transpiration rates and soil temperature data.\n- **WEATHER Module**: Supplies daily weather data essential for energy balance calculations.\n- **MANAGEMENT Module**: Provides information about irrigation, mulch coverage, and other management practices.\n\nSources: [InputModule/IPSIM.for:59-87](), [SPAM/STEMP.for:57-87](), [SPAM/TRANS.for:51-61]()\n\n## Key Algorithms and Processes\n\n### Soil Temperature Calculation\n\nThe soil temperature algorithm calculates temperatures at different soil depths:\n\n```mermaid\ngraph TD\n    START[\"Begin Soil Temperature\\nCalculation\"] --\u003e INIT[\"Initialize Parameters\\n- Soil Properties\\n- Initial Temperatures\"]\n    INIT --\u003e GET_INPUTS[\"Get Daily Inputs\\n- Air Temperature\\n- Solar Radiation\\n- Soil Moisture\"]\n    GET_INPUTS --\u003e CALC_PARAMS[\"Calculate Parameters\\n- Damping Depth (DD)\\n- Surface Temperature\"]\n    CALC_PARAMS --\u003e LOOP[\"For Each Soil Layer\"]\n    LOOP --\u003e CALC_TEMP[\"Calculate Temperature\\nat Layer Midpoint\"]\n    CALC_TEMP --\u003e NEXT[\"Next Layer?\"]\n    NEXT -- \"Yes\" --\u003e LOOP\n    NEXT -- \"No\" --\u003e OUTPUT[\"Output Soil\\nTemperature Profile\"]\n    OUTPUT --\u003e END[\"End Calculation\"]\n    \n    subgraph \"Temperature Calculation Details\"\n        SURFACE_TEMP[\"Calculate Surface Temperature\\nSRFTEMP = TAV + (TAMP/2 * COS(ALX) + DT)\"]\n        LAYER_TEMP[\"Calculate Layer Temperature\\nST(L) = TAV + (TAMP/2 * COS(ALX+ZD) + DT) * EXP(ZD)\"]\n        DAMPING[\"Calculate Damping Depth\\nDD = FX * DP\"]\n        MOISTURE_EFFECT[\"Calculate Moisture Effect\\nFX = EXP(B * ((1.0-WC)/(1.0+WC))**2)\"]\n    end\n    \n    CALC_PARAMS --\u003e SURFACE_TEMP\n    CALC_PARAMS --\u003e DAMPING\n    DAMPING --\u003e MOISTURE_EFFECT\n    CALC_TEMP --\u003e LAYER_TEMP\n```\n\nThe soil temperature calculation involves:\n1. Computing a damping depth based on soil properties and moisture content\n2. Calculating surface temperature based on air temperature and energy balance\n3. Determining temperature at various depths using wave propagation principles\n4. Adjusting for soil moisture effects on heat transfer\n\nSources: [SPAM/STEMP.for:261-371](), [SPAM/STEMP.for:209-240]()\n\n### Root Water Uptake Process\n\nThe root water uptake calculation distributes water extraction across soil layers:\n\n1. The potential transpiration rate (EP) is allocated to soil layers based on root distribution.\n2. For each layer, water uptake is limited by available water content above the lower limit.\n3. A water uptake factor (WUF) is calculated if potential uptake exceeds availability.\n4. Total actual water uptake (TRWU) is calculated as the sum of uptake from all layers.\n5. Actual transpiration (EP) is updated based on the calculated water uptake.\n\nSources: [SPAM/SPSUBS.for:413-483]()\n\n### Transpiration Calculation\n\nThe transpiration calculation accounts for CO2 effects on plant water use:\n\n1. A relative transpiration rate (TRATIO) is calculated based on CO2 concentration, which affects stomatal resistance.\n2. Different equations are used for C3 and C4 crops to represent their distinct responses to CO2.\n3. Canopy light interception is estimated using leaf area index and light extinction coefficient.\n4. Potential transpiration is calculated based on intercepted energy and adjusted for CO2 effects.\n5. Atmospheric CO2 concentration above ambient levels generally reduces transpiration rates.\n\nSources: [SPAM/TRANS.for:29-148](), [SPAM/TRANS.for:178-287]()\n\n## Configuration Options\n\nThe SPAM module behavior is controlled through several parameters in the simulation control section:\n\n| Parameter | Description | Options |\n|-----------|-------------|---------|\n| MEEVP | Evapotranspiration method | P: Priestley-Taylor\u003cbr\u003eR: Penman-FAO24\u003cbr\u003eM: Penman-Monteith\u003cbr\u003eH: Hourly energy balance |\n| MEPHO | Photosynthesis method | C: Canopy photosynthesis-based\u003cbr\u003eL: Leaf photosynthesis-based |\n| MESEV | Soil evaporation method | R: Ritchie two-stage (default)\u003cbr\u003eS: Suleiman-Ritchie |\n| METMP | Soil temperature method | D: DSSAT/Kimball (default)\u003cbr\u003eE: EPIC model\u003cbr\u003eR: Ritchie method |\n| MEHYD | Hydraulic properties method | R: Ritchie method |\n| ICO2 | CO2 input method | M: Measured CO2 levels\u003cbr\u003eD: Default CO2 values\u003cbr\u003eW: Weighted CO2 values |\n\nThese parameters are set in simulation control files and allow users to customize SPAM module behavior for different environmental conditions and research questions.\n\nSources: [InputModule/IPSIM.for:126-146](), [InputModule/IPSIM.for:234-246](), [InputModule/IPSIM.for:623-686]()\n\n## Technical Implementation\n\nThe SPAM module follows the standard DSSAT-CSM design pattern with functions for different simulation stages:\n\n- **SEASINIT**: Initializes parameters and state variables at the beginning of a season\n- **RATE**: Calculates daily rates for various processes\n- **INTEGR**: Integrates daily values into state variables\n- **OUTPUT**: Generates outputs at specified intervals\n- **SEASEND**: Performs end-of-season calculations and summaries\n\nThe module is implemented in Fortran with key files including:\n- [SPAM/STEMP.for](): Contains soil temperature calculation routines\n- [SPAM/TRANS.for](): Handles transpiration calculations including CO2 effects\n- [SPAM/SPSUBS.for](): Contains utility subroutines including XTRACT for root water uptake and OPSPAM for output\n- [SPAM/STEMP_EPIC.for](): Contains the alternative EPIC-based soil temperature method\n\nSources: [SPAM/SPSUBS.for:94-345](), [SPAM/STEMP.for:92-255](), [SPAM/TRANS.for:80-143]()\n\n## Output and Reporting\n\nThe SPAM module generates several output files and metrics:\n\n### ET.OUT File\nContains daily values of evapotranspiration components:\n- Solar radiation, maximum and minimum temperatures\n- Reference evapotranspiration (REFET)\n- Potential (EO) and actual (ET) evapotranspiration\n- Plant transpiration (EP)\n- Soil evaporation (ES)\n- Soil evaporation by layer (with MESEV='S')\n- Root water uptake by layer\n\n### Summary Statistics\nThe following values are added to SUMMARY.OUT:\n- ETCM: Cumulative evapotranspiration\n- EPCM: Cumulative plant transpiration\n- ESCM: Cumulative soil evaporation\n\nOutput can be generated in traditional text format or as CSV files depending on the FMOPT setting.\n\nSources: [SPAM/SPSUBS.for:133-155](), [SPAM/SPSUBS.for:328-335]()\n\n## References and Related Modules\n\nFor more information on related modules, see:\n- [SOIL Module](#3.2)\n- [PLANT Module](#3.3)\n- [WEATHER Module](#3.4)\n- [Management Operations](#3.6)\n\nFor the overall system architecture, see [System Architecture](#2)."])</script><script>self.__next_f.push([1,"22:T34ef,"])</script><script>self.__next_f.push([1,"# Management Operations\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [Data/MODEL.ERR](Data/MODEL.ERR)\n- [Management/MgmtOps.for](Management/MgmtOps.for)\n- [Plant/FORAGE/for_harv.for](Plant/FORAGE/for_harv.for)\n- [Plant/FORAGE/for_hres_cgro.for](Plant/FORAGE/for_hres_cgro.for)\n- [Plant/FORAGE/for_ipprog.for](Plant/FORAGE/for_ipprog.for)\n- [Plant/FORAGE/forage.for](Plant/FORAGE/forage.for)\n- [Plant/Generic-Pest/IPPROG.for](Plant/Generic-Pest/IPPROG.for)\n\n\u003c/details\u003e\n\n\n\n## Purpose and Scope\n\nThe Management Operations module in DSSAT-CSM simulates various agricultural management practices that affect crop growth and development. This module coordinates the timing and implementation of key field operations such as planting, harvesting, tillage, irrigation, fertilization, chemical applications, and specialized operations like forage harvesting. Management Operations serves as the central coordinator that processes management inputs from the Input Module and implements them in the appropriate crop and soil modules throughout the simulation.\n\nSources: [Management/MgmtOps.for:1-41]()\n\n## System Architecture\n\nThe Management Operations module follows a modular design with specialized submodules for each type of management operation. These submodules are coordinated through the main `MGMTOPS` subroutine which orchestrates the timing and execution of operations throughout the simulation.\n\n### Management Operations Module Structure\n\n```mermaid\ngraph TD\n    MGMTOPS[\"MGMTOPS - Management Operations Main\"] --\u003e AUTPLT[\"AUTPLT - Automatic Planting\"]\n    MGMTOPS --\u003e AUTHAR[\"AUTHAR - Automatic Harvest\"]\n    MGMTOPS --\u003e TILLAGE[\"TILLAGE - Tillage Operations\"]\n    MGMTOPS --\u003e CHEMICAL[\"CHEMICAL - Chemical Applications\"]\n    MGMTOPS --\u003e IRRIG[\"IRRIG - Irrigation Management\"]\n    MGMTOPS --\u003e FERT_PLACE[\"FERT_PLACE - Fertilizer Applications\"]\n    MGMTOPS --\u003e OM_PLACE[\"OM_PLACE - Organic Matter Applications\"]\n    MGMTOPS --\u003e PADDY_MGMT[\"PADDY_MGMT - Flooded Field Management\"]\n    MGMTOPS --\u003e OPMGMT[\"OPMGMT - Management Outputs\"]\n    \n    style MGMTOPS stroke-width:3px\n```\n\nThe Management Operations module interfaces with other DSSAT modules, particularly the LAND module, which coordinates the overall simulation, and specialized plant modules that implement crop-specific management responses.\n\nSources: [Management/MgmtOps.for:33-50](), [Management/MgmtOps.for:147-190]()\n\n### Dynamic Operation Workflow\n\nThe Management Operations module operates under the DSSAT dynamic time-step system with distinct phases:\n\n```mermaid\nflowchart LR\n    INIT[\"INIT - Initialization\\n(Set up management schedule)\"] --\u003e RATE[\"RATE - Rate Calculations\\n(Determine operation timing)\"]\n    RATE --\u003e INTEGR[\"INTEGR - Daily Integration\\n(Execute operations)\"]\n    INTEGR --\u003e OUTPUT[\"OUTPUT - Output\\n(Record operation results)\"]\n    OUTPUT --\u003e SEASEND[\"SEASEND - Season End\\n(Final management summaries)\"]\n```\n\nEach management operation follows this workflow, determining when operations should occur and implementing them at the appropriate simulation time step.\n\nSources: [Management/MgmtOps.for:117-145](), [Management/MgmtOps.for:199-242](), [Management/MgmtOps.for:247-270](), [Management/MgmtOps.for:276-286](), [Management/MgmtOps.for:292-324]()\n\n## Management Operation Types\n\n### Planting Operations\n\nPlanting operations set the start date for crop growth simulations. The system supports both specified planting dates from input files and automatic planting based on environmental conditions.\n\nThe `AUTPLT` subroutine handles automatic planting decisions based on:\n- Soil water conditions\n- Temperature thresholds\n- Date windows for planting\n\nPlanting parameters include:\n- Planting date (specified or automatic)\n- Plant population\n- Row spacing and orientation\n- Planting depth\n\nSources: [Management/MgmtOps.for:151-153](), [Management/MgmtOps.for:209-214]()\n\n### Harvest Operations\n\nHarvest operations determine when crops are harvested and how much biomass is removed from the field. The system supports:\n- Specified harvest dates\n- Automatic harvest based on crop maturity\n- Partial harvests with specified fractions\n\nThe `AUTHAR` subroutine determines harvest timing and calculates harvest fractions, which specify the proportions of plant components (e.g., grain, stover) that are removed during harvest.\n\nSources: [Management/MgmtOps.for:158-161](), [Management/MgmtOps.for:267-270]()\n\n### Irrigation Management\n\nThe irrigation management system simulates various irrigation methods and schedules:\n\n```mermaid\ngraph TD\n    IRRIG[\"IRRIG Management Module\"] --\u003e IIRRI[\"Irrigation Method Selection\"]\n    IIRRI --\u003e|\"A\"| AUTO[\"Automatic Irrigation\\nbased on soil water depletion\"]\n    IIRRI --\u003e|\"F\"| FIXED[\"Fixed irrigation amounts\\non specified dates\"]\n    IIRRI --\u003e|\"R\"| READ[\"Read irrigation amounts\\nfrom file\"]\n    IIRRI --\u003e|\"D\"| DRIP[\"Drip irrigation with\\nspecified efficiency\"]\n    IIRRI --\u003e|\"P\"| PADDY[\"Paddy irrigation for\\nflooded rice fields\"]\n    IIRRI --\u003e|\"W\"| WETLAND[\"Wetland irrigation with\\nbunded fields\"]\n    IIRRI --\u003e|\"E\"| FLOOD[\"Flood irrigation\"]\n    IIRRI --\u003e|\"T\"| FURROW[\"Furrow irrigation\"]\n    \n    IRRIG --\u003e FLOODED[\"Flooded Field Management\\n(PADDY_MGMT)\"]\n```\n\nThe irrigation system interacts closely with the soil water balance and can affect nitrogen transformations, particularly in flooded systems.\n\nSources: [Management/MgmtOps.for:183-189](), [Management/MgmtOps.for:229-237](), [Management/MgmtOps.for:254-258](), [Management/MgmtOps.for:260-265]()\n\n### Fertilizer Applications\n\nThe fertilizer management system simulates the application of inorganic fertilizers containing nitrogen, phosphorus, and potassium. Key components include:\n\n- Application timing (date or growth stage)\n- Application method (surface, incorporated, banded)\n- Application depth\n- Fertilizer type and composition\n- Application rates for N, P, and K\n\nThe `FERT_PLACE` subroutine determines the distribution of nutrients in the soil profile based on application method and soil properties.\n\nSources: [Management/MgmtOps.for:167-169](), [Management/MgmtOps.for:216-218]()\n\n### Organic Matter Applications\n\nThe organic matter management system simulates the application of organic materials like crop residues, manure, and other organic amendments. The system tracks:\n\n- Application timing\n- Application method\n- Residue composition (C, N, P, lignin content)\n- Decomposition rates\n\nThe `OM_PLACE` subroutine places organic materials in the appropriate soil layer based on the application method.\n\nSources: [Management/MgmtOps.for:171-173](), [Management/MgmtOps.for:220-222](), [Management/MgmtOps.for:295-297]()\n\n### Tillage Operations\n\nThe tillage management system simulates various tillage practices and their effects on soil properties. Key components include:\n\n- Tillage timing\n- Tillage depth\n- Tillage implement type\n- Effects on bulk density and residue incorporation\n\nThe `TILLAGE` subroutine modifies soil properties based on the tillage implement specifications.\n\nSources: [Management/MgmtOps.for:175-178](), [Management/MgmtOps.for:224-227]()\n\n### Chemical Applications\n\nThe chemical management system simulates the application of pesticides and other chemicals. Components include:\n\n- Application timing\n- Application method\n- Chemical type and rate\n- Chemical efficacy\n\nThe `CHEMICAL` subroutine handles the scheduling and application of chemicals.\n\nSources: [Management/MgmtOps.for:163-165](), [Management/MgmtOps.for:238-241]()\n\n### Specialized Operations: Forage Harvesting\n\nThe DSSAT-CSM system includes specialized management operations for forage crops, particularly the forage harvesting (mowing) system. This system is more complex than standard harvesting as it:\n\n1. Handles multiple harvests per season\n2. Simulates regrowth after harvest\n3. Tracks biomass removal and quality\n\nThe forage harvesting system can be configured with predefined harvest dates or automatic harvesting based on:\n- Fixed time intervals (days)\n- Growing degree days (GDD)\n- Biomass thresholds\n\n```mermaid\ngraph TD\n    FOR_HARV[\"FORAGE_HARVEST Module\"] --\u003e MOW_TYPE[\"Mowing Strategy Selection\"]\n    MOW_TYPE --\u003e|\"Manual\"| MANUAL[\"Defined Mowing Dates\\nfrom MOW file\"]\n    MOW_TYPE --\u003e|\"Automatic\"| AUTO_MOW[\"Automatic Mowing Systems\"]\n    \n    AUTO_MOW --\u003e|\"ATTP='W'\"| DAYS[\"Fixed Days Interval\\n(HMFRQ)\"]\n    AUTO_MOW --\u003e|\"ATTP='X'\"| GDD[\"GDD-based Interval\\n(HMGDD)\"]\n    AUTO_MOW --\u003e|\"ATTP='Y'\"| SIMPLE_DAYS[\"Simple Fixed Days\\nwith fixed parameters\"]\n    AUTO_MOW --\u003e|\"ATTP='Z'\"| SIMPLE_GDD[\"Simple GDD-based\\nwith fixed parameters\"]\n    \n    FOR_HARV --\u003e PARAMS[\"Mowing Parameters\"]\n    PARAMS --\u003e CUT_HEIGHT[\"Cutting Height\\n(HMCUT)\"]\n    PARAMS --\u003e STUBBLE[\"Stubble Percentage\\n(RSPLC)\"]\n    PARAMS --\u003e VEG_STAGE[\"Post-mow Vegetative Stage\\n(HMVS)\"]\n    \n    FOR_HARV --\u003e OUTPUT[\"Mowing Outputs\"]\n    OUTPUT --\u003e FORAGE_OUT[\"FORAGE.OUT\\n(Harvest details)\"]\n    OUTPUT --\u003e MGMT_EVENT[\"MgmtEvent.OUT\\n(Management summary)\"]\n```\n\n#### Forage Harvest Parameters\n\n| Parameter | Description | Units | Source |\n|-----------|-------------|-------|--------|\n| HMFRQ | Fixed-day harvest frequency | days | Input file |\n| HMGDD | Growing degree day harvest frequency | GDD | Input file |\n| HMCUT | Cutting height | cm | Input file |\n| HMMOW | Mowing intensity (Simple version) | kg/ha | Input file |\n| HRSPL | Stubble percentage of leaf (Simple version) | % | Input file |\n| HMVS | Vegetative stage after mowing | unitless | Input file |\n| MOWREF | Reference mowing intensity | kg/ha | Species file |\n| RSREF | Reference stubble percentage | % | Species file |\n\nThe forage harvest module calculates the amount of biomass removed, updates plant state variables (leaf area, biomass by organ, etc.), and simulates plant regrowth after mowing.\n\nSources: [Plant/FORAGE/for_harv.for:23-39](), [Plant/FORAGE/for_harv.for:142-176](), [Plant/FORAGE/for_harv.for:251-276](), [Plant/FORAGE/for_harv.for:538-717](), [Plant/FORAGE/forage.for:422-424]()\n\n## Data Flow and Integration\n\nThe Management Operations module integrates with the overall DSSAT-CSM system through a well-defined data flow. Management operations are defined in input files, processed by the Input module, scheduled and executed by the Management Operations module, and their effects are implemented in the relevant plant and soil modules.\n\n```mermaid\nflowchart TD\n    INPUT_FILES[\"Input Files\\n(FILEX, MOWFILE, etc.)\"] --\u003e INPUT_MODULE[\"Input Module\\n(IPEXP, IPAHAR, etc.)\"]\n    INPUT_MODULE --\u003e MGMTOPS[\"Management Operations Module\\n(MGMTOPS)\"]\n    \n    MGMTOPS --\u003e PLANT[\"Plant Module\\n(Updates plant state)\"]\n    MGMTOPS --\u003e SOIL[\"Soil Module\\n(Updates soil state)\"]\n    MGMTOPS --\u003e SPAM[\"SPAM Module\\n(Updates energy balance)\"]\n    \n    PLANT --\u003e LAND[\"LAND Module\\n(Integrates all processes)\"]\n    SOIL --\u003e LAND\n    SPAM --\u003e LAND\n    \n    MGMTOPS --\u003e OUTPUT_FILES[\"Output Files\\n(MgmtOps.OUT, MgmtEvent.OUT, FORAGE.OUT)\"]\n```\n\n### Management Data Flow Example: Forage Harvest\n\nFor forage harvesting operations, the data flow is:\n\n1. Harvest parameters are read from input files by the Input module\n2. The Management Operations module passes these parameters to the FORAGE_HARVEST subroutine\n3. FORAGE_HARVEST calculates biomass removal and updates plant state variables\n4. The updated plant state affects future growth in the Plant module\n5. Residue from harvest is passed to the Soil module, affecting soil processes\n6. Harvest results are written to output files (FORAGE.OUT and MgmtEvent.OUT)\n\nSources: [Plant/FORAGE/for_harv.for:486-509](), [Plant/FORAGE/for_harv.for:661-697](), [Plant/FORAGE/for_harv.for:701-705](), [Plant/FORAGE/for_hres_cgro.for:59-183]()\n\n## Management Operation Outputs\n\nThe Management Operations module generates several output files that document management operations and their effects:\n\n1. **MgmtOps.OUT**: Daily output file that records all management operations as they occur\n2. **MgmtEvent.OUT**: Summary file that records each management event with its timing and effects\n3. **FORAGE.OUT**: Specialized output file for forage harvesting operations\n\nExample MgmtEvent.OUT format:\n```\n@RUN Date........  DOY    DAS    DAP  CR  Stage         Operation       Quantities\n!--------------------------------------------------------------------------------------\n   1 Jan 15, 2023  015      1      1  BM               Planting       \n   1 Mar 15, 2023  074     60     60  BM               Mowing          FHWAH=1540 kg/ha\n   1 Apr 20, 2023  110     96     96  BM               Mowing          FHWAH=2350 kg/ha\n```\n\nThe system also reports management operation summaries in the standard DSSAT Summary.OUT file, including:\n- Number of irrigation applications (IR#M)\n- Total irrigation amount (IRCM)\n- Number of fertilizer applications\n- Total fertilizer amounts\n- Number of harvest operations\n- Harvest yields and indices\n\nSources: [Management/MgmtOps.for:509-533](), [Management/MgmtOps.for:675-706](), [Management/MgmtOps.for:310-316]()\n\n## Error Handling\n\nThe Management Operations module includes comprehensive error checking for input parameters and operating conditions. Common errors include:\n\n- Invalid planting dates\n- Invalid harvest codes\n- Missing automatic management sections\n- Incompatible field and management parameters\n- Improper parameter ranges\n\nThese errors are reported through the MODEL.ERR system with specific error codes that help identify and resolve issues.\n\nSources: [Data/MODEL.ERR:1-47](), [Data/MODEL.ERR:103-114](), [Data/MODEL.ERR:157-177]()"])</script><script>self.__next_f.push([1,"23:T40c5,"])</script><script>self.__next_f.push([1,"# Plant Models\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [CSM_Main/CSM.for](CSM_Main/CSM.for)\n- [CSM_Main/LAND.for](CSM_Main/LAND.for)\n- [Data/Genotype/COGRO048.ECO](Data/Genotype/COGRO048.ECO)\n- [Data/Genotype/COGRO048.SPE](Data/Genotype/COGRO048.SPE)\n- [InputModule/COMIBS.blk](InputModule/COMIBS.blk)\n- [InputModule/SEHARV.for](InputModule/SEHARV.for)\n- [InputModule/input_sub.for](InputModule/input_sub.for)\n- [Management/AUTHAR.for](Management/AUTHAR.for)\n- [Plant/CROPGRO/CROPGRO.for](Plant/CROPGRO/CROPGRO.for)\n- [Plant/CROPGRO/FreshWt.for](Plant/CROPGRO/FreshWt.for)\n- [Plant/CROPGRO/GROW.for](Plant/CROPGRO/GROW.for)\n- [Plant/CROPGRO/LTGROW.for](Plant/CROPGRO/LTGROW.for)\n- [Plant/CROPGRO/Opgrow.for](Plant/CROPGRO/Opgrow.for)\n- [Plant/CROPGRO/PODS.for](Plant/CROPGRO/PODS.for)\n- [Plant/plant.for](Plant/plant.for)\n- [SPAM/SPAM.for](SPAM/SPAM.for)\n- [Soil/SOIL.for](Soil/SOIL.for)\n\n\u003c/details\u003e\n\n\n\n## Purpose and Scope\n\nThis document provides an overview of the plant models in the DSSAT-CSM (Decision Support System for Agrotechnology Transfer - Cropping System Model) system. These models simulate crop growth, development, yield formation, and crop-environment interactions. The DSSAT platform includes multiple plant models, each designed for specific crop types while sharing a common framework for integration with soil, weather, and management components.\n\nFor information about the soil component, see the Soil Processes page (#5). For information about weather and environmental interfaces, see the WEATHER Module page (#3.4).\n\n## Plant Model Architecture\n\nThe plant models in DSSAT-CSM are organized in a modular structure, allowing different crop-specific implementations to work within a unified framework.\n\n### High-Level Architecture Diagram\n\n```mermaid\ngraph TD\n    subgraph \"Plant Module\"\n        PLANT[\"PLANT\u003cbr\u003e(Main plant routine)\"]\n        CROPGRO[\"CROPGRO\u003cbr\u003e(Legumes, cotton, etc.)\"]\n        CERES[\"CERES Models\u003cbr\u003e(Maize, wheat, rice, etc.)\"]\n        CSCER[\"CSCER Models\u003cbr\u003e(Cereals)\"]\n        FORAGE[\"FORAGE Model\u003cbr\u003e(Perennial forages)\"]\n        OTHERS[\"Other Models\u003cbr\u003e(CANEGRO, CASUPRO, etc.)\"]\n        \n        PLANT --\u003e CROPGRO\n        PLANT --\u003e CERES\n        PLANT --\u003e CSCER\n        PLANT --\u003e FORAGE\n        PLANT --\u003e OTHERS\n    end\n    \n    LAND[\"LAND Module\u003cbr\u003e(Coordinates simulation)\"] --\u003e PLANT\n    PLANT \u003c--\u003e SOIL[\"SOIL Module\u003cbr\u003e(Soil processes)\"]\n    PLANT \u003c--\u003e SPAM[\"SPAM Module\u003cbr\u003e(Soil-Plant-Atmosphere)\"]\n    PLANT \u003c--\u003e MGMT[\"Management\u003cbr\u003e(Operations)\"]\n```\n\nSources: [Plant/plant.for:1-105](), [CSM_Main/LAND.for:25-108](), [SPAM/SPAM.for:1-35]()\n\n### Detailed Implementation Flow\n\n```mermaid\nflowchart TB\n    subgraph \"Plant Module Implementation\"\n        RUNINIT[\"RUNINIT\u003cbr\u003eOne-time initialization\"]\n        SEASINIT[\"SEASINIT\u003cbr\u003eSeason initialization\"]\n        RATE[\"RATE\u003cbr\u003eDaily rate calculations\"]\n        INTEGR[\"INTEGR\u003cbr\u003eIntegration of state variables\"]\n        OUTPUT[\"OUTPUT\u003cbr\u003eGenerate outputs\"]\n        SEASEND[\"SEASEND\u003cbr\u003eEnd-of-season calculations\"]\n        \n        RUNINIT --\u003e SEASINIT\n        SEASINIT --\u003e RATE\n        RATE --\u003e INTEGR\n        INTEGR --\u003e OUTPUT\n        OUTPUT --\u003e RATE\n        OUTPUT --\u003e SEASEND\n    end\n    \n    DYNAMIC[\"DYNAMIC\u003cbr\u003e(Control variable)\"] --\u003e RUNINIT\n    DYNAMIC --\u003e SEASINIT\n    DYNAMIC --\u003e RATE\n    DYNAMIC --\u003e INTEGR\n    DYNAMIC --\u003e OUTPUT\n    DYNAMIC --\u003e SEASEND\n```\n\nSources: [Plant/plant.for:206-402](), [CSM_Main/CSM.for:77-201]()\n\n## Supported Plant Models\n\nDSSAT-CSM supports multiple crop simulation models, each with specific implementations for different crops or crop groups.\n\n### Model Types and Crops\n\n| Model Group | Model Name | Crops Simulated | Implementation File |\n|-------------|------------|-----------------|---------------------|\n| CROPGRO | CRGRO | Soybean, peanut, dry bean, cotton, tomato, pepper | Plant/CROPGRO/CROPGRO.for |\n| CERES | MZCER | Maize | Plant/MZCER/*.for |\n| CERES | SGCER | Sorghum | Plant/SGCER/*.for |\n| CERES | MLCER | Millet | Plant/MLCER/*.for |\n| CERES | RICER | Rice | Plant/RICER/*.for |\n| CSCER | CSCER | Wheat, barley | Plant/CSCER/*.for |\n| CSCRP | CSCRP | Wheat, barley variations | Plant/CSCRP/*.for |\n| CSCAS | CSCAS | Cassava | Plant/CSCAS/*.for |\n| CSYCA | CSYCA | CIAT cassava | Plant/CSYCA/*.for |\n| FORAGE | PRFRM | Perennial forages | Plant/PRFRM/*.for |\n| Potato | PTSUB | Potato | Plant/PTSUB/*.for |\n| Sugarcane | SCCAN | Sugarcane (CANEGRO) | Plant/SCCAN/*.for |\n| Sugarcane | SCCSP | Sugarcane (CASUPRO) | Plant/SCCSP/*.for |\n| Taro/Tanier | TRARO/TNARO | Aroids | Plant/TR*ARO/*.for |\n| N-Wheat | WHAPS | APSIM wheat | Plant/WHAPS/*.for |\n| Teff | TFAPS/TFCER | Teff | Plant/TFAPS/*.for |\n| Sunflower | SUOIL | Sunflower | Plant/SUOIL/*.for |\n\nSources: [Plant/plant.for:80-105](), [Plant/plant.for:373-727]()\n\n## Plant Module Interface\n\nThe PLANT subroutine serves as the main entry point for all crop models, providing a standardized interface between the main simulation control and the specific crop models.\n\n### Key Input-Output Variables\n\n```mermaid\ngraph LR\n    subgraph \"Input variables\"\n        CONTROL[\"CONTROL\u003cbr\u003eSimulation control\"]\n        ISWITCH[\"ISWITCH\u003cbr\u003eSimulation switches\"]\n        WEATHER[\"WEATHER\u003cbr\u003eEnvironmental data\"]\n        SOILPROP[\"SOILPROP\u003cbr\u003eSoil properties\"]\n        SW[\"SW\u003cbr\u003eSoil water\"]\n        ST[\"ST\u003cbr\u003eSoil temperature\"]\n        NH4[\"NH4\u003cbr\u003eAmmonium\"]\n        NO3[\"NO3\u003cbr\u003eNitrate\"]\n        SPi_AVAIL[\"SPi_AVAIL\u003cbr\u003eAvailable P\"]\n    end\n    \n    subgraph \"PLANT Module\"\n        PLANT[\"PLANT\u003cbr\u003eMain interface\"]\n    end\n    \n    subgraph \"Output variables\"\n        RLV[\"RLV\u003cbr\u003eRoot length density\"]\n        CANHT[\"CANHT\u003cbr\u003eCanopy height\"]\n        XLAI[\"XLAI\u003cbr\u003eLeaf area index\"]\n        NSTRES[\"NSTRES\u003cbr\u003eN stress factor\"]\n        PSTRES1[\"PSTRES1\u003cbr\u003eP stress factor\"]\n        HARVRES[\"HARVRES\u003cbr\u003eHarvest residue\"]\n        SENESCE[\"SENESCE\u003cbr\u003eSenesced material\"]\n        MDATE[\"MDATE\u003cbr\u003eMaturity date\"]\n        STGDOY[\"STGDOY\u003cbr\u003eStage dates\"]\n    end\n    \n    CONTROL --\u003e PLANT\n    ISWITCH --\u003e PLANT\n    WEATHER --\u003e PLANT\n    SOILPROP --\u003e PLANT\n    SW --\u003e PLANT\n    ST --\u003e PLANT\n    NH4 --\u003e PLANT\n    NO3 --\u003e PLANT\n    SPi_AVAIL --\u003e PLANT\n    \n    PLANT --\u003e RLV\n    PLANT --\u003e CANHT\n    PLANT --\u003e XLAI\n    PLANT --\u003e NSTRES\n    PLANT --\u003e PSTRES1\n    PLANT --\u003e HARVRES\n    PLANT --\u003e SENESCE\n    PLANT --\u003e MDATE\n    PLANT --\u003e STGDOY\n```\n\nSources: [Plant/plant.for:64-74](), [Plant/plant.for:191-201]()\n\n## CROPGRO Model Structure\n\nThe CROPGRO model is a generic process-based model adapted for multiple crops including legumes, cotton, and vegetables. It simulates physiological processes including photosynthesis, respiration, biomass accumulation and partitioning, phenology, and yield formation.\n\n### CROPGRO Process Flow\n\n```mermaid\ngraph TB\n    CROPGRO[\"CROPGRO\u003cbr\u003e(Main routine)\"] --\u003e PHENOL[\"PHENOL\u003cbr\u003e(Phenology)\"]\n    CROPGRO --\u003e PHOTO[\"PHOTO\u003cbr\u003e(Photosynthesis)\"]\n    CROPGRO --\u003e VEGGR[\"VEGGR\u003cbr\u003e(Vegetative growth)\"]\n    CROPGRO --\u003e ROOTS[\"ROOTS\u003cbr\u003e(Root growth)\"]\n    CROPGRO --\u003e PODS[\"PODS\u003cbr\u003e(Reproductive growth)\"]\n    CROPGRO --\u003e DEMAND[\"DEMAND\u003cbr\u003e(C \u0026 N requirements)\"]\n    CROPGRO --\u003e GROW[\"GROW\u003cbr\u003e(Biomass integration)\"]\n    CROPGRO --\u003e NUPTAK[\"NUPTAK\u003cbr\u003e(N uptake)\"]\n    CROPGRO --\u003e P_CGRO[\"P_CGRO\u003cbr\u003e(P uptake \u0026 stress)\"]\n    CROPGRO --\u003e MOBIL[\"MOBIL\u003cbr\u003e(C \u0026 N mobilization)\"]\n    CROPGRO --\u003e RESPIR[\"RESPIR\u003cbr\u003e(Respiration)\"]\n    CROPGRO --\u003e SENES[\"SENES\u003cbr\u003e(Senescence)\"]\n    \n    PODS --\u003e PODDET[\"PODDET\u003cbr\u003e(Pod detachment)\"]\n    PODS --\u003e FRESHWT[\"FRESHWT\u003cbr\u003e(Fresh produce weight)\"]\n    GROW --\u003e LTGROW[\"LTGROW\u003cbr\u003e(Lint growth - Cotton)\"]\n```\n\nSources: [Plant/CROPGRO/CROPGRO.for:45-60](), [Plant/CROPGRO/CROPGRO.for:377-383](), [Plant/CROPGRO/PODS.for:29-43](), [Plant/CROPGRO/GROW.for:30-60]()\n\n### Major Processes in CROPGRO\n\n#### 1. Phenology\nSimulates developmental stages based on temperature, photoperiod, and genetic parameters:\n- Emergence, first leaf, end of juvenile phase\n- Flowering, pod addition, seed filling\n- Physiological maturity\n\n#### 2. Photosynthesis \u0026 Respiration\n- Daily canopy photosynthesis based on light interception, temperature, water stress\n- Maintenance and growth respiration\n\n#### 3. Growth \u0026 Partitioning\n- Biomass partitioning to leaves, stems, roots, and reproductive parts\n- Vegetative growth during early stages\n- Reproductive growth with pods/fruits and seeds\n- Special components for specific crops (e.g., lint for cotton)\n\n#### 4. Pods and Seeds\nSimulates the formation, growth, and abscission of reproductive components:\n- Flowering\n- Pod/fruit set\n- Seed development\n- Fresh weight calculations for vegetable crops\n\n#### 5. Environmental Stresses\nSimulates effects of stresses on crop processes:\n- Water stress (SWFAC, TURFAC)\n- Nitrogen stress (NSTRES)\n- Phosphorus stress (PSTRES1, PSTRES2)\n- Temperature stress (high and low)\n\nSources: [Plant/CROPGRO/CROPGRO.for:377-383](), [Plant/CROPGRO/GROW.for:123-136](), [Plant/CROPGRO/PODS.for:94-282](), [Plant/CROPGRO/FreshWt.for:21-96]()\n\n### Cotton-Specific Components\n\nFor cotton, CROPGRO has been extended with special components including:\n\n1. Lint growth simulation (LTGROW)\n2. Fresh weight calculations (FRESHWT)\n3. Percent lint parameter (PCTLT) defined in cotton ecotype file\n\nThe lint growth is calculated based on seed growth rate, modified by temperature, water stress, and nitrogen stress.\n\nSources: [Plant/CROPGRO/LTGROW.for:1-37](), [Data/Genotype/COGRO048.ECO:43-44]()\n\n## CERES Model Structure\n\nCERES (Crop Environment Resource Synthesis) models are a family of crop models primarily for cereal crops. These models share a common conceptual structure but with crop-specific implementations.\n\n### Common CERES Model Components\n\n```mermaid\ngraph TB\n    CERES[\"CERES Model\u003cbr\u003e(Main routine)\"] --\u003e PHENOL[\"Phenology\u003cbr\u003e(Growth stages)\"]\n    CERES --\u003e PHOTOSYN[\"Photosynthesis\u003cbr\u003e(Radiation use efficiency)\"]\n    CERES --\u003e LAI[\"Leaf Area\u003cbr\u003e(Expansion \u0026 senescence)\"]\n    CERES --\u003e PARTITIONING[\"Assimilate Partitioning\u003cbr\u003e(Organs)\"]\n    CERES --\u003e ROOTGROWTH[\"Root Growth\u003cbr\u003e(Distribution)\"]\n    CERES --\u003e SOILWATER[\"Soil Water\u003cbr\u003e(Uptake)\"]\n    CERES --\u003e NUPTAKE[\"N Uptake\u003cbr\u003e(Demand \u0026 supply)\"]\n    CERES --\u003e GRAINFILL[\"Grain Filling\u003cbr\u003e(Yield formation)\"]\n```\n\nSources: [Plant/plant.for:482-547]()\n\n### Key Differences Between CERES and CROPGRO\n\n| Feature | CERES Models | CROPGRO Models |\n|---------|--------------|----------------|\n| Photosynthesis | Radiation use efficiency approach | Hedgerow light interception with leaf-level photosynthesis |\n| Carbon Balance | Simpler carbon accounting | Detailed carbon and nitrogen balance |\n| Phenology | Growth stages based primarily on thermal time | Complex function of temperature and photoperiod |\n| Crop Types | Primarily cereals (maize, wheat, rice) | Diverse crops (legumes, cotton, vegetables) |\n| Stress Effects | Empirical modifiers to growth | Process-level impacts on photosynthesis and allocation |\n| Soil Layers | Root distribution affects water/nutrient uptake | Similar approach but with nitrogen fixation for legumes |\n\nSources: [Plant/plant.for:482-547](), [Plant/CROPGRO/CROPGRO.for:377-410]()\n\n## Integration with System Components\n\nPlant models interact with other DSSAT-CSM components through standardized interfaces.\n\n### System Integration\n\n```mermaid\ngraph TD\n    CSM[\"CSM\u003cbr\u003e(Main program)\"] --\u003e LAND[\"LAND\u003cbr\u003e(Land unit)\"]\n    LAND --\u003e WEATHR[\"WEATHR\u003cbr\u003e(Weather data)\"]\n    LAND --\u003e SOIL[\"SOIL\u003cbr\u003e(Soil processes)\"]\n    LAND --\u003e PLANT[\"PLANT\u003cbr\u003e(Plant processes)\"]\n    LAND --\u003e MGMTOPS[\"MGMTOPS\u003cbr\u003e(Management operations)\"]\n    LAND --\u003e SPAM[\"SPAM\u003cbr\u003e(Soil-Plant-Atmosphere)\"]\n    \n    PLANT \u003c--\u003e SOIL\n    PLANT \u003c--\u003e SPAM\n    PLANT \u003c--\u003e MGMTOPS\n    PLANT \u003c--\u003e WEATHR\n    \n    SPAM \u003c--\u003e SOIL\n```\n\nSources: [CSM_Main/CSM.for:423-425](), [CSM_Main/LAND.for:424-485]()\n\n### Key Integration Points\n\n1. **With Soil Module**:\n   - Plant supplies root distribution (RLV)\n   - Plant receives soil water and nutrient status\n   - Plant returns N and P uptake values\n   - Senescence components returned to soil organic matter\n\n2. **With SPAM Module (Soil-Plant-Atmosphere)**:\n   - Canopy variables affect energy balance\n   - Water and nutrient stress factors calculated\n   - Potential and actual transpiration determined\n\n3. **With Management Module**:\n   - Planting information initializes crop\n   - Fertilizer applications affect soil nutrients\n   - Irrigation affects soil water balance\n   - Harvest operations determine crop termination\n\nSources: [CSM_Main/LAND.for:234-273](), [SPAM/SPAM.for:314-423](), [Soil/SOIL.for:36-98]()\n\n## Plant Model Outputs\n\nDSSAT plant models produce a comprehensive set of outputs describing crop growth, development, and yield formation.\n\n### Growth Outputs\n\nThe plant models generate daily outputs of growth variables including:\n- Leaf area index (LAI)\n- Biomass by plant component (leaf, stem, root, reproductive)\n- Canopy height\n- Plant nitrogen status\n- Stress factors\n\nExample output variables from PlantGro.OUT:\n\n| Variable | Description | Units |\n|----------|-------------|-------|\n| LAID | Leaf area index | m²/m² |\n| LWAD | Leaf weight | kg/ha |\n| SWAD | Stem weight | kg/ha |\n| RWAD | Root weight | kg/ha |\n| GWAD | Grain weight | kg/ha |\n| CWAD | Canopy weight | kg/ha |\n\nSources: [Plant/CROPGRO/Opgrow.for:169-197]()\n\n### Development Outputs\n\nKey phenological stages are tracked and output, including:\n- Emergence date\n- First flower date\n- First pod/grain date\n- Physiological maturity date\n- Harvest maturity date\n\nThese stages are stored in the STGDOY array and output to Summary.OUT.\n\n### Stress Outputs\n\nMultiple stress factors are calculated and output:\n- Water stress (SWFAC, TURFAC)\n- Nitrogen stress (NSTRES)\n- Phosphorus stress (PSTRES1, PSTRES2)\n- Potassium stress (KSTRES)\n\nThese stress factors affect different processes including photosynthesis, growth, and partitioning.\n\n### Special Case: Cotton Model \n\nFor cotton, additional outputs include:\n- Lint yield (LINTW)\n- Percent lint (PCTLT)\n- Boll count and weight\n\nSources: [Plant/CROPGRO/Opgrow.for:173-174](), [Data/Genotype/COGRO048.ECO:43-44]()\n\n## Initialization and Parameter Files\n\nPlant models are initialized with parameters from several types of files:\n\n### Parameter Files Structure\n\n```mermaid\ngraph TD\n    PLANT[\"PLANT\u003cbr\u003e(Plant module)\"] --\u003e SPECIES[\"Species files\u003cbr\u003e(*.SPE)\"]\n    PLANT --\u003e CULTIVAR[\"Cultivar files\u003cbr\u003e(*.CUL)\"]\n    PLANT --\u003e ECOTYPE[\"Ecotype files\u003cbr\u003e(*.ECO)\"]\n    \n    SPECIES --\u003e CULTIVAR\n    ECOTYPE --\u003e CULTIVAR\n    \n    subgraph \"Example Cotton Files\"\n        COGRO048_SPE[\"COGRO048.SPE\u003cbr\u003e(Cotton species parameters)\"]\n        COGRO048_CUL[\"COGRO048.CUL\u003cbr\u003e(Cotton cultivar parameters)\"]\n        COGRO048_ECO[\"COGRO048.ECO\u003cbr\u003e(Cotton ecotype parameters)\"]\n    end\n    \n    SPECIES --\u003e COGRO048_SPE\n    CULTIVAR --\u003e COGRO048_CUL\n    ECOTYPE --\u003e COGRO048_ECO\n```\n\nSources: [InputModule/input_sub.for:82-98](), [Data/Genotype/COGRO048.SPE:1-39](), [Data/Genotype/COGRO048.ECO:1-44]()\n\n### Parameter Types\n\n1. **Species Parameters** (SPE files):\n   - Photosynthesis parameters\n   - Respiration coefficients\n   - Carbon and nitrogen composition of plant tissues\n   - Temperature response functions\n\n2. **Ecotype Parameters** (ECO files):\n   - Growth and development traits shared by groups of cultivars\n   - Photoperiod sensitivity\n   - Temperature adaptation parameters\n   - For cotton: Percent lint (PCTLT)\n\n3. **Cultivar Parameters** (CUL files):\n   - Specific cultivar traits \n   - Photoperiod sensitivity\n   - Thermal time requirements\n   - Growth parameters\n\nSources: [Data/Genotype/COGRO048.SPE:1-39](), [Data/Genotype/COGRO048.ECO:1-44]()\n\n## Conclusion\n\nThe plant models in DSSAT-CSM provide process-based simulation of crop growth, development, and yield formation. They integrate with soil, weather, and management components to simulate crop responses to environment and management. The modular structure allows different crop models to operate within a common framework, sharing interfaces while implementing crop-specific processes.\n\nThe two main model families, CROPGRO and CERES, cover a wide range of crops with CROPGRO handling more diverse crops (legumes, cotton, vegetables) and CERES primarily focused on cereals. Special components like fresh weight calculations and lint growth for cotton extend the models for specific crop requirements.\n\nThrough standardized interfaces, plant models interact with other system components, receiving environmental inputs and providing growth outputs while responding to management operations."])</script><script>self.__next_f.push([1,"24:T3f8b,"])</script><script>self.__next_f.push([1,"# CROPGRO Model\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [Data/Genotype/COGRO048.ECO](Data/Genotype/COGRO048.ECO)\n- [Data/Genotype/COGRO048.SPE](Data/Genotype/COGRO048.SPE)\n- [InputModule/COMIBS.blk](InputModule/COMIBS.blk)\n- [InputModule/SEHARV.for](InputModule/SEHARV.for)\n- [Management/AUTHAR.for](Management/AUTHAR.for)\n- [Plant/CROPGRO/FreshWt.for](Plant/CROPGRO/FreshWt.for)\n- [Plant/CROPGRO/GROW.for](Plant/CROPGRO/GROW.for)\n- [Plant/CROPGRO/LTGROW.for](Plant/CROPGRO/LTGROW.for)\n- [Plant/CROPGRO/Opgrow.for](Plant/CROPGRO/Opgrow.for)\n- [Plant/CROPGRO/PODS.for](Plant/CROPGRO/PODS.for)\n\n\u003c/details\u003e\n\n\n\nThe CROPGRO Model is a process-based crop growth simulation module within the DSSAT-CSM (Decision Support System for Agrotechnology Transfer - Cropping System Model) framework. It provides mechanistic simulation of crop growth, development, yield formation, and associated physiological processes for grain legumes and other crops. CROPGRO is designed with a generic structure that allows for simulation of different crops through species and cultivar-specific parameter files.\n\n## Model Overview and Architecture\n\nCROPGRO simulates daily crop growth by calculating photosynthesis, respiration, carbon and nitrogen allocation, tissue growth, leaf development, reproductive development, and yield components. The model operates on a daily time step and responds to environmental factors including weather, soil conditions, management practices, and genetic characteristics.\n\n```mermaid\ngraph TD\n    subgraph \"DSSAT-CSM Framework\"\n        CSM[\"CSM Main Controller\"]\n        LAND[\"LAND Module\"]\n        PLANT[\"PLANT Module\"]\n        SOIL[\"SOIL Module\"]\n        WEATHER[\"WEATHER Module\"]\n    end\n    \n    subgraph \"CROPGRO Model\"\n        GROW[\"GROW\\nIntegrates growth variables\"]\n        PODS[\"PODS\\nSimulates pod and seed formation\"]\n        PHONOL[\"PHENOLOGY\\nDevelopmental stages\"]\n        PHOTOSYN[\"PHOTOSYNTHESIS\\nCarbon assimilation\"]\n        FRESHWT[\"FRESHWT\\nFresh weight calculations\"]\n        LTGROW[\"LTGROW\\nLint growth for cotton\"]\n    end\n    \n    CSM --\u003e LAND\n    LAND --\u003e PLANT\n    PLANT --\u003e CROPGRO\n    CROPGRO --\u003e GROW\n    CROPGRO --\u003e PODS\n    CROPGRO --\u003e PHONOL\n    CROPGRO --\u003e PHOTOSYN\n    PODS --\u003e FRESHWT\n    PODS --\u003e LTGROW\n    \n    subgraph \"Input Data\"\n        SPECIES[\"Species Files (.SPE)\"]\n        ECOTYPE[\"Ecotype Files (.ECO)\"]\n        CULTIVAR[\"Cultivar Files (.CUL)\"]\n        WEATHER_DATA[\"Weather Data\"]\n        SOIL_DATA[\"Soil Data\"]\n        MGMT[\"Management Data\"]\n    end\n    \n    SPECIES --\u003e CROPGRO\n    ECOTYPE --\u003e CROPGRO\n    CULTIVAR --\u003e CROPGRO\n    WEATHER_DATA --\u003e WEATHER\n    SOIL_DATA --\u003e SOIL\n    MGMT --\u003e CSM\n    \n    subgraph \"Output\"\n        OPGROW[\"OPGROW\\nDaily growth outputs\"]\n        HARVEST[\"Harvest results\"]\n    end\n    \n    CROPGRO --\u003e OPGROW\n    CROPGRO --\u003e HARVEST\n```\n\nSources: [Plant/CROPGRO/GROW.for:30-60](), [Plant/CROPGRO/PODS.for:19-44](), [Plant/CROPGRO/FreshWt.for:1-19](), [Plant/CROPGRO/LTGROW.for:1-11]()\n\n## Key Components and Processes\n\n### Growth Integration \n\nThe `GROW` subroutine is the central component responsible for integrating all growth-related variables. It manages the daily mass balance for carbon and nitrogen, including:\n\n- Photosynthate production and allocation\n- Respiration\n- Tissue growth (leaves, stems, roots, pods, seeds)\n- Carbon and nitrogen partitioning among plant organs\n- Senescence\n- Growth stress responses\n\nThe growth integration tracks state variables that represent different plant tissues and their composition, updating them for each simulation day.\n\n```mermaid\nflowchart TD\n    subgraph \"GROW Integration\"\n        PG[\"Photosynthesis\\nCarbohydrate production\"]\n        RESPIRATION[\"Respiration\\nMaintenance \u0026 growth\"]\n        PARTITION[\"Partitioning\\nC \u0026 N allocation to tissues\"]\n        STRESS[\"Stress Effects\\nWater, N, temperature\"]\n        SENESCENCE[\"Senescence\\nTissue aging\"]\n    end\n    \n    PG --\u003e CARBOHYDRATES[\"Carbohydrate Pool\"]\n    CARBOHYDRATES --\u003e RESPIRATION\n    CARBOHYDRATES --\u003e PARTITION\n    STRESS --\u003e PG\n    STRESS --\u003e PARTITION\n    PARTITION --\u003e TISSUES[\"Tissue Growth\\nWTLF, STMWT, RTWT, PODWT, SDWT\"]\n    PARTITION --\u003e SENESCENCE\n    SENESCENCE --\u003e TISSUES\n    \n    TISSUES --\u003e PLANT_STATE[\"Plant State Variables\\nLAI, Biomass, N content\"]\n```\n\nSources: [Plant/CROPGRO/GROW.for:60-180](), [Plant/CROPGRO/GROW.for:477-494]()\n\n### Pod and Seed Development \n\nThe `PODS` subroutine simulates reproductive development, including:\n\n- Flower formation\n- Pod set and development\n- Seed initiation and growth\n- Shell (pod wall) growth\n- Assimilate competition between vegetative and reproductive structures\n\nThis module calculates seed number, pod number, and their associated growth rates based on assimilate availability, temperature, and stress factors.\n\n```mermaid\nflowchart TD\n    subgraph \"PODS Module\"\n        FLOWER[\"Flower Formation\"]\n        PODSET[\"Pod Setting\"]\n        SEED_INIT[\"Seed Initiation\"]\n        SEED_GROWTH[\"Seed Growth\"]\n        SHELL_GROWTH[\"Shell Growth\"]\n    end\n    \n    FLOWER --\u003e PODSET\n    PODSET --\u003e SEED_INIT\n    SEED_INIT --\u003e SEED_GROWTH\n    PODSET --\u003e SHELL_GROWTH\n    \n    ASSIMILATES[\"Assimilate Supply\"] --\u003e SEED_GROWTH\n    ASSIMILATES --\u003e SHELL_GROWTH\n    \n    TEMP[\"Temperature\"] --\u003e PODSET\n    TEMP --\u003e SEED_GROWTH\n    TEMP --\u003e SHELL_GROWTH\n    \n    STRESS[\"Stress Factors\\nWater, N, P\"] --\u003e PODSET\n    STRESS --\u003e SEED_GROWTH\n    STRESS --\u003e SHELL_GROWTH\n    \n    SHELL_GROWTH --\u003e SHELL[\"Shell Weight\\n(WTSHE)\"]\n    SEED_GROWTH --\u003e SEED[\"Seed Weight\\n(WTSD)\"]\n    PODSET --\u003e POD_NUMBER[\"Pod Number\\n(PODNO)\"]\n    SEED_INIT --\u003e SEED_NUMBER[\"Seed Number\\n(SEEDNO)\"]\n```\n\nSources: [Plant/CROPGRO/PODS.for:29-44](), [Plant/CROPGRO/PODS.for:477-585]()\n\n### Fresh Weight Calculation\n\nThe `FRESHWT` subroutine computes fresh weight of fruits (pods) based on dry matter content, which is especially important for crops harvested fresh like vegetables. It supports:\n\n- Fresh weight calculation for different crops (tomato, green bean, bell pepper, strawberry, cucumber)\n- Management of moisture content in harvested products\n- Multi-harvest functionality for crops requiring sequential harvests\n- Quality classification for marketable produce (especially for snap beans)\n\nThe module tracks cohorts of pods of different ages and calculates their fresh weight based on their dry weight and age-dependent dry matter concentration.\n\n```mermaid\nflowchart TD\n    subgraph \"FRESHWT Module\"\n        DRY_WT[\"Dry Pod Weight\\n(WTSD, WTSHE)\"]\n        POD_AGE[\"Pod Age\"]\n        DM_CONC[\"Dry Matter Concentration\\nCrop \u0026 age dependent\"]\n        FRESH_WT[\"Fresh Weight Calculation\"]\n        MULTI_HAR[\"Multi-Harvest Management\"]\n    end\n    \n    DRY_WT --\u003e FRESH_WT\n    POD_AGE --\u003e DM_CONC\n    DM_CONC --\u003e FRESH_WT\n    FRESH_WT --\u003e OUTPUTS[\"Fresh Weight Outputs\\n- Total fresh weight\\n- Per cohort fresh weight\\n- Quality classes\"]\n    \n    HARVEST_CRITERIA[\"Harvest Criteria\\n(XMAGE - min age for harvest)\"] --\u003e MULTI_HAR\n    MULTI_HAR --\u003e HARVESTED[\"Harvested Fresh Weight\\n(HPODWT, HFPOW)\"]\n    FRESH_WT --\u003e MULTI_HAR\n```\n\nSources: [Plant/CROPGRO/FreshWt.for:21-102](), [Plant/CROPGRO/FreshWt.for:374-389]()\n\n### Lint Growth for Cotton\n\nFor cotton, the `LTGROW` subroutine calculates lint production, which is the economically valuable fiber. This specialized module:\n\n- Calculates lint growth rate based on seed growth rate\n- Adjusts lint production based on temperature, water stress, and nitrogen stress\n- Uses crop-specific parameters for lint percentage\n\n```mermaid\nflowchart LR\n    subgraph \"LTGROW Module\"\n        WSDDOT[\"Seed Growth Rate\\n(WSDDOT)\"]\n        PCTLT[\"Lint Percentage\\n(PCTLT from ECO file)\"]\n        ADJUSTMENTS[\"Stress Adjustments\\n- Temperature\\n- Water stress\\n- N stress\"]\n    end\n    \n    WSDDOT --\u003e LINT_CALC[\"Lint Growth Calculation\"]\n    PCTLT --\u003e LINT_CALC\n    ADJUSTMENTS --\u003e LINT_CALC\n    LINT_CALC --\u003e LTDOT[\"Lint Growth Rate\\n(LTDOT)\"]\n    LTDOT --\u003e LINTW[\"Cumulative Lint Weight\\n(LINTW)\"]\n```\n\nSources: [Plant/CROPGRO/LTGROW.for:9-44](), [Plant/CROPGRO/LTGROW.for:130-136]()\n\n### Harvest Management\n\nThe harvest functionality in CROPGRO includes:\n\n- Automatic harvest determination through the `AUTHAR` subroutine\n- Multiple harvest options for crops requiring sequential harvests\n- Harvest based on maturity, fixed dates, or crop conditions\n- Calculation of harvested components (seeds, pods, byproducts)\n\n```mermaid\nflowchart TD\n    subgraph \"Harvest Management\"\n        HARVEST_CRITERIA[\"Harvest Criteria\\n- Maturity\\n- Fixed date\\n- Days after planting\\n- Growth stage\\n- Auto-conditions\"]\n        HARVEST_WINDOW[\"Harvest Window\\n(HDLAY, HLATE)\"]\n        HARVEST_PERCENT[\"Harvest Percentages\\n(HPC, HBPC)\"]\n    end\n    \n    HARVEST_CRITERIA --\u003e AUTHAR[\"AUTHAR Decision\"]\n    HARVEST_WINDOW --\u003e AUTHAR\n    FIELD_CONDITIONS[\"Field Conditions\\n- Soil moisture\"] --\u003e AUTHAR\n    \n    AUTHAR --\u003e HARVEST_DATE[\"Harvest Date\\n(HDATE, YREND)\"]\n    HARVEST_DATE --\u003e HARVEST_PROCESS[\"Harvest Process\"]\n    HARVEST_PERCENT --\u003e HARVEST_PROCESS\n    \n    HARVEST_PROCESS --\u003e YIELD[\"Harvested Components\\n- Product (e.g., seeds)\\n- Byproduct (e.g., straw)\"]\n```\n\nSources: [Management/AUTHAR.for:19-169](), [InputModule/SEHARV.for:29-144]()\n\n## Input Parameters and Configuration\n\nCROPGRO requires detailed input parameters to simulate specific crops. These parameters are organized in several file types:\n\n### Species Parameters (.SPE files)\n\nThe species file contains parameters that define the physiological characteristics of a crop species, including:\n\n- Photosynthesis parameters\n- Respiration parameters\n- Plant composition values \n- Carbon and nitrogen mining parameters\n- Vegetative partitioning parameters\n- Leaf growth parameters\n- Root parameters\n- Seed and shell growth parameters\n- Phenology parameters\n- Canopy height and width parameters\n\nThese parameters are fundamental to the physiological processes being simulated and are generally consistent across cultivars of the same species.\n\nExample from Cotton Species file:\n```\n*PHOTOSYNTHESIS PARAMETERS\n 58.00 66.00  0.80  0.10                   PARMAX,PHTMAX,KCAN,KC_SLOPE\n```\n\nSources: [Data/Genotype/COGRO048.SPE:1-16](), [Data/Genotype/COGRO048.SPE:96-108]()\n\n### Ecotype Parameters (.ECO files)\n\nEcotype parameters define how cultivars of a species are adapted to different environments. Key parameters include:\n\n- Maturity group\n- Temperature adaptation\n- Developmental timing parameters\n- Growth habit characteristics\n- Lint percentage (for cotton)\n\nExample from Cotton Ecotype file:\n```\n@ECO#  ECONAME.......... MG TM THVAR PL-EM EM-V1 V1-JU JU-R0  PM06  PM09 LNGSH R7-R8 FL-VS TRIFL RWDTH RHGHT R1PPO OPTBI SLOBI PCTLT\n```\n\nSources: [Data/Genotype/COGRO048.ECO:1-17](), [Data/Genotype/COGRO048.ECO:45-50]()\n\n## Outputs and Reporting\n\nThe `OPGROW` subroutine handles the generation of output files for daily growth variables. Key output files include:\n\n1. **PlantGro.OUT**: Contains daily plant growth variables such as leaf area index (LAI), biomass components, and development stages.\n\n2. **PlantN.OUT**: Reports daily nitrogen-related variables in plant tissues.\n\n3. **PlantC.OUT**: Documents carbon-related processes and variables.\n\n4. **FreshWt.OUT**: For crops that use the fresh weight module, reports fresh weight-related outputs.\n\nThe output frequency is controlled by the `FROP` parameter, which specifies how often (in days) outputs are written.\n\n```mermaid\nflowchart LR\n    subgraph \"Output Generation\"\n        GROWTH_VARS[\"Growth Variables\\n- Biomass components\\n- LAI\\n- Development stages\"]\n        N_VARS[\"Nitrogen Variables\\n- N content by tissue\\n- N uptake\\n- N fixation\"]\n        C_VARS[\"Carbon Variables\\n- Photosynthesis\\n- Respiration\\n- C balance\"]\n        FRESH_VARS[\"Fresh Weight Variables\\n- Fresh pod weight\\n- Dry matter content\\n- Quality classes\"]\n    end\n    \n    GROWTH_VARS --\u003e PLANTGRO[\"PlantGro.OUT\"]\n    N_VARS --\u003e PLANTN[\"PlantN.OUT\"]\n    C_VARS --\u003e PLANTC[\"PlantC.OUT\"]\n    FRESH_VARS --\u003e FRESHWT_OUT[\"FreshWt.OUT\"]\n    \n    subgraph \"Output Control\"\n        FROP[\"Output Frequency\\n(FROP)\"]\n        IDETG[\"Detail Level\\n(IDETG)\"]\n        ISWFWT[\"Fresh Weight Switch\\n(ISWFWT)\"]\n    end\n    \n    FROP --\u003e PLANTGRO\n    FROP --\u003e PLANTN\n    FROP --\u003e PLANTC\n    FROP --\u003e FRESHWT_OUT\n    IDETG --\u003e PLANTGRO\n    IDETG --\u003e PLANTN\n    IDETG --\u003e PLANTC\n    ISWFWT --\u003e FRESHWT_OUT\n```\n\nSources: [Plant/CROPGRO/Opgrow.for:19-28](), [Plant/CROPGRO/Opgrow.for:126-177](), [Plant/CROPGRO/FreshWt.for:125-177]()\n\n## Integration with DSSAT-CSM\n\nCROPGRO is fully integrated with the DSSAT-CSM framework, interacting with other modules such as:\n\n- **SOIL Module**: Provides soil water and nutrient status\n- **WEATHER Module**: Supplies daily weather data\n- **LAND Module**: Coordinates overall simulation\n- **Management Module**: Provides information about planting, fertilization, irrigation, and harvest operations\n\nThe integration allows CROPGRO to respond to environmental factors and management practices while providing feedback to the overall cropping system model.\n\n```mermaid\nflowchart TD\n    subgraph \"DSSAT-CSM Integration\"\n        CSM[\"CSM Controller\"]\n        WEATHER[\"WEATHER Module\\nSupplies climate data\"]\n        SOIL[\"SOIL Module\\nWater, nutrients, temperature\"]\n        MANAGEMENT[\"MANAGEMENT Module\\nPlanting, fertilization, irrigation, harvest\"]\n    end\n    \n    CSM --\u003e CROPGRO[\"CROPGRO Model\"]\n    WEATHER --\u003e CROPGRO\n    SOIL --\u003e CROPGRO\n    MANAGEMENT --\u003e CROPGRO\n    \n    subgraph \"Data Exchange\"\n        WEATHER_DATA[\"Temperature, radiation, rainfall, etc.\"]\n        SOIL_DATA[\"Soil water, N, P status, root growth\"]\n        MGMT_DATA[\"Planting details, fertilizer, irrigation, harvest criteria\"]\n        PLANT_DATA[\"Growth, yield, water and nutrient uptake\"]\n    end\n    \n    WEATHER --\u003e WEATHER_DATA\n    WEATHER_DATA --\u003e CROPGRO\n    SOIL --\u003e SOIL_DATA\n    SOIL_DATA --\u003e CROPGRO\n    MANAGEMENT --\u003e MGMT_DATA\n    MGMT_DATA --\u003e CROPGRO\n    CROPGRO --\u003e PLANT_DATA\n    PLANT_DATA --\u003e SOIL\n```\n\nSources: [Management/AUTHAR.for:23-57](), [Plant/CROPGRO/GROW.for:31-45]()\n\n## Adaptable Crop Framework\n\nCROPGRO is structured to simulate multiple crops through a standardized framework with crop-specific parameters. The supported crops include:\n\n- Grain legumes (soybean, peanut, dry bean, etc.)\n- Cotton\n- Vegetables (tomato, bell pepper, cabbage, etc.)\n- Forages\n\nThe adaptation to different crops is achieved through:\n\n1. Common process algorithms in the core CROPGRO module\n2. Species-specific parameters (.SPE files)\n3. Ecotype parameters (.ECO files)\n4. Cultivar parameters (.CUL files)\n5. Specialized subroutines for crop-specific processes (e.g., LTGROW for cotton lint)\n\nThis design allows for efficient model development and maintenance while providing crop-specific accuracy.\n\n```mermaid\nflowchart TD\n    subgraph \"CROPGRO Framework\"\n        CORE[\"Core Processes\\n- Growth\\n- Development\\n- Photosynthesis\\n- Respiration\"]\n        SPECIAL[\"Specialized Processes\\n- FreshWt\\n- LTGROW\"]\n    end\n    \n    PARAMS[\"Crop Parameters\\n.SPE, .ECO, .CUL files\"] --\u003e CORE\n    PARAMS --\u003e SPECIAL\n    \n    subgraph \"Supported Crops\"\n        LEGUMES[\"Grain Legumes\\n- Soybean\\n- Peanut\\n- Dry Bean\"]\n        COTTON[\"Cotton\"]\n        VEGETABLES[\"Vegetables\\n- Tomato\\n- Bell Pepper\\n- Cabbage\"]\n        FORAGES[\"Forages\"]\n    end\n    \n    CORE --\u003e LEGUMES\n    CORE --\u003e COTTON\n    CORE --\u003e VEGETABLES\n    CORE --\u003e FORAGES\n    SPECIAL --\u003e COTTON\n    SPECIAL --\u003e VEGETABLES\n```\n\nSources: [Plant/CROPGRO/FreshWt.for:100-112](), [Plant/CROPGRO/LTGROW.for:9-15]()\n\n## Summary\n\nThe CROPGRO Model is a powerful, process-based simulation tool within the DSSAT-CSM framework that provides mechanistic representation of crop growth, development, and yield formation. Its modular design and parameterization approach enable simulation of multiple crops while maintaining physiological accuracy. Key components include growth integration, reproductive development, specialized processes for fresh harvest crops and cotton, and comprehensive output reporting. The model's integration with other DSSAT modules allows for realistic simulation of crop responses to environmental factors and management practices."])</script><script>self.__next_f.push([1,"25:T57a0,"])</script><script>self.__next_f.push([1,"# CERES Models\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [Plant/CERES-Wheat_Barley/CER_First_Trans_m.for](Plant/CERES-Wheat_Barley/CER_First_Trans_m.for)\n- [Plant/CERES-Wheat_Barley/CER_Growth.for](Plant/CERES-Wheat_Barley/CER_Growth.for)\n- [Plant/CERES-Wheat_Barley/CER_Init.for](Plant/CERES-Wheat_Barley/CER_Init.for)\n- [Plant/CERES-Wheat_Barley/CER_Init_VarInit.for](Plant/CERES-Wheat_Barley/CER_Init_VarInit.for)\n- [Plant/CERES-Wheat_Barley/CER_Integrate.for](Plant/CERES-Wheat_Barley/CER_Integrate.for)\n- [Plant/CERES-Wheat_Barley/CER_Output.for](Plant/CERES-Wheat_Barley/CER_Output.for)\n- [Plant/CERES-Wheat_Barley/CSCER.for](Plant/CERES-Wheat_Barley/CSCER.for)\n- [Plant/CERES-Wheat_Barley/CSCERES_Interface.for](Plant/CERES-Wheat_Barley/CSCERES_Interface.for)\n\n\u003c/details\u003e\n\n\n\nThe CERES (Crop Environment Resource Synthesis) models are crop growth simulation models in DSSAT-CSM that simulate the development, growth, and yield of cereal crops including wheat, maize, barley, and rice. These process-based models track the daily development of the crop from planting through maturity, simulating key physiological processes in response to environmental factors, management decisions, and genetic characteristics.\n\nCERES models operate within the larger DSSAT-CSM framework where they interact with soil, weather, and management modules. For generic plant modeling architecture, see [PLANT Module](#3.3).\n\n## Overview of CERES Models\n\nCERES models simulate cereal crop development and growth through a set of interconnected physiological processes. These models were originally developed in the 1980s and have been continuously refined. The current implementation in DSSAT-CSM is derived from the original CERES models but redesigned to fit within the modular structure of the DSSAT framework.\n\nThe CERES models in DSSAT-CSM simulate:\n\n- Phenological development through clearly defined growth stages\n- Carbon assimilation via photosynthesis\n- Biomass partitioning among plant organs\n- Environmental stress responses (water, temperature, nitrogen)\n- Soil water extraction and nitrogen uptake\n- Yield formation and final harvest components\n\nSources: [Plant/CERES-Wheat_Barley/CSCER.for:1-26](), [Plant/CERES-Wheat_Barley/CER_Init.for:98-104]()\n\n## Model Structure\n\nThe CERES models follow a modular design that aligns with the DSSAT-CSM framework, with separation between rate calculations, state integrations, and input/output operations.\n\n```mermaid\ngraph TD\n    subgraph \"CERES Model Structure\"\n        CSCER[\"CSCER (Main Routine)\"]\n        CSCER --\u003e CER_Init[\"CER_Init (Initialization)\"]\n        CSCER --\u003e CER_Growth[\"CER_Growth (Rate Calculation)\"]\n        CSCER --\u003e CER_Integrate[\"CER_Integrate (State Update)\"]\n        CSCER --\u003e CER_Output[\"CER_Output (Results Reporting)\"]\n        \n        CER_Growth --\u003e CSTRANS[\"CSTRANS (Transpiration)\"]\n        CER_Growth --\u003e CSROOTWU[\"CSROOTWU (Root Water Uptake)\"]\n        \n        CER_Integrate --\u003e Cslayers[\"Cslayers (Leaf Distribution)\"]\n    end\n    \n    CSCERES_Interface[\"CSCERES_Interface\"] --\u003e CSCER\n    \n    CER_First_Trans_m[\"CER_First_Trans_m (Shared Variables)\"] -.-\u003e CSCER\n    CER_First_Trans_m -.-\u003e CER_Init\n    CER_First_Trans_m -.-\u003e CER_Growth\n    CER_First_Trans_m -.-\u003e CER_Integrate\n    CER_First_Trans_m -.-\u003e CER_Output\n```\n\nThe model is organized around a main routine (`CSCER`) that coordinates four major processes based on the simulation phase:\n\n1. **Initialization** (`CER_Init`) - Sets up variables and reads crop parameters\n2. **Rate Calculation** (`CER_Growth`) - Computes daily rates of change for all processes\n3. **Integration** (`CER_Integrate`) - Updates state variables based on calculated rates\n4. **Output** (`CER_Output`) - Generates reports and simulation results\n\nThe `CER_First_Trans_m` module provides shared variable definitions across all components.\n\nSources: [Plant/CERES-Wheat_Barley/CSCER.for:46-345](), [Plant/CERES-Wheat_Barley/CER_First_Trans_m.for:1-150]()\n\n## Simulation Flow\n\nThe CERES models operate within the DSSAT-CSM time-step framework, processing each day of the simulation in a sequential manner.\n\n```mermaid\nflowchart TD\n    Start[\"Start Simulation\"] --\u003e RUNINIT[\"RUNINIT: Initialize Run\"]\n    RUNINIT --\u003e SEASINIT[\"SEASINIT: Initialize Season\"]\n    \n    subgraph \"Daily Time Loop\"\n        RATE[\"RATE: Calculate Process Rates\"]\n        INTEGRATE[\"INTEGR: Update State Variables\"]\n        OUTPUT[\"OUTPUT: Generate Output\"]\n    end\n    \n    SEASINIT --\u003e RATE\n    RATE --\u003e INTEGRATE\n    INTEGRATE --\u003e TimeCheck{\"End of Season?\"}\n    TimeCheck -- \"No\" --\u003e RATE\n    TimeCheck -- \"Yes\" --\u003e SEASEND[\"SEASEND: End of Season\"]\n    \n    OUTPUT -.-\u003e TimeCheck\n    SEASEND --\u003e End[\"End Simulation\"]\n    \n    subgraph \"Rate Processes\"\n        RATE --\u003e Weather[\"Process Weather Inputs\"]\n        Weather --\u003e Temperature[\"Calculate Thermal Time\"]\n        Temperature --\u003e Photosynthesis[\"Calculate Photosynthesis\"]\n        Photosynthesis --\u003e PartitioningRates[\"Calculate Partitioning Rates\"]\n        PartitioningRates --\u003e WaterStress[\"Calculate Water Stress\"]\n        WaterStress --\u003e NitrogenStress[\"Calculate Nitrogen Stress\"]\n        NitrogenStress --\u003e GrowthRates[\"Calculate Growth Rates\"]\n    end\n    \n    subgraph \"Integration Processes\"\n        INTEGRATE --\u003e UpdateBiomass[\"Update Biomass Components\"]\n        UpdateBiomass --\u003e UpdateLeaf[\"Update Leaf Area\"]\n        UpdateLeaf --\u003e UpdateRoots[\"Update Root Growth\"]\n        UpdateRoots --\u003e UpdatePhenology[\"Update Development Stage\"]\n        UpdatePhenology --\u003e UpdateStresses[\"Update Stress Factors\"]\n    end\n```\n\nEach day, the model:\n\n1. Takes daily weather inputs\n2. Computes thermal time accumulation\n3. Calculates photosynthesis based on radiation, CO2, water status, and leaf area\n4. Determines biomass partitioning based on development stage\n5. Computes water and nitrogen stresses\n6. Updates crop state variables including biomass, leaf area, and phenological stage\n\nSources: [Plant/CERES-Wheat_Barley/CSCER.for:264-339](), [Plant/CERES-Wheat_Barley/CER_Growth.for:35-544]()\n\n## Phenological Development\n\nCERES models use a detailed staging system to track crop development from planting through maturity. The development is primarily driven by temperature (thermal time) and modified by photoperiod and vernalization when appropriate.\n\n```mermaid\ngraph LR\n    subgraph \"Developmental Stages\"\n        direction LR\n        S[\"Planting\\nISTAGE=8\"] --\u003e G[\"Germination\\nISTAGE=9\"]\n        G --\u003e E[\"Emergence\\nISTAGE=1\"]\n        E --\u003e DR[\"Double Ridge\\nISTAGE=2\"]\n        DR --\u003e ELG[\"End Leaf Growth\\nISTAGE=3\"]\n        ELG --\u003e ESG[\"End Spike Growth\\nISTAGE=4\"]\n        ESG --\u003e ELP[\"End Lag Phase\\nISTAGE=5\"]\n        ELP --\u003e PM[\"Physiological Maturity\\nISTAGE=6\"]\n        PM --\u003e H[\"Harvest\\nISTAGE=7\"]\n    end\n    \n    TT[\"Thermal Time\\n(Temperature)\"] -.-\u003e E\n    TT -.-\u003e DR\n    TT -.-\u003e ELG\n    TT -.-\u003e ESG\n    TT -.-\u003e ELP\n    TT -.-\u003e PM\n    \n    PD[\"Photoperiod\"] -.-\u003e DR\n    VF[\"Vernalization\"] -.-\u003e DR\n```\n\nThe model tracks both internal staging (`ISTAGE`) and a continuous development variable (`XSTAGE`):\n\n| ISTAGE | XSTAGE | Description | Zadoks Equivalent |\n|--------|--------|-------------|-------------------|\n| 8 | 8.0 | Planting | 00 |\n| 9 | 9.0-10.0 | Germination | 05 |\n| 1 | 1.0-2.0 | Emergence to Double Ridge | 10-30 |\n| 2 | 2.0-3.0 | Terminal Spikelet | ~31 |\n| 3 | 3.0-4.0 | End Leaf Growth | 40 |\n| 4 | 4.0-5.0 | End Spike Growth | 50 |\n| 5 | 5.0-6.0 | End Lag Phase (Grain Fill) | 71-80 |\n| 6 | 6.0-7.0 | Physiological Maturity | 90 |\n| 7 | \u003c8.0 | Harvest Maturity | 92 |\n\nThe model also maintains a mapping to the Zadoks decimal scale of cereal development (`ZSTAGE`) for standardized reporting.\n\nSources: [Plant/CERES-Wheat_Barley/CER_Integrate.for:457-493](), [Plant/CERES-Wheat_Barley/CER_Growth.for:250-300]()\n\n## Growth Processes\n\n### Photosynthesis and Biomass Accumulation\n\nCERES models simulate daily photosynthesis as a function of intercepted photosynthetically active radiation (PAR), radiation use efficiency, and various limiting factors:\n\n```mermaid\nflowchart TD\n    PAR[\"PAR = SRAD × PARADFAC\"] --\u003e PARI[\"PAR Interception\\nPARI = 1-exp(-KCAN×LAI)\"]\n    PARI --\u003e PCARB[\"Potential Photosynthesis\\nPCARB = PARUV × PAR/PLTPOP × PARI\"]\n    PCARB --\u003e CARBO[\"Actual Photosynthesis\\nCARBO = PCARB × CO2FP × TFP × WFP × NFP × RSFP × SLPF\"]\n    \n    TFP[\"Temperature Factor\"] --\u003e CARBO\n    WFP[\"Water Stress\"] --\u003e CARBO\n    NFP[\"Nitrogen Stress\"] --\u003e CARBO\n    CO2FP[\"CO2 Factor\"] --\u003e CARBO\n    RSFP[\"Reserves Status\"] --\u003e CARBO\n    SLPF[\"Soil Fertility Factor\"] --\u003e CARBO\n```\n\nThe limiting factors include:\n- `TFP`: Temperature effect on photosynthesis\n- `WFP`: Water stress factor\n- `NFP`: Nitrogen stress factor\n- `CO2FP`: CO2 concentration effect\n- `RSFP`: Reserve status effect on photosynthesis\n- `SLPF`: Soil fertility factor\n\nSources: [Plant/CERES-Wheat_Barley/CER_Growth.for:526-543]()\n\n### Biomass Partitioning\n\nAssimilated carbon is partitioned between different plant organs based on development stage and environmental factors:\n\n```mermaid\nflowchart TD\n    CARBO[\"Daily Photosynthesis\\n(CARBO)\"] --\u003e PTF[\"Partitioning Factor\\n(PTF)\"]\n    \n    PTF --\u003e |\"PTF\"| RTWTG[\"Root Growth\\n(RTWTG)\"]\n    PTF --\u003e |\"1-PTF\"| TopsBiomass[\"Tops Biomass\"]\n    \n    TopsBiomass --\u003e |\"LFFR\"| GROLF[\"Leaf Growth\\n(GROLF)\"]\n    TopsBiomass --\u003e |\"STFR\"| GROST[\"Stem Growth\\n(GROST)\"]\n    TopsBiomass --\u003e |\"Post-anthesis\"| GROGR[\"Grain Growth\\n(GROGR)\"]\n    TopsBiomass --\u003e |\"RSFR\"| GRORS[\"Reserves\\n(GRORS)\"]\n    \n    DevStage[\"Development Stage\\n(XSTAGE)\"] --\u003e PTF\n    DevStage --\u003e LFFR[\"Leaf Fraction\\n(LFFR)\"]\n    DevStage --\u003e STFR[\"Stem Fraction\\n(STFR)\"]\n    DevStage --\u003e RSFR[\"Reserves Fraction\\n(RSFR)\"]\n```\n\nKey partitioning parameters include:\n- `PTF`: Proportion to tops (above-ground biomass)\n- `LFFR`: Leaf fraction of tops growth\n- `STFR`: Stem fraction of tops growth \n- `RSFR`: Reserves fraction of tops growth\n\nSources: [Plant/CERES-Wheat_Barley/CER_Growth.for:504-523](), [Plant/CERES-Wheat_Barley/CER_Integrate.for:42-93]()\n\n### Leaf Area Development\n\nLeaf area development follows a phyllochron approach, where new leaves emerge based on thermal time accumulation:\n\n```mermaid\nflowchart TD\n    TT[\"Thermal Time\\n(TT)\"] --\u003e PHINT[\"Phyllochron Interval\\n(PHINT)\"]\n    PHINT --\u003e LNUMSD[\"Leaf Number\\n(LNUMSD)\"]\n    LNUMSD --\u003e LNUMSG[\"Integer Leaf Stage\\n(LNUMSG)\"]\n    \n    LNUMSG --\u003e PLAG[\"Potential Leaf Growth\\n(PLAG)\"]\n    LAPOT[\"Genetic Potential\\n(LAPOT)\"] --\u003e PLAG\n    \n    PLAG --\u003e |\"Modified by\"| PLAGT[\"Actual Leaf Growth\\n(PLAGT)\"]\n    \n    WFG[\"Water Stress\\n(WFG)\"] --\u003e PLAGT\n    NFG[\"Nitrogen Stress\\n(NFG)\"] --\u003e PLAGT\n    TFG[\"Temperature Factor\\n(TFG)\"] --\u003e PLAGT\n    \n    PLAGT --\u003e PLA[\"Plant Leaf Area\\n(PLA)\"]\n    PLAS[\"Leaf Senescence\\n(PLAS)\"] --\u003e |\"Subtract\"| LAI[\"Leaf Area Index\\n(LAI)\"]\n    PLA --\u003e |\"Multiply by plant population\"| LAI\n```\n\nThe leaf area development process includes:\n1. Tracking thermal time to determine leaf emergence\n2. Generating potential leaf area based on genetic parameters\n3. Adjusting actual leaf growth based on environmental stresses\n4. Converting plant leaf area to leaf area index (LAI)\n5. Accounting for leaf senescence due to age, stress, and shading\n\nSources: [Plant/CERES-Wheat_Barley/CER_Integrate.for:136-161](), [Plant/CERES-Wheat_Barley/CER_Growth.for:654-718]()\n\n### Root Growth and Water Uptake\n\nRoot growth is simulated both in terms of depth penetration and root length density distribution through the soil profile:\n\n```mermaid\nflowchart TD\n    RTWTG[\"Root Growth\\n(RTWTG)\"] --\u003e RootDepth[\"Root Depth Growth\\n(RTDEPG)\"] \n    RTWTG --\u003e RootDensity[\"Root Length Density\\n(RLV)\"]\n    \n    RootDepth --\u003e RTDEP[\"Root Depth\\n(RTDEP)\"]\n    RootDensity --\u003e RTWTL[\"Root Weight by Layer\\n(RTWTL)\"]\n    \n    RTWTL --\u003e WaterUptake[\"Water Uptake\\n(UH2O)\"]\n    RLV[\"Root Length Density\\n(RLV)\"] --\u003e WaterUptake\n    SoilWater[\"Soil Water Content\\n(SW)\"] --\u003e WaterUptake\n    SWC[\"Soil Water Characteristics\\n(LL, DUL)\"] --\u003e WaterUptake\n    \n    WaterUptake --\u003e TRWUP[\"Total Root Water Uptake\\n(TRWUP)\"]\n    PotentialTranspiration[\"Potential Transpiration\\n(EOP)\"] --\u003e WFPS[\"Water Stress Factors\\n(WFP, WFG)\"]\n    TRWUP --\u003e WFPS\n```\n\nThe root water uptake calculation:\n1. Determines potential water extraction based on root density and soil moisture\n2. Calculates actual uptake based on plant demand (potential transpiration)\n3. Computes water stress factors that affect various plant processes\n\nSources: [Plant/CERES-Wheat_Barley/CSROOTWU.for:515-648](), [Plant/CERES-Wheat_Barley/CER_Growth.for:785-869]()\n\n### Grain Development and Yield Formation\n\nGrain development involves setting grain number and then filling those grains:\n\n```mermaid\nflowchart TD\n    ISTAGE4[\"Begin Anthesis\\n(ISTAGE=4)\"] --\u003e GrainNumber[\"Determine Grain Number\\n(GRNUM)\"]\n    BiomassAvailable[\"Available Biomass\\n(STWT, LFWT)\"] --\u003e GrainNumber\n    G1CWT[\"Genetic Coefficient\\n(G1CWT)\"] --\u003e GrainNumber\n    \n    GrainNumber --\u003e GROGRP[\"Potential Grain Growth\\n(GROGRP)\"]\n    G2KWT[\"Genetic Coefficient\\n(G2KWT)\"] --\u003e GROGRP\n    TT[\"Thermal Time\\n(TT)\"] --\u003e GROGRP\n    \n    GROGRP --\u003e |\"Limited by\"| GROGR[\"Actual Grain Growth\\n(GROGR)\"]\n    Carbohydrates[\"Available Carbohydrates\\n(CARBO, RSWT)\"] --\u003e GROGR\n    TFG[\"Temperature Factor\\n(TFG)\"] --\u003e GROGR\n    \n    GROGR --\u003e GRWT[\"Grain Weight\\n(GRWT)\"]\n    GrainNumber --\u003e |\"÷\"| GWUD[\"Grain Weight per Unit\\n(GWUD)\"]\n    GRWT --\u003e |\"÷\"| GWUD\n    \n    GRWT --\u003e |\"× Plant Population\"| GWAD[\"Grain Weight Area\\n(GWAD)\"]\n```\n\nKey yield components include:\n- `GRNUM`: Number of grains per plant\n- `GRWT`: Grain weight per plant\n- `GWUD`: Weight per grain (mg)\n- `GWAD`: Grain yield per unit area (kg/ha)\n\nSources: [Plant/CERES-Wheat_Barley/CER_Growth.for:943-1002](), [Plant/CERES-Wheat_Barley/CER_Integrate.for:56-119]()\n\n## Environmental Stress Effects\n\nThe CERES models implement multiple stress factors that modify growth and development:\n\n### Water Stress\n\nWater stress is calculated as the ratio of actual root water uptake to potential transpiration:\n\n```mermaid\nflowchart LR\n    TRWUP[\"Root Water Uptake\\n(TRWUP)\"] --\u003e |\"÷\"| WUPR[\"Water Uptake Ratio\\n(WUPR)\"]\n    EOP[\"Potential Transpiration\\n(EOP)\"] --\u003e |\"÷\"| WUPR\n    \n    WUPR --\u003e WFG[\"Growth Stress\\n(WFG)\"]\n    WUPR --\u003e WFP[\"Photosynthesis Stress\\n(WFP)\"]\n    WUPR --\u003e WFT[\"Tillering Stress\\n(WFT)\"]\n    \n    WFG --\u003e Growth[\"Affects Leaf Growth\\nBiomass Partitioning\"]\n    WFP --\u003e Photosynthesis[\"Affects Photosynthesis\"]\n    WFT --\u003e Tillering[\"Affects Tillering\"]\n```\n\nEach stress type has different threshold levels (WFGU, WFPU, WFTU) that determine when stress begins to affect the associated process.\n\nSources: [Plant/CERES-Wheat_Barley/CER_Growth.for:363-375]()\n\n### Nitrogen Stress\n\nNitrogen stress is based on the nitrogen concentration in leaves relative to critical and minimum concentrations:\n\n```mermaid\nflowchart LR\n    LANC[\"Leaf N Concentration\\n(LANC)\"] --\u003e NFG[\"Growth N Stress\\n(NFG)\"]\n    LANC --\u003e NFP[\"Photosynthesis N Stress\\n(NFP)\"]\n    LANC --\u003e NFT[\"Tillering N Stress\\n(NFT)\"]\n    \n    LMNC[\"Minimum N Concentration\\n(LMNC)\"] --\u003e NFG\n    LMNC --\u003e NFP\n    LMNC --\u003e NFT\n    \n    LCNC[\"Critical N Concentration\\n(LCNC)\"] --\u003e NFG\n    LCNC --\u003e NFP\n    LCNC --\u003e NFT\n    \n    NFG --\u003e Growth[\"Affects Growth Processes\"]\n    NFP --\u003e Photosynthesis[\"Affects Photosynthesis\"]\n    NFT --\u003e Tillering[\"Affects Tillering\"]\n```\n\nThe stress is calculated as: `NFx = (LANC-LMNCx)/(LCNCx-LMNCx)` where x represents the specific process affected (G=growth, P=photosynthesis, T=tillering).\n\nSources: [Plant/CERES-Wheat_Barley/CER_Growth.for:376-394]()\n\n### Temperature Effects\n\nTemperature affects multiple processes through response functions tailored to each process:\n\n```mermaid\nflowchart TD\n    TMEAN[\"Mean Temperature\\n(TMEAN)\"] --\u003e TT[\"Thermal Time\\n(TT)\"]\n    TMEAN --\u003e TFP[\"Photosynthesis Factor\\n(TFP)\"]\n    TMEAN --\u003e TFG[\"Growth Factor\\n(TFG)\"]\n    TMEAN --\u003e TFV[\"Vernalization Factor\\n(TFV)\"]\n    TMEAN --\u003e TFGF[\"Grain Fill Factor\\n(TFGF)\"]\n    \n    TT --\u003e Development[\"Development Rate\"]\n    TFP --\u003e Photosynthesis[\"Photosynthesis Rate\"]\n    TFG --\u003e Growth[\"Growth Processes\"]\n    TFV --\u003e Vernalization[\"Vernalization Rate\"]\n    TFGF --\u003e GrainFill[\"Grain Filling Rate\"]\n```\n\nEach temperature response function (TFP, TFG, etc.) has its own cardinal temperatures that define the optimal range and limits for that process.\n\nSources: [Plant/CERES-Wheat_Barley/CER_Growth.for:191-254](), [Plant/CERES-Wheat_Barley/CER_Growth.for:293-331]()\n\n## Implementation Details\n\nThe CERES models are implemented in Fortran with a modular structure that follows the DSSAT-CSM framework design principles.\n\n### Code Organization\n\nThe main components are organized in separate Fortran files:\n\n| File | Purpose |\n|------|---------|\n| CSCER.for | Main model routine that coordinates other components |\n| CER_Init.for | Initialization routines for model variables |\n| CER_Growth.for | Rate calculations for all growth processes |\n| CER_Integrate.for | State variable updates based on calculated rates |\n| CER_Output.for | Output handling and results reporting |\n| CER_First_Trans_m.for | Module for shared variable definitions |\n| CSCERES_Interface.for | Interface between CERES and DSSAT-CSM |\n\nSources: [Plant/CERES-Wheat_Barley/CSCER.for:1-40]()\n\n### Data Flow\n\nThe model operates through a sequence of subroutine calls in each time step:\n\n```mermaid\nsequenceDiagram\n    participant DSSAT as DSSAT-CSM\n    participant Interface as CSCERES_Interface\n    participant CSCER as CSCER\n    participant Init as CER_Init\n    participant Growth as CER_Growth\n    participant Integrate as CER_Integrate\n    participant Output as CER_Output\n    \n    DSSAT-\u003e\u003eInterface: Call with DYNAMIC=RUNINIT\n    Interface-\u003e\u003eCSCER: Pass control variables\n    CSCER-\u003e\u003eInit: Initialize variables\n    \n    DSSAT-\u003e\u003eInterface: Call with DYNAMIC=SEASINIT\n    Interface-\u003e\u003eCSCER: Set initial conditions\n    CSCER-\u003e\u003eInit: Read parameters\n    \n    loop Daily Time Step\n        DSSAT-\u003e\u003eInterface: Call with DYNAMIC=RATE\n        Interface-\u003e\u003eCSCER: Pass daily weather\n        CSCER-\u003e\u003eGrowth: Calculate process rates\n        \n        DSSAT-\u003e\u003eInterface: Call with DYNAMIC=INTEGR\n        Interface-\u003e\u003eCSCER: Integrate daily changes\n        CSCER-\u003e\u003eIntegrate: Update state variables\n        \n        DSSAT-\u003e\u003eInterface: Call with DYNAMIC=OUTPUT\n        Interface-\u003e\u003eCSCER: Generate outputs\n        CSCER-\u003e\u003eOutput: Write results\n    end\n    \n    DSSAT-\u003e\u003eInterface: Call with DYNAMIC=SEASEND\n    Interface-\u003e\u003eCSCER: Wrap up season\n    CSCER-\u003e\u003eOutput: Final season reports\n```\n\nSources: [Plant/CERES-Wheat_Barley/CSCERES_Interface.for:10-173](), [Plant/CERES-Wheat_Barley/CSCER.for:264-339]()\n\n## Input Requirements and Parameters\n\nThe CERES models require several types of inputs:\n\n### Environmental Inputs\n- Daily weather data (solar radiation, temperature, rainfall, etc.)\n- Soil profile characteristics\n- Initial soil water and nitrogen conditions\n\n### Management Inputs\n- Planting date and method\n- Plant population and row spacing\n- Fertilizer applications\n- Irrigation events\n\n### Genetic Coefficients\n\nCultivar-specific parameters that define growth and development characteristics:\n\n| Parameter | Description |\n|-----------|-------------|\n| P1V | Vernalization sensitivity coefficient |\n| P1D | Photoperiod sensitivity coefficient |\n| P5 | Grain filling duration coefficient |\n| G1 | Kernel number coefficient |\n| G2 | Kernel weight coefficient |\n| G3 | Stem weight coefficient |\n| PHINT | Phyllochron interval (°C·d) |\n\nSources: [Plant/CERES-Wheat_Barley/CER_Init.for:408-450]()\n\n## Output Variables\n\nThe model generates multiple types of outputs:\n\n### Plant Growth Variables\n- Leaf area index (LAI)\n- Biomass components (leaf, stem, root, grain)\n- Developmental stage\n- Growth and stress factors\n\n### Harvest Components\n- Grain yield\n- Grain number\n- Individual grain weight\n- Harvest index\n\n### Resource Use Metrics\n- Water use and water use efficiency\n- Nitrogen uptake and nitrogen use efficiency\n\nThe outputs are written to standardized files that can be processed by the DSSAT-CSM analysis tools:\n\n| Output File | Contents |\n|-------------|----------|\n| PlantGro.OUT | Daily plant growth variables |\n| PlantN.OUT | Daily nitrogen-related variables |\n| PlantGr2.OUT | Additional growth variables |\n| PlantGrf.OUT | Growth factor variables |\n| Evaluate.OUT | Summary of experimental vs. simulated values |\n\nSources: [Plant/CERES-Wheat_Barley/CER_Output.for:49-173](), [Plant/CERES-Wheat_Barley/CER_Output.for:147-242]()\n\n## DSSAT-CSM Integration\n\nThe CERES models interface with the larger DSSAT-CSM framework through a standardized interface:\n\n```mermaid\nflowchart TD\n    subgraph \"DSSAT-CSM\"\n        LAND[\"LAND Module\"]\n        SOIL[\"SOIL Module\"]\n        WEATHER[\"WEATHER Module\"]\n        MGMT[\"Management Module\"]\n    end\n    \n    subgraph \"CERES Interface\"\n        CSCERES_Interface[\"CSCERES_Interface\"]\n    end\n    \n    subgraph \"CERES Models\"\n        CSCER[\"CSCER (Main Model)\"]\n    end\n    \n    LAND \u003c--\u003e CSCERES_Interface\n    SOIL \u003c--\u003e CSCERES_Interface\n    WEATHER \u003c--\u003e CSCERES_Interface\n    MGMT \u003c--\u003e CSCERES_Interface\n    \n    CSCERES_Interface \u003c--\u003e CSCER\n    \n    Weather[\"Weather Data\\n- SRAD\\n- TMAX, TMIN\\n- RAIN\\n- CO2\"] --\u003e CSCERES_Interface\n    Soil[\"Soil Data\\n- DLAYR\\n- LL, DUL\\n- NO3, NH4\"] --\u003e CSCERES_Interface\n    Management[\"Management\\n- YRPLT\\n- HARVFRAC\"] --\u003e CSCERES_Interface\n    \n    CSCERES_Interface --\u003e Outputs[\"Outputs\\n- LAI\\n- CANHT\\n- MDATE\\n- RLV\"]\n```\n\nThe interface module (`CSCERES_Interface`) handles:\n- Converting DSSAT-CSM variable formats to CERES format\n- Passing weather, soil, and management data to CERES\n- Returning crop growth variables to DSSAT-CSM\n- Managing the simulation control flow \n\nSources: [Plant/CERES-Wheat_Barley/CSCERES_Interface.for:10-173]()\n\n## Historical Context and Modifications\n\nThe CERES models in DSSAT-CSM are derived from the original CERES models but have been modified to integrate with the modular structure of DSSAT. Key changes include:\n\n1. Adoption of a modular design with separate rate and integration processes\n2. Elimination of embedded variables in the code\n3. External parameter files for coefficients\n4. Standardized input/output interfaces\n5. Integration with soil water, nitrogen, and weather modules\n\nSources: [Plant/CERES-Wheat_Barley/CSCER.for:1-26]()"])</script><script>self.__next_f.push([1,"26:T33ed,"])</script><script>self.__next_f.push([1,"# FORAGE Model\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [Data/MODEL.ERR](Data/MODEL.ERR)\n- [Management/MgmtOps.for](Management/MgmtOps.for)\n- [Plant/FORAGE/for_harv.for](Plant/FORAGE/for_harv.for)\n- [Plant/FORAGE/for_hres_cgro.for](Plant/FORAGE/for_hres_cgro.for)\n- [Plant/FORAGE/for_ipprog.for](Plant/FORAGE/for_ipprog.for)\n- [Plant/FORAGE/forage.for](Plant/FORAGE/forage.for)\n- [Plant/Generic-Pest/IPPROG.for](Plant/Generic-Pest/IPPROG.for)\n\n\u003c/details\u003e\n\n\n\nThe FORAGE Model is a specialized plant growth simulation module for perennial forage crops within the DSSAT Cropping System Model (DSSAT-CSM). It simulates the growth, development, and yield of forage species with emphasis on multiple harvests, regrowth dynamics, and management operations specific to forage production systems. This model extends the DSSAT framework to address the unique characteristics of perennial forage crops, including dormancy periods, repeated harvesting, and multi-year stand persistence.\n\n## Purpose and Scope\n\nThe FORAGE Model simulates:\n- Perennial forage crop growth and development\n- Multiple harvests within a growing season\n- Plant regrowth after cutting events\n- Seasonal dormancy for winter survival\n- Forage quality characteristics\n- Long-term stand dynamics\n\nFor information about other crop models in DSSAT, see the [CROPGRO Model](#4.1) for grain legumes and vegetables or the [CERES Models](#4.2) for cereals.\n\n## Model Architecture\n\nThe FORAGE Model is structured similarly to other crop models in DSSAT but with specialized components for handling perennial forage characteristics. It follows a modular approach with interconnected components responsible for different aspects of the growth and development process.\n\n```mermaid\ngraph TD\n    FORAGE[\"FORAGE Main Module\"] --\u003e PHENOL[\"Phenology Module\u003cbr\u003e(FOR_PHENOL)\"]\n    FORAGE --\u003e PHOTO[\"Photosynthesis Module\u003cbr\u003e(FOR_PHOTO)\"]\n    FORAGE --\u003e VEGGR[\"Vegetative Growth\u003cbr\u003e(FOR_VEGGR)\"]\n    FORAGE --\u003e HARVEST[\"Harvest Module\u003cbr\u003e(FORAGE_HARVEST)\"]\n    FORAGE --\u003e DORMANCY[\"Dormancy Module\u003cbr\u003e(FOR_DORMANCY)\"]\n    FORAGE --\u003e ROOTS[\"Root Module\u003cbr\u003e(FOR_ROOTS)\"]\n    FORAGE --\u003e SENMOB[\"Senescence \u0026 Mobilization\u003cbr\u003e(FOR_SENMOB)\"]\n    \n    PHENOL --\u003e STAGES[\"Development Stages\"]\n    PHOTO --\u003e ASSIM[\"Carbon Assimilation\"]\n    VEGGR --\u003e BIOMASS[\"Biomass Accumulation\"]\n    HARVEST --\u003e CUTTING[\"Biomass Removal\"]\n    DORMANCY --\u003e DPERIOD[\"Dormancy Periods\"]\n    ROOTS --\u003e RDEPTH[\"Root Growth \u0026 Distribution\"]\n    SENMOB --\u003e REMOB[\"Nutrient Remobilization\"]\n    \n    VEGGR --\u003e STORAGE[\"Storage Organ Growth\"]\n    STORAGE -.-\u003e REGROWTH[\"Regrowth Resources\"]\n    REGROWTH -.-\u003e VEGGR\n```\n\nSources: [Plant/FORAGE/forage.for:33-42](), [Plant/FORAGE/forage.for:360-374]()\n\n## Forage Growth and Harvest Cycle\n\nUnlike annual crops, perennial forages follow a cyclical pattern of growth, harvest, regrowth, and dormancy. The FORAGE Model captures this cycle with special emphasis on post-harvest regrowth dynamics.\n\n```mermaid\ngraph TD\n    PLANTING[\"Planting/Establishment\"] --\u003e VEGETATIVE[\"Vegetative Growth\"]\n    VEGETATIVE --\u003e HARVEST1[\"Harvest/Cutting\"]\n    HARVEST1 --\u003e REGROWTH[\"Regrowth\"]\n    REGROWTH --\u003e HARVEST2[\"Subsequent Harvests\"]\n    HARVEST2 --\u003e|Additional harvests| REGROWTH\n    HARVEST2 --\u003e|End of season| DORMANCY[\"Dormancy (Winter)\"]\n    DORMANCY --\u003e|Next Growing Season| SPRING[\"Spring Regrowth\"]\n    SPRING --\u003e VEGETATIVE\n    \n    subgraph \"FORAGE_HARVEST Subroutine\"\n    MOWING[\"Mowing/Cutting\"] --\u003e REMOVAL[\"Biomass Removal\"]\n    REMOVAL --\u003e RESIDUE[\"Residue Management\"]\n    RESIDUE --\u003e RESET[\"Reset Plant State\"]\n    end\n    \n    HARVEST1 -.-\u003e MOWING\n    HARVEST2 -.-\u003e MOWING\n```\n\nSources: [Plant/FORAGE/for_harv.for:1-48](), [Plant/FORAGE/forage.for:241-257]()\n\n## Harvest Management\n\nA unique feature of the FORAGE Model is its sophisticated harvest management system. The model can simulate both scheduled harvests from input files and automatic harvests based on calendar days or growing degree days.\n\n### Harvest Methods\n\nThe FORAGE Model supports several harvest scheduling approaches:\n\n| Harvest Method | Description | Control Variable |\n|----------------|-------------|------------------|\n| File-based | Scheduled harvest dates from MOW file | ATMOW = .FALSE. |\n| Calendar-based | Automatic harvest on fixed day intervals | ATTP = 'W', HMFRQ \u003e 0 |\n| GDD-based | Automatic harvest on accumulated growing degree days | ATTP = 'X', HMGDD \u003e 0 |\n| Smart Calendar | Automatic harvest with smart stubble settings | ATTP = 'Y', HMFRQ \u003e 0 |\n| Smart GDD | Automatic harvest with GDD and smart stubble | ATTP = 'Z', HMGDD \u003e 0 |\n\nSources: [Plant/FORAGE/for_harv.for:251-275](), [Plant/FORAGE/for_harv.for:542-568]()\n\n### Forage Harvest Implementation\n\nThe harvest operation is handled by the `FORAGE_HARVEST` subroutine, which:\n1. Reads harvest instructions from MOW files or automatic settings\n2. Calculates biomass removal based on cutting height and residual biomass settings\n3. Adjusts plant state variables (biomass, LAI, height) after harvest\n4. Updates nitrogen balance and storage pools\n5. Outputs harvest data to FORAGE.OUT file\n\n```mermaid\ngraph TD\n    INPUT[\"Harvest Inputs\"] --\u003e MOWFILE[\"MOW File\u003cbr\u003e(for scheduled harvests)\"]\n    INPUT --\u003e AUTO[\"Automatic Harvest\u003cbr\u003eParameters\"]\n    \n    MOWFILE --\u003e PARAMS[\"Harvest Parameters\"]\n    AUTO --\u003e PARAMS\n    \n    PARAMS --\u003e MOW[\"Biomass to Cut\u003cbr\u003e(MOWC)\"]\n    PARAMS --\u003e STUBBLE[\"Stubble Settings\u003cbr\u003e(HMCUT, RSPLC)\"]\n    \n    MOW --\u003e CALCULATE[\"Calculate Removal\"]\n    STUBBLE --\u003e CALCULATE\n    \n    CALCULATE --\u003e REMOVE[\"Remove Biomass\"]\n    REMOVE --\u003e LEAF[\"Reduce Leaf Mass\u003cbr\u003eand Area\"]\n    REMOVE --\u003e STEM[\"Reduce Stem Mass\"]\n    \n    LEAF --\u003e UPDATE[\"Update Plant State\"]\n    STEM --\u003e UPDATE\n    \n    UPDATE --\u003e OUTPUT[\"Harvest Outputs\"]\n    OUTPUT --\u003e YIELD[\"Harvested Biomass\u003cbr\u003eand Quality\"]\n    OUTPUT --\u003e RESIDUE[\"Residue for\u003cbr\u003eSoil Processes\"]\n```\n\nSources: [Plant/FORAGE/for_harv.for:22-48](), [Plant/FORAGE/for_harv.for:391-534]()\n\n## Automatic Harvest Features\n\nThe FORAGE Model includes an advanced automatic harvest scheduling system that can be controlled through simulation parameters:\n\n### Basic Automatic Harvest\n```\nIF(CUTDAY .EQ. 0 .OR. (MOWGDD .GE. HMGDD .AND. HMGDD .GT. 0)) THEN\n```\n\nWhen calendar days since last harvest (CUTDAY) reaches the target frequency (HMFRQ) or growing degree days (MOWGDD) reaches the target (HMGDD), a harvest operation is triggered.\n\n### Smart Automatic Harvest\nFor more sophisticated management, the model includes algorithms to calculate appropriate harvest amounts based on multiple factors:\n\n```\nMOWC = (TABEX(YFREQ, XFREQ, FREQ, 6) * MOWREF) *\n     \u0026 (TABEX(YCUTHT, XCUTHT, HMCUT*100, 6)) *\n     \u0026 (TABEX(YCHMOW, XCHMOW, topwt, 6))\nRSPLC = (TABEX(YRSREF, XFREQ, FREQ, 6) * RSREF)\n```\n\nThis allows harvest parameters to adjust based on:\n- Cutting frequency (FREQ)\n- Cutting height (HMCUT)\n- Current crop biomass (topwt)\n\nSources: [Plant/FORAGE/for_harv.for:542-568](), [Plant/FORAGE/for_harv.for:252-275]()\n\n## Residue Management\n\nAfter harvest, the model calculates the residue remaining on the field, which affects soil organic matter, nutrient cycling, and future growth. The `FOR_HRES_CGRO` subroutine handles residue calculations:\n\n```mermaid\ngraph TD\n    HARVEST[\"Harvest Event\"] --\u003e RESIDUE[\"Calculate Residues\"]\n    RESIDUE --\u003e ABOVE[\"Aboveground Residue\u003cbr\u003e(leaves, stems)\"]\n    RESIDUE --\u003e BELOW[\"Belowground Residue\u003cbr\u003e(roots, storage organs)\"]\n    \n    ABOVE --\u003e SURFACE[\"Surface Layer\u003cbr\u003eHResWt(0)\"]\n    BELOW --\u003e SOIL[\"Soil Layers\u003cbr\u003eHResWt(1:NL)\"]\n    \n    SURFACE --\u003e COMPOSITION[\"Residue Composition\"]\n    SOIL --\u003e COMPOSITION\n    \n    COMPOSITION --\u003e LIGNIN[\"Lignin Content\u003cbr\u003eHResLig\"]\n    COMPOSITION --\u003e NUTRIENTS[\"Nutrient Content\u003cbr\u003eHResE\"]\n    \n    LIGNIN --\u003e SOM[\"Soil Organic Matter\u003cbr\u003eProcesses\"]\n    NUTRIENTS --\u003e SOM\n```\n\nKey features of residue handling:\n- Surface residues from leaves, stems, and unharvested seeds\n- Belowground residues from roots distributed by layer based on root length density\n- Special handling for storage organ residues in the top soil layer\n- Nutrient content (N, P) calculations for each residue type\n- Integration with soil organic matter dynamics\n\nSources: [Plant/FORAGE/for_hres_cgro.for:17-47](), [Plant/FORAGE/for_hres_cgro.for:73-89](), [Plant/FORAGE/for_hres_cgro.for:155-161]()\n\n## Integration with DSSAT-CSM\n\nThe FORAGE Model is fully integrated with the DSSAT-CSM framework, receiving inputs from and providing outputs to other system modules.\n\n```mermaid\ngraph TD\n    CSM[\"CSM Main\"] --\u003e LAND[\"LAND Module\"]\n    LAND --\u003e SOIL[\"Soil Module\"]\n    LAND --\u003e PLANT[\"Plant Module\"]\n    LAND --\u003e WEATHER[\"Weather Module\"]\n    LAND --\u003e MGMTOPS[\"Management Operations\"]\n    \n    PLANT --\u003e CROPGRO[\"CROPGRO Models\u003cbr\u003e(Grain Legumes)\"]\n    PLANT --\u003e CERES[\"CERES Models\u003cbr\u003e(Cereals)\"]\n    PLANT --\u003e FORAGE[\"FORAGE Model\u003cbr\u003e(Perennial Forages)\"]\n    \n    MGMTOPS --\u003e IRRIG[\"Irrigation\"]\n    MGMTOPS --\u003e FERTIL[\"Fertilization\"]\n    MGMTOPS --\u003e HARVEST[\"Harvest Operations\"]\n    \n    HARVEST --\u003e FORAGE_HARVEST[\"FORAGE_HARVEST\u003cbr\u003eSubroutine\"]\n    FORAGE_HARVEST --\u003e FORAGE\n    \n    FORAGE --\u003e HARVRES[\"Harvest Residue\u003cbr\u003e(FOR_HRES_CGRO)\"]\n    HARVRES --\u003e SOIL\n    \n    SOIL --\u003e FORAGE\n    WEATHER --\u003e FORAGE\n```\n\nKey integration points:\n1. Weather data feeds into phenology, photosynthesis, and GDD calculations for harvest timing\n2. Soil conditions affect water uptake, nitrogen availability, and root growth\n3. Management operations (especially harvesting) directly modify plant state\n4. Harvest residues feed back into soil organic matter and nutrient cycling\n\nSources: [Plant/FORAGE/forage.for:33-42](), [Management/MgmtOps.for:9-26]()\n\n## Model Initialization and Execution\n\nThe FORAGE Model follows the DSSAT modular structure with distinct phases of execution controlled by the DYNAMIC variable:\n\n| Phase | Purpose | Key Actions |\n|-------|---------|-------------|\n| RUNINIT | One-time initialization | Read species parameters, initialize variables |\n| SEASINIT | Season initialization | Reset seasonal counters and state variables |\n| RATE | Daily rate calculations | Calculate growth rates, stress factors |\n| INTEGR | Daily integration | Update state variables, perform harvest if scheduled |\n| OUTPUT | Generate output | Write results to output files |\n| SEASEND | End of season | Calculate final values, prepare for next season |\n\nSources: [Plant/FORAGE/forage.for:356-357](), [Plant/FORAGE/forage.for:722-737]()\n\n## Input Files\n\nThe FORAGE Model uses several specific input files:\n\n1. **Species File (.SPE)** - Contains plant parameters specific to each forage species\n2. **Ecotype File (.ECO)** - Contains parameters for different ecotypes within a species\n3. **Cultivar File (.CUL)** - Contains parameters for specific cultivars\n4. **MOW File (.MOW)** - Contains scheduled harvest dates and parameters\n\nAdditionally, the model uses standard DSSAT input files for:\n- Weather data\n- Soil characteristics\n- Experiment details\n- Management operations\n\nSources: [Plant/FORAGE/for_harv.for:158-188](), [Data/MODEL.ERR:30-101]()\n\n## Output Files\n\nThe main output file specific to the FORAGE Model is FORAGE.OUT, which contains detailed information about each harvest event:\n\n| Variable | Description | Units |\n|----------|-------------|-------|\n| RCWAH | Remaining crop weight after harvest | kg/ha |\n| RLWAH | Remaining leaf weight after harvest | kg/ha |\n| RSWAH | Remaining stem weight after harvest | kg/ha |\n| RSRWH | Remaining storage organ weight after harvest | kg/ha |\n| RRTWH | Remaining root weight after harvest | kg/ha |\n| RLAIH | Remaining leaf area index after harvest | m²/m² |\n| FHWAH | Fresh harvest weight | kg/ha |\n| FHNAH | Nitrogen in harvested material | kg N/ha |\n| FHN%H | Nitrogen concentration in harvested material | % |\n| FHC%H | Carbohydrate concentration in harvested material | % |\n| FHLGH | Lignin concentration in harvested material | % |\n| FHL%H | Leaf percentage in harvested material | % |\n\nSources: [Plant/FORAGE/for_harv.for:485-501](), [Plant/FORAGE/for_harv.for:683-697]()\n\n## Model Limitations and Future Development\n\nCurrent limitations of the FORAGE Model include:\n\n1. Limited validation for certain forage species\n2. Simplified representation of stand aging effects for long-term simulations\n3. Limited representation of competition in mixed forage stands\n4. Ongoing refinement of quality prediction algorithms\n\nFuture development focuses on:\n- Enhanced representation of perennial growth cycles\n- Better modeling of winter injury and stand persistence\n- Improved prediction of forage quality parameters\n- Multi-species forage mixtures simulation\n\nSources: [Plant/FORAGE/forage.for:15-31]()\n\n## Summary\n\nThe FORAGE Model extends the DSSAT framework to address the unique characteristics of perennial forage crops, with specialized components for:\n- Multiple harvest events in a single growing season\n- Regrowth dynamics after cutting\n- Dormancy during winter periods\n- Sophisticated harvest management options\n- Multi-year stand persistence\n\nBy adapting the DSSAT architecture to these specific needs, the FORAGE Model provides a robust tool for simulating forage production systems and evaluating management strategies."])</script><script>self.__next_f.push([1,"27:T29a7,"])</script><script>self.__next_f.push([1,"# CSCER and Other Models\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [Plant/CSYCA-Cassava/YCA_Integ_EndCrop.f90](Plant/CSYCA-Cassava/YCA_Integ_EndCrop.f90)\n- [Plant/CSYCA-Cassava/YCA_Out_Eval.f90](Plant/CSYCA-Cassava/YCA_Out_Eval.f90)\n\n\u003c/details\u003e\n\n\n\n## Purpose and Scope\n\nThis document describes the CSCER (CSM-CERES) model and other additional crop simulation models within the DSSAT-CSM framework that are not covered in the CROPGRO ([4.1](#4.1)), CERES ([4.2](#4.2)), or FORAGE ([4.3](#4.3)) documentation. These models include CSCER (for cereals like barley), CSCRP (for crops like sunflower), and CSCAS (for cassava). The document explains the structure, components, and functioning of these models, as well as how they integrate with the overall DSSAT-CSM system.\n\n## CSCER Model Overview\n\nCSCER is the CSM-CERES-based cereal model in DSSAT-CSM that simulates growth, development, and yield of cereals such as barley. It is derived from the CERES family of models but has been adapted and enhanced to better simulate specific cereal crops.\n\n### Model Structure\n\nCSCER follows the modular structure common to all DSSAT-CSM crop models, with specialized components for cereal crop simulation.\n\n**CSCER Model Components Diagram**\n\n```mermaid\ngraph TD\n    CSCER[\"CSCER Model\"] --\u003e CSCERPHENOLOGY[\"Phenology\"]\n    CSCER --\u003e CSCERCARBON[\"Carbon\\nAssimilation\"]\n    CSCER --\u003e CSCERNITROGEN[\"Nitrogen\\nProcesses\"]\n    CSCER --\u003e CSCERWATER[\"Water\\nBalance\"]\n    CSCER --\u003e CSCERGROWTH[\"Growth\\nProcesses\"]\n    CSCER --\u003e CSCEROUTPUT[\"Output\\nGeneration\"]\n    \n    CSCERPHENOLOGY --\u003e DEVELOPMENT[\"Development\\nStages\"]\n    CSCERPHENOLOGY --\u003e VERNALIZATION[\"Vernalization\"]\n    CSCERPHENOLOGY --\u003e PHOTOPERIOD[\"Photoperiod\\nResponse\"]\n    \n    CSCERCARBON --\u003e PHOTOSYNTHESIS[\"Photosynthesis\"]\n    CSCERCARBON --\u003e RESPIRATION[\"Respiration\"]\n    CSCERCARBON --\u003e PARTITIONING[\"Assimilate\\nPartitioning\"]\n    \n    CSCERNITROGEN --\u003e NUPTAKE[\"N Uptake\"]\n    CSCERNITROGEN --\u003e NPARTITION[\"N Partitioning\"]\n    CSCERNITROGEN --\u003e NSTRESS[\"N Stress\\nFactors\"]\n    \n    CSCERWATER --\u003e TRANSPIRATION[\"Transpiration\"]\n    CSCERWATER --\u003e WATERUPTAKE[\"Water Uptake\"]\n    CSCERWATER --\u003e WATERSTRESS[\"Water Stress\\nFactors\"]\n    \n    CSCERGROWTH --\u003e LEAFGROWTH[\"Leaf Growth\"]\n    CSCERGROWTH --\u003e STEMGROWTH[\"Stem Growth\"]\n    CSCERGROWTH --\u003e ROOTGROWTH[\"Root Growth\"]\n    CSCERGROWTH --\u003e GRAINFILL[\"Grain Fill\"]\n```\n\nSources: Repository structure and module organization\n\n## Cassava Model (CSCAS/CSYCA)\n\nThe CSCAS model (now referred to as CSYCA) is a process-based model for simulating cassava growth, development, and yield.\n\n### Model Structure and Components\n\nThe Cassava model includes specialized components for simulating the unique growth patterns and storage root formation of cassava.\n\n**CSYCA Model Components Diagram**\n\n```mermaid\ngraph TD\n    CSYCA[\"CSYCA Model\"] --\u003e PHENOLOGY[\"Phenology\"]\n    CSYCA --\u003e PHOTOSYN[\"Photosynthesis\"]\n    CSYCA --\u003e PARTITION[\"Partitioning\"]\n    CSYCA --\u003e STORAGE[\"Storage Root\\nFormation\"]\n    CSYCA --\u003e STRESS[\"Stress\\nFactors\"]\n    CSYCA --\u003e OUTPUT[\"Output\\nModules\"]\n    \n    PHENOLOGY --\u003e VEGETATIVE[\"Vegetative\\nGrowth\"]\n    PHENOLOGY --\u003e BRANCHING[\"Branching\"]\n    PHENOLOGY --\u003e MATURE[\"Maturity\"]\n    \n    PHOTOSYN --\u003e LEAFDEV[\"Leaf\\nDevelopment\"]\n    PHOTOSYN --\u003e CANOPY[\"Canopy\\nPhotosynthesis\"]\n    \n    PARTITION --\u003e LEAVES[\"To Leaves\"]\n    PARTITION --\u003e STEMS[\"To Stems\"]\n    PARTITION --\u003e ROOTS[\"To Roots\"]\n    PARTITION --\u003e STORROOTS[\"To Storage\\nRoots\"]\n    \n    STORAGE --\u003e INITIATION[\"Storage Root\\nInitiation\"]\n    STORAGE --\u003e BULKING[\"Storage Root\\nBulking\"]\n    \n    STRESS --\u003e WATERSTRESS[\"Water Stress\"]\n    STRESS --\u003e NSTRESS[\"Nitrogen Stress\"]\n    \n    OUTPUT --\u003e INTEGRATION[\"Integration\"]\n    OUTPUT --\u003e EVALUATION[\"Output\\nEvaluation\"]\n```\n\nSources: [Plant/CSYCA-Cassava/YCA_Integ_EndCrop.f90](), [Plant/CSYCA-Cassava/YCA_Out_Eval.f90]()\n\n### Key Processes\n\n#### End-of-Crop Calculations\n\nThe Cassava model includes specific calculations at the end of the crop cycle to determine final yields and crop characteristics:\n\n1. Water availability is calculated based on soil water content and root depth\n2. Final biomass partitioning is determined for different plant components:\n   - Leaf weight (LFWTM)\n   - Stem weight (STWTM) \n   - Storage root weight (SRWT)\n   - Root weight (RTWTM)\n   - Biomass ratios and indices\n\n3. Final yield components are calculated:\n   - Harvestable weight (HWAM)\n   - Fresh weight (FHWAM)\n   - Harvest index (HIAM)\n\nSource: [Plant/CSYCA-Cassava/YCA_Integ_EndCrop.f90:80-132]()\n\n#### Output Evaluation\n\nThe Cassava model includes comprehensive output evaluation and comparison with measured data:\n\n1. Reads and processes observed data from A-files and T-files\n2. Compares simulated results with measured data\n3. Generates evaluation metrics and statistics\n4. Writes outputs to overview and evaluation files\n\nSource: [Plant/CSYCA-Cassava/YCA_Out_Eval.f90:38-880]()\n\n## Other Crop Models\n\n### CSCRP Model\n\nThe CSCRP model simulates growth, development, and yield of crops such as sunflower and cotton. It shares many components with other DSSAT-CSM models but includes specialized processes for simulating these specific crops.\n\n**CSCRP Key Components**\n\n```mermaid\ngraph TD\n    CSCRP[\"CSCRP Model\"] --\u003e PHENOLOGY[\"Phenology\"]\n    CSCRP --\u003e PHOTOSYN[\"Photosynthesis\"]\n    CSCRP --\u003e PARTITION[\"Partitioning\"]\n    CSCRP --\u003e OILFORM[\"Oil\\nFormation\"]\n    CSCRP --\u003e FIBERDEVEL[\"Fiber\\nDevelopment\"]\n    CSCRP --\u003e OUTPUT[\"Output\\nModules\"]\n    \n    PHENOLOGY --\u003e EMERGENCE[\"Emergence\"]\n    PHENOLOGY --\u003e FLOWERING[\"Flowering\"]\n    PHENOLOGY --\u003e MATURITY[\"Maturity\"]\n    \n    PARTITION --\u003e REPRODUCTIVE[\"To Reproductive\\nOrgans\"]\n    PARTITION --\u003e VEGETATIVE[\"To Vegetative\\nOrgans\"]\n    \n    OILFORM --\u003e INITIATION[\"Oil\\nInitiation\"]\n    OILFORM --\u003e ACCUMULATION[\"Oil\\nAccumulation\"]\n```\n\nSources: Repository structure and module organization\n\n## Integration with DSSAT-CSM Framework\n\nThese specialized crop models are integrated into the larger DSSAT-CSM framework through a standardized interface that allows them to interact with core modules like SOIL, WEATHER, and MANAGEMENT.\n\n**Model Integration Diagram**\n\n```mermaid\ngraph TD\n    CSM[\"CSM Main\"] --\u003e LAND[\"LAND Module\"]\n    LAND --\u003e PLANTMODULE[\"Plant Module\"]\n    LAND --\u003e SOILMODULE[\"Soil Module\"]\n    LAND --\u003e WEATHERMODULE[\"Weather Module\"]\n    \n    PLANTMODULE --\u003e CSCER[\"CSCER\"]\n    PLANTMODULE --\u003e CSYCA[\"CSYCA\\n(Cassava)\"]\n    PLANTMODULE --\u003e CSCRP[\"CSCRP\\n(Sunflower, Cotton)\"]\n    PLANTMODULE --\u003e OTHERMODELS[\"Other Plant\\nModels\"]\n    \n    SOILMODULE --\u003e WATER[\"Soil Water\"]\n    SOILMODULE --\u003e NITROGEN[\"Soil Nitrogen\"]\n    SOILMODULE --\u003e CARBON[\"Soil Carbon\"]\n    \n    CSCER --- INTERFACE1[\"Standard\\nInterface\"]\n    CSYCA --- INTERFACE2[\"Standard\\nInterface\"]\n    CSCRP --- INTERFACE3[\"Standard\\nInterface\"]\n    \n    INTERFACE1 --- PLANTDATA[\"Plant\\nGrowth Data\"]\n    INTERFACE2 --- PLANTDATA\n    INTERFACE3 --- PLANTDATA\n    \n    PLANTDATA --\u003e OUTPUTMODULE[\"Output\\nModule\"]\n    OUTPUTMODULE --\u003e OVERVIEW[\"Overview\\nOutput\"]\n    OUTPUTMODULE --\u003e EVALUATION[\"Evaluation\\nOutput\"]\n    OUTPUTMODULE --\u003e SUMMARY[\"Summary\\nOutput\"]\n```\n\nSources: Repository structure and system architecture\n\n## Common Structure of Model Code\n\nAll these specialized crop models follow a similar code structure, with main model processes organized in subroutines based on growth stages and processes.\n\n**Typical Model Code Structure**\n\n| Module Type | Purpose | Example Files |\n|-------------|---------|---------------|\n| Initialization | Sets up model parameters and initial conditions | `*_INIT.f90` |\n| Rate Calculations | Calculates daily growth rates and state variable changes | `*_RATES.f90` |\n| Integration | Updates state variables based on calculated rates | `*_INTEG.f90` |\n| Output | Generates model outputs and evaluations | `*_OUT.f90`, `*_OUT_EVAL.f90` |\n| Support Functions | Provides specialized calculations for specific processes | `*_OPGROW.f90`, `*_PHENOL.f90` |\n\nSources: [Plant/CSYCA-Cassava/YCA_Integ_EndCrop.f90](), [Plant/CSYCA-Cassava/YCA_Out_Eval.f90]()\n\n## Standard Output Processing\n\nAll models in the DSSAT-CSM system, including CSCER and other specialized models, use a standardized approach for outputting and evaluating results.\n\n### Output File Types\n\n1. **Overview files** - Summary of crop growth, development, and yields\n2. **Evaluation files** - Comparison of simulated and measured results\n3. **Time-series files** - Daily or periodic output of key variables\n\n### Evaluation Process\n\nThe evaluation process compares simulated outputs to measured data from experimental studies:\n\n```mermaid\nsequenceDiagram\n    participant Simulation as \"Model Simulation\"\n    participant A_Files as \"A-Files\\n(Measured Summary Data)\"\n    participant T_Files as \"T-Files\\n(Measured Time Series)\"\n    participant Evaluation as \"Evaluation Module\"\n    participant Output as \"Output Files\"\n    \n    Simulation-\u003e\u003eEvaluation: Send simulated results\n    A_Files-\u003e\u003eEvaluation: Read measured summary data\n    T_Files-\u003e\u003eEvaluation: Read measured time series\n    Evaluation-\u003e\u003eEvaluation: Compare simulated vs. measured\n    Evaluation-\u003e\u003eEvaluation: Calculate statistics\n    Evaluation-\u003e\u003eOutput: Write evaluation.out\n    Evaluation-\u003e\u003eOutput: Write overview.out\n```\n\nSources: [Plant/CSYCA-Cassava/YCA_Out_Eval.f90:38-420]()\n\n## Environmental Response Functions\n\nThe CSCER and other models include functions to simulate crop responses to environmental factors:\n\n**Environmental Response Factors**\n\n| Environmental Factor | Response Variables | Model Components |\n|----------------------|--------------------|------------------|\n| Temperature | Development rates, photosynthesis, respiration | Phenology, Carbon |\n| Solar Radiation | Photosynthesis, biomass accumulation | Carbon |\n| Photoperiod | Development stages | Phenology |\n| Water Stress | Growth reduction, partitioning changes | Water, Growth |\n| Nitrogen Stress | Growth reduction, N uptake, partitioning | Nitrogen, Growth |\n\nSources: Repository structure and system architecture\n\n## Summary\n\nThe CSCER and other specialized crop models in DSSAT-CSM provide detailed process-based simulation of specific crops that are not covered by the main CROPGRO, CERES, or FORAGE models. These models follow the overall DSSAT-CSM modular structure while incorporating unique processes and parameters specific to their target crops. The models integrate with the core DSSAT-CSM modules through standardized interfaces and share common approaches to input processing, simulation control, and output generation."])</script><script>self.__next_f.push([1,"28:T3f79,"])</script><script>self.__next_f.push([1,"# Soil Processes\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [InputModule/ipexp.for](InputModule/ipexp.for)\n- [Management/Flood_Irrig.for](Management/Flood_Irrig.for)\n- [Management/IRRIG.for](Management/IRRIG.for)\n- [SPAM/ESR_SoilEvap.for](SPAM/ESR_SoilEvap.for)\n- [SPAM/SOILEV.for](SPAM/SOILEV.for)\n- [Soil/SoilUtilities/SOILDYN.for](Soil/SoilUtilities/SOILDYN.for)\n- [Soil/SoilWater/CapFringe.f90](Soil/SoilWater/CapFringe.f90)\n- [Soil/SoilWater/INFIL.for](Soil/SoilWater/INFIL.for)\n- [Soil/SoilWater/OPWBAL.for](Soil/SoilWater/OPWBAL.for)\n- [Soil/SoilWater/RNOFF.for](Soil/SoilWater/RNOFF.for)\n- [Soil/SoilWater/SATFLO.for](Soil/SoilWater/SATFLO.for)\n- [Soil/SoilWater/TILEDRAIN.for](Soil/SoilWater/TILEDRAIN.for)\n- [Soil/SoilWater/WATBAL.for](Soil/SoilWater/WATBAL.for)\n- [Soil/SoilWater/WBAL.for](Soil/SoilWater/WBAL.for)\n- [Soil/SoilWater/WBSUBS.for](Soil/SoilWater/WBSUBS.for)\n- [Soil/SoilWater/WaterTable.f90](Soil/SoilWater/WaterTable.f90)\n\n\u003c/details\u003e\n\n\n\nThis page provides an overview of the soil processes simulated in DSSAT-CSM. It covers the fundamentals of soil water dynamics, including infiltration, runoff, drainage, evaporation, and redistribution, as well as special conditions like tile drainage, water table management, and flooded fields. For specific soil-crop interactions or soil chemistry, see [Plant Models](#4) and [Greenhouse Gas Emissions](#5.2).\n\n## Overview of Soil Processes\n\nDSSAT-CSM simulates several key soil processes that affect crop growth, development, and yield. These processes are primarily managed through the Soil module, which interacts with other modules such as Plant, Weather, and Management Operations.\n\n```mermaid\nflowchart TD\n    subgraph \"Soil Processes\"\n        SoilWaterBalance[\"Soil Water Balance\"]\n        SoilEvaporation[\"Soil Evaporation\"]\n        Infiltration[\"Infiltration\"]\n        Drainage[\"Drainage\"]\n        Runoff[\"Runoff\"]\n        WaterTable[\"Water Table Management\"]\n        TileDrainage[\"Tile Drainage\"]\n        FloodedField[\"Flooded Field Management\"]\n        SoilDynamics[\"Soil Dynamics\"]\n    end\n    \n    Weather[\"Weather\\n(RAIN, TMAX)\"] --\u003e SoilWaterBalance\n    Irrigation[\"Irrigation\\n(IRRAMT)\"] --\u003e SoilWaterBalance\n    PlantExtraction[\"Plant Water Uptake\\n(SWDELTX)\"] --\u003e SoilWaterBalance\n    \n    SoilWaterBalance --\u003e Infiltration\n    SoilWaterBalance --\u003e Runoff\n    SoilWaterBalance --\u003e Drainage\n    SoilWaterBalance --\u003e SoilEvaporation\n    SoilWaterBalance --\u003e WaterTable\n    SoilWaterBalance --\u003e TileDrainage\n    SoilWaterBalance --\u003e FloodedField\n    \n    SoilDynamics --\u003e SoilProperties[\"Soil Properties\\n(BD, LL, DUL, SAT)\"]\n    SoilProperties --\u003e SoilWaterBalance\n```\n\nSources: [Soil/SoilUtilities/SOILDYN.for:37-233](), [Soil/SoilWater/WATBAL.for:51-239]()\n\n## Soil Properties\n\nThe soil profile in DSSAT-CSM is defined by layers with distinct physical and hydraulic properties. These properties influence water movement, retention, and availability to plants.\n\n### Key Soil Properties\n\n| Property | Description | Variable | Units |\n|----------|-------------|----------|-------|\n| Layer thickness | Thickness of soil layer | DLAYR | cm |\n| Depth | Depth to bottom of soil layer | DS | cm |\n| Lower limit | Water content at wilting point | LL | cm³/cm³ |\n| Drained upper limit | Water content at field capacity | DUL | cm³/cm³ |\n| Saturation | Water content at saturation | SAT | cm³/cm³ |\n| Bulk density | Soil density | BD | g/cm³ |\n| Saturated hydraulic conductivity | Rate of water movement at saturation | SWCN | cm/h |\n| Organic carbon | Soil organic carbon content | OC | % |\n| Curve number | Runoff parameter | CN | - |\n| Texture | Soil texture components | CLAY, SAND, SILT | % |\n\nThe SOILDYN subroutine initializes and updates these properties throughout the simulation based on management practices and organic matter dynamics.\n\nSources: [Soil/SoilUtilities/SOILDYN.for:73-88](), [Soil/SoilUtilities/SOILDYN.for:846-910]()\n\n## Soil Water Balance\n\nThe soil water balance in DSSAT-CSM is handled by the WATBAL subroutine, which tracks all water inputs, outputs, and changes in storage. This operates on a daily time step and accounts for all water fluxes in the soil profile.\n\n### Water Balance Components\n\n```mermaid\nflowchart TD\n    subgraph \"Inputs\"\n        RAIN[\"Precipitation\"]\n        IRRAMT[\"Irrigation\"]\n        LatInflow[\"Lateral Inflow\"]\n        SNOW[\"Snowmelt\"]\n    end\n    \n    subgraph \"Storage\"\n        SW[\"Soil Water Content\"]\n        FLOOD[\"Floodwater\"]\n        MULCHWATER[\"Mulch Water\"]\n    end\n    \n    subgraph \"Outputs\"\n        RUNOFF[\"Runoff\"]\n        DRAIN[\"Drainage\"]\n        ET[\"Evapotranspiration\"]\n        LatOutflow[\"Lateral Outflow\"]\n        TDFC[\"Tile Drainage\"]\n    end\n    \n    RAIN --\u003e SW\n    IRRAMT --\u003e SW\n    SNOW --\u003e SW\n    LatInflow --\u003e SW\n    \n    SW --\u003e RUNOFF\n    SW --\u003e DRAIN\n    SW --\u003e ET\n    SW --\u003e LatOutflow\n    SW --\u003e TDFC\n    \n    RAIN --\u003e FLOOD\n    IRRAMT --\u003e FLOOD\n    FLOOD --\u003e RUNOFF\n    \n    RAIN --\u003e MULCHWATER\n    MULCHWATER --\u003e SW\n```\n\nSources: [Soil/SoilWater/WATBAL.for:277-300](), [Soil/SoilWater/WBAL.for:17-29]()\n\n### Water Balance Equation\n\nThe daily water balance equation is:\n\n```\nSW = SW + SWDELTS + SWDELTU + SWDELTX + SWDELTT + SWDELTL + SWDELTW\n```\n\nWhere:\n- `SW`: Soil water content in each layer\n- `SWDELTS`: Change due to drainage\n- `SWDELTU`: Change due to evaporation/upward flow\n- `SWDELTX`: Change due to root water uptake\n- `SWDELTT`: Change due to tile drainage\n- `SWDELTL`: Change due to tillage\n- `SWDELTW`: Change due to water table\n\nSources: [Soil/SoilWater/WATBAL.for:496-505]()\n\n## Soil Water Processes\n\n### Precipitation and Snow\n\nDSSAT-CSM handles precipitation by converting snowfall to water equivalent when the maximum temperature is below 1°C. Snow accumulates and melts based on temperature and existing precipitation:\n\n```\nIF (TMAX \u003c= 1.0 OR SNOW \u003e 0.0) THEN\n  CALL SNOWFALL (RATE, TMAX, RAIN, SNOW, WATAVL)\nELSE\n  WATAVL = RAIN\nENDIF\n```\n\nSnow melting is calculated as:\n```\nSNOMLT = TMAX + RAIN*0.4\n```\n\nSources: [Soil/SoilWater/WATBAL.for:281-289](), [Soil/SoilWater/WBSUBS.for:43-60]()\n\n### Runoff\n\nRunoff is calculated using the SCS curve number method in the RNOFF subroutine:\n\n```\nSMX = 254.0 * (100.0/CN - 1.0)\nSWABI = 0.15 * ((SAT(1) - SW(1)) / (SAT(1) - LL(1) * 0.5) + \n                (SAT(2) - SW(2)) / (SAT(2) - LL(2) * 0.5))\nPB = WATAVL - IABS * SMX\nIF (PB \u003e 0) THEN\n  RUNOFF = PB**2/(WATAVL + (1.0-IABS) * SMX)\nELSE\n  RUNOFF = 0.0\nEND IF\n```\n\nWhere:\n- `CN`: Curve number for runoff potential\n- `SMX`: Maximum water storage capacity\n- `SWABI`: Soil water abstraction index\n- `IABS`: Initial abstraction ratio (modified by mulch cover)\n- `PB`: Threshold for runoff initiation\n- `RUNOFF`: Resulting runoff amount\n\nSources: [Soil/SoilWater/RNOFF.for:77-111]()\n\n### Infiltration\n\nInfiltration is handled by the INFIL subroutine, which distributes water into the soil profile based on the holding capacity of each layer:\n\n```\nDO L = 1,NLAYR\n  HOLD = (SAT(L) - SWTEMP(L)) * DLAYR(L)\n  IF (PINF \u003e 1.E-4 .AND. PINF \u003e HOLD) THEN\n    DRCM = SWCON * (SAT(L) - DUL(L)) * DLAYR(L)\n    DRN(L) = PINF - HOLD + DRCM\n    IF (SWCN(L) \u003e 0.0 .AND. DRN(L) \u003e SWCN(L)*24.0) THEN\n      DRN(L) = SWCN(L) * 24.0\n    ENDIF\n  ENDIF\nEND DO\n```\n\nWhere:\n- `HOLD`: Available storage in layer L\n- `PINF`: Potential infiltration\n- `SWCON`: Drainage coefficient\n- `DRN(L)`: Drainage from layer L\n\nSources: [Soil/SoilWater/INFIL.for:44-90]()\n\n### Soil Evaporation\n\nDSSAT-CSM offers multiple soil evaporation methods, selected via the MESEV switch:\n\n1. **Ritchie Method (MESEV='R')**: The classic two-stage evaporation model\n2. **Suleiman-Ritchie Method (MESEV='S')**: An improved model based on soil physics\n\nFor the Suleiman-Ritchie method, evaporation is calculated based on profile type (wet, intermediate, dry):\n\n```\nProfileType = 3   !assume dry profile until proven wet\nDO L = 1, NLAYR\n  IF (MEANDEP(L) \u003c 100. .AND. SWTEMP(L) \u003e DUL(L)) THEN\n    ProfileType = 1\n  ENDIF\nENDDO\n\n!For each layer, calculate evaporation coefficient based on profile type\nSELECT CASE (ProfileType)\n  CASE (3) !Dry profile\n    ES_Coef(L) = A * MEANDEP(L) ** B\n  CASE (2) !Equilibrium profile\n    ES_Coef(L) = 0.011\n  CASE (1) !Wet profile\n    ES_Coef(L) = A * MEANDEP(L) ** B\nEND SELECT\n\n!Calculate evaporation\nSWDELTU(L) = -(SWTEMP(L) - SWAD(L)) * ES_Coef(L)\nES_LYR(L) = -SWDELTU(L) * DLAYR(L) * 10.\nES = ES + ES_LYR(L)\n```\n\nSources: [SPAM/ESR_SoilEvap.for:82-173]()\n\n### Upward Flow\n\nUpward flow represents water movement from deeper layers toward the surface due to evaporation. This is calculated by the UP_FLOW subroutine:\n\n```\nDO L = IST,NLAYR-1\n  M = L + 1\n  THET1 = MIN(SWTEMP(L) - LL(L), ESW(L))\n  THET2 = MIN(SWTEMP(M) - LL(M), ESW(M))\n  \n  DBAR = 0.88 * EXP(35.4*((THET1*DLAYR(L) + THET2*DLAYR(M))/\n     (DLAYR(L) + DLAYR(M)))*0.5)\n  \n  GRAD = (THET2/ESW(M) - THET1/ESW(L)) * (ESW(M) * DLAYR(M) +\n     ESW(L)*DLAYR(L)) / (DLAYR(M) + DLAYR(L))\n  \n  UPFLOW(L) = DBAR * GRAD / ((DLAYR(L) + DLAYR(M)) * 0.5)\nENDDO\n```\n\nWhere:\n- `THET1`, `THET2`: Available water in adjacent layers\n- `DBAR`: Diffusivity\n- `GRAD`: Gradient of normalized water content\n- `UPFLOW`: Resulting upward water movement\n\nSources: [Soil/SoilWater/WBSUBS.for:300-365]()\n\n## Special Soil Conditions\n\n### Water Table Management\n\nThe WaterTable subroutine simulates a managed water table and capillary fringe effects:\n\n```mermaid\nflowchart TD\n    WT_MGMT[\"Water Table Management\"]\n    ActWTD[\"Actual Water Table Depth\"]\n    MgmtWTD[\"Management Water Table Depth\"]\n    TargetWTD[\"Target Water Table Depth\"]\n    \n    LatIn[\"Lateral Inflow\"]\n    LatOut[\"Lateral Outflow\"]\n    CapFringe[\"Capillary Fringe\\nSaturation above water table\"]\n    \n    MgmtWTD --\u003e TargetWTD\n    ActWTD --\u003e TargetWTD\n    \n    TargetWTD --\u003e ActWTD\n    \n    subgraph \"Water Table Effects\"\n        ActWTD --\u003e LatIn\n        ActWTD --\u003e LatOut\n        ActWTD --\u003e CapFringe\n        CapFringe --\u003e SWDELTW[\"Change in Soil Water\\ndue to water table\"]\n    end\n    \n    SWDELTW --\u003e SW[\"Soil Water Content\"]\n```\n\nKey calculations:\n- If `ActWTD - MgmtWTD \u003e TOL`: Calculate lateral inflow to raise water table\n- If `MgmtWTD - ActWTD \u003e TOL`: Calculate lateral outflow to lower water table\n- Calculate water content in capillary fringe using van Genuchten parameters\n\nSources: [Soil/SoilWater/WaterTable.f90:114-238](), [Soil/SoilWater/CapFringe.f90:11-106]()\n\n### Tile Drainage\n\nTile drainage is calculated when a subsurface drainage system is present:\n\n```\nIF (FLDD \u003e 0.0) THEN\n  !Find layer with tile drain\n  CUMDEP = DLAYR(1)\n  DO L = 2, NLAYR\n    CUMDEP = CUMDEP + DLAYR(L)\n    IF (CUMDEP \u003e= FLDD .AND. CUMDEP - DLAYR(L) \u003c FLDD) THEN\n      TDLNO = L\n    ENDIF\n  ENDDO\nENDIF\n\n!Calculate drainage\nTOPSAT = MAX(1, TDLNO - 1)\nDO L = TOPSAT, NLAYR\n  IF (SW(L) \u003e DUL(L)) THEN\n    Head = Head + (SW(L) - DUL(L)) * DLAYR(L)\n    TDF_AVAIL = TDF_AVAIL + (SW(L) - DUL(L)) * DLAYR(L)\n  ENDIF\nENDDO\n\n!Calculate drainage rate\nTDFC = MIN(ETDR * Head, TDF_AVAIL)\n```\n\nSources: [Soil/SoilWater/TILEDRAIN.for:98-131]()\n\n### Flooded Field Management\n\nFor flooded field conditions (e.g., rice paddies), special handling is implemented:\n\n```\nIF (PUDDLED) THEN\n  !Puddled field - fill soil profile and limit drainage to PUDPERC\n  WINF = MAX(0.0, FLOOD + IRRAMT + RAIN)\n  \n  !First fill soil profile\n  DO L = 1, NLAYR\n    SWDELTS(L) = SAT(L) - SW(L) \n    INFILT = INFILT + SWDELTS(L) * DLAYR(L) * 10.\n    IF (INFILT \u003e WINF) THEN\n      SWDELTS(L) = SWDELTS(L) - (INFILT - WINF) / DLAYR(L) / 10.0\n      INFILT = WINF\n      EXIT\n    ENDIF\n  ENDDO\n  \n  !Drainage, if any, limited to PUDPERC \n  DRAIN = MIN(PUDPERC, WINF - INFILT)\nENDIF\n```\n\nFor bunded fields (with water retention walls):\n```\nIF (BUNDED) THEN\n  !No runoff from field with bund\n  RUNOFF = 0.0\n  WINF = MAX(0.0, FLOOD + IRRAMT + RAIN)\nENDIF\n```\n\nSources: [Soil/SoilWater/WATBAL.for:318-374](), [Management/Flood_Irrig.for:74-118]()\n\n## Soil Dynamics\n\nThe SOILDYN subroutine calculates and distributes soil parameters, handling how soil properties change over time due to tillage, organic matter changes, and other factors.\n\n### Tillage Effects\n\nTillage operations affect soil bulk density, water retention, and hydraulic conductivity:\n\n```\nIF (YRDOY .EQ. TILDATE) THEN\n  !Call mixing routine for soil properties\n  MIXPCT = TILLVALS % TILMIX\n  TDEP = TILLVALS % TILDEP\n  \n  DO L = 1, NLAYR\n    !Depths of soil water (cm)\n    SW_UNMIX(L) = SW(L) * DLAYR(L)\n  ENDDO\n  \n  CALL SoilMixing(DLAYR, MIXPCT, NLAYR, TDEP, SW_UNMIX, SW_MIX)\n  \n  DO L = 1, NLAYR\n    !Change in SW due to tillage\n    SWDELTL(L) = SW_MIX(L) / DLAYR(L) - SW(L)\n  ENDDO\nENDIF\n```\n\nSources: [Soil/SoilWater/WATBAL.for:430-455]()\n\n### Organic Matter Effects\n\nOrganic matter influences soil physical properties, particularly bulk density and water retention:\n\n```\nDO L = 1, NLAYR\n  !Current SOM percentage\n  SOM_PCT(L) = SomLit(L) * 1.E-5 / (BD(L) * DLAYR(L)) * 100.\n\n  !Calculate bulk density based on SOM\n  BD_calc(L) = 100./(SOM_PCT(L)/0.224 + (100.-SOM_PCT(L))/2.65)\nENDDO\n\n!Calculate changes in soil properties due to SOM changes\nDO L = 1, NLAYR\n  !Change in SOM percentage\n  dSOM = SOM_PCT(L) - SOM_PCT_init(L)\n  \n  !Change in bulk density due to SOM\n  dBD_SOM = BD_calc(L) - BD_calc_init(L)\n  \n  !Update soil properties\n  BD_SOM(L) = BD_INIT(L) + dBD_SOM\n  DLAYR_SOM(L) = DLAYR_INIT(L) * BD_INIT(L) / BD_SOM(L)\n  DUL_SOM(L) = DUL_INIT(L) + dDUL_SOM\n  LL_SOM(L) = LL_INIT(L) + dLL_SOM\nENDDO\n```\n\nSources: [Soil/SoilUtilities/SOILDYN.for:1039-1057](), [Soil/SoilUtilities/SOILDYN.for:1072-1097]()\n\n## Irrigation Management\n\nIrrigation management in DSSAT-CSM offers multiple options:\n\n1. **As reported (IIRRI='R')**: Irrigation follows a predefined schedule\n2. **Automatic deficit-based (IIRRI='A')**: Irrigation triggered by soil water deficit\n3. **Automatic fixed amount (IIRRI='F')**: Fixed irrigation amount applied when triggered\n4. **Growth stage-based (IIRRI='G')**: Different parameters for different crop growth stages\n\n```mermaid\nflowchart TD\n    IrrigTiming[\"Irrigation Timing Decision\"]\n    \n    subgraph \"Options\"\n        Reported[\"As Reported\\nIIRRI='R'\"]\n        AutoDef[\"Automatic Deficit\\nIIRRI='A'\"]\n        AutoFixed[\"Automatic Fixed\\nIIRRI='F'\"]\n        ET_based[\"ET-based\\nIIRRI='E'\"]\n        GrowthStage[\"Growth Stage Based\\nIIRRI='G'\"]\n    end\n    \n    IrrigTiming --\u003e Reported\n    IrrigTiming --\u003e AutoDef\n    IrrigTiming --\u003e AutoFixed\n    IrrigTiming --\u003e ET_based\n    IrrigTiming --\u003e GrowthStage\n    \n    Reported --\u003e Schedule[\"Predefined Schedule\"]\n    \n    AutoDef --\u003e SWDeficit[\"Soil Water Deficit\"]\n    SWDeficit --\u003e Threshold[\"Deficit Threshold\"]\n    Threshold --\u003e IrrigAmount[\"Calculate Amount\"]\n    \n    AutoFixed --\u003e SWDeficit2[\"Soil Water Deficit\"]\n    SWDeficit2 --\u003e Threshold2[\"Deficit Threshold\"]\n    Threshold2 --\u003e FixedAmount[\"Fixed Amount\"]\n    \n    ET_based --\u003e AccumET[\"Accumulated ET\"]\n    AccumET --\u003e ETThreshold[\"ET Threshold\"]\n    ETThreshold --\u003e IrrigAmount2[\"Calculate Amount\"]\n    \n    GrowthStage --\u003e StageParams[\"Stage-specific Parameters\"]\n    StageParams --\u003e Threshold3[\"Stage-specific Threshold\"]\n    Threshold3 --\u003e IrrigAmount3[\"Stage-specific Amount\"]\n```\n\nSources: [Management/IRRIG.for:160-317]()\n\n## Output of Soil Water Data\n\nDSSAT-CSM provides detailed output of soil water balance through the OPWBAL subroutine. The main output file is SoilWat.OUT, which contains:\n\n- Daily soil water content by soil depth\n- Cumulative water balance components (precipitation, irrigation, runoff, drainage)\n- Water table depth\n- Mulch and tile drainage information\n\nSources: [Soil/SoilWater/OPWBAL.for:130-183](), [Soil/SoilWater/WBAL.for:15-40]()\n\n## Integration with Other Modules\n\nThe soil processes module integrates with other DSSAT-CSM modules:\n\n1. **Plant Module**: Provides root water uptake (SWDELTX) and affects plant growth through water stress\n2. **Weather Module**: Provides precipitation and temperature data for soil water processes\n3. **Management Module**: Provides irrigation, tillage, and other management information\n\nInformation is exchanged using modular variable types and the DSSAT PUT/GET system for data sharing.\n\nSources: [Soil/SoilWater/WATBAL.for:51-60](), [Soil/SoilUtilities/SOILDYN.for:914-915]()"])</script><script>self.__next_f.push([1,"29:T3414,"])</script><script>self.__next_f.push([1,"# Soil Water Balance\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [Management/Flood_Irrig.for](Management/Flood_Irrig.for)\n- [Management/IRRIG.for](Management/IRRIG.for)\n- [Soil/SoilWater/CapFringe.f90](Soil/SoilWater/CapFringe.f90)\n- [Soil/SoilWater/INFIL.for](Soil/SoilWater/INFIL.for)\n- [Soil/SoilWater/OPWBAL.for](Soil/SoilWater/OPWBAL.for)\n- [Soil/SoilWater/SATFLO.for](Soil/SoilWater/SATFLO.for)\n- [Soil/SoilWater/TILEDRAIN.for](Soil/SoilWater/TILEDRAIN.for)\n- [Soil/SoilWater/WATBAL.for](Soil/SoilWater/WATBAL.for)\n- [Soil/SoilWater/WBAL.for](Soil/SoilWater/WBAL.for)\n- [Soil/SoilWater/WBSUBS.for](Soil/SoilWater/WBSUBS.for)\n- [Soil/SoilWater/WaterTable.f90](Soil/SoilWater/WaterTable.f90)\n\n\u003c/details\u003e\n\n\n\n## Purpose and Scope\n\nThe Soil Water Balance module in DSSAT-CSM simulates the movement and distribution of water throughout the soil profile. It tracks water inputs (precipitation, irrigation), water outputs (drainage, runoff, evaporation, transpiration), and water redistribution within the soil. This module is fundamental to crop growth simulation as soil water content directly affects plant water uptake, nutrient availability, soil temperature dynamics, and other related processes.\n\nThis page focuses on the water balance calculations and processes that occur within the soil profile. For information about soil properties that affect water movement, see the Soil Dynamics page ([5.3](#5.3)). For details on evapotranspiration processes, see the SPAM module ([3.5](#3.5)).\n\n## System Architecture\n\nThe soil water balance system is implemented through a set of interconnected subroutines, with WATBAL serving as the central coordinator.\n\n### Component Structure\n\n```mermaid\ngraph TD\n    WATBAL[\"WATBAL\\nMain water balance coordinator\"]\n    SNOWFALL[\"SNOWFALL\\nSnow accumulation and melt\"]\n    IPWBAL[\"IPWBAL\\nReads input variables\"]\n    WBSUM[\"WBSUM\\nSummation of water balance\"]\n    WTDEPT[\"WTDEPT\\nDetermines water table depth\"]\n    UP_FLOW[\"UP_FLOW\\nUpward water movement\"]\n    INFIL[\"INFIL\\nInfiltration calculations\"]\n    RNOFF[\"RNOFF\\nRunoff calculations\"]\n    SATFLO[\"SATFLO\\nSaturated flow\"]\n    TILEDRAIN[\"TILEDRAIN\\nTile drainage\"]\n    WaterTable[\"WaterTable\\nWater table management\"]\n    CapFringe[\"CapFringe\\nCapillary fringe calculation\"]\n    WBAL[\"WBAL\\nWater balance output\"]\n    OPWBAL[\"OPWBAL\\nDaily water balance output\"]\n    \n    WATBAL --\u003e SNOWFALL\n    WATBAL --\u003e IPWBAL\n    WATBAL --\u003e WBSUM\n    WATBAL --\u003e WTDEPT\n    WATBAL --\u003e UP_FLOW\n    WATBAL --\u003e INFIL\n    WATBAL --\u003e RNOFF\n    WATBAL --\u003e SATFLO\n    WATBAL --\u003e TILEDRAIN\n    WATBAL --\u003e WaterTable\n    WATBAL --\u003e WBAL\n    WATBAL --\u003e OPWBAL\n    WaterTable --\u003e CapFringe\n```\n\nSources: [Soil/SoilWater/WATBAL.for:42-49]()\n\n### Soil Water Processes\n\n```mermaid\ngraph TD\n    Inputs[\"Water Inputs\"] --\u003e Precipitation[\"Precipitation\\n(RAIN)\"]\n    Inputs --\u003e Irrigation[\"Irrigation\\n(IRRAMT)\"]\n    Precipitation --\u003e SNOW[\"Snow Accumulation\\n(SNOW)\"]\n    SNOW -- \"Snowmelt\" --\u003e WATAVL[\"Available Water\\n(WATAVL)\"]\n    Precipitation -- \"Rain\" --\u003e WATAVL\n    Irrigation --\u003e WATAVL\n    \n    WATAVL --\u003e RUNOFF[\"Surface Runoff\\n(RUNOFF)\"]\n    WATAVL --\u003e WINF[\"Water for Infiltration\\n(WINF)\"]\n    \n    WINF --\u003e SWDELTS[\"Drainage\\n(SWDELTS)\"]\n    \n    WaterTable[\"Water Table\\n(ActWTD)\"] -- \"Capillary Rise\" --\u003e SWDELTW[\"Water Table Effect\\n(SWDELTW)\"]\n    \n    SWDELTS -- \"Percolation\" --\u003e DRAIN[\"Deep Drainage\\n(DRAIN)\"]\n    SWDELTS -- \"Lateral Flow\" --\u003e TDFC[\"Tile Drainage\\n(TDFC)\"]\n    \n    SW[\"Soil Water Content\\n(SW)\"] --\u003e ES[\"Soil Evaporation\\n(ES)\"]\n    SW --\u003e SWDELTX[\"Plant Transpiration\\n(SWDELTX)\"]\n    \n    SW -- \"Redistribution\" --\u003e SWDELTU[\"Upward Flow\\n(SWDELTU)\"]\n    \n    Tillage[\"Tillage Operations\"] --\u003e SWDELTL[\"Tillage Effect\\n(SWDELTL)\"]\n    \n    SWDELTS --\u003e SW\n    SWDELTW --\u003e SW\n    SWDELTU --\u003e SW\n    SWDELTX --\u003e SW\n    SWDELTL --\u003e SW\n```\n\nSources: [Soil/SoilWater/WATBAL.for:487-502]()\n\n## Core Water Balance Processes\n\n### Precipitation and Snow\n\nPrecipitation is an input from weather data. The SNOWFALL subroutine determines whether precipitation accumulates as snow based on temperature thresholds:\n\n- When TMAX ≤ 1.0°C, precipitation accumulates as snow\n- When TMAX \u003e 1.0°C, existing snow melts at a rate dependent on temperature and additional rainfall\n\nThe available water (WATAVL) includes rainfall plus snowmelt for subsequent infiltration and runoff processes.\n\nSources: [Soil/SoilWater/WBSUBS.for:19-68]()\n\n### Infiltration and Runoff\n\nWhen water becomes available at the soil surface, it is partitioned between infiltration and runoff. This partitioning is controlled by the MEINF parameter which determines the method used:\n\n| MEINF | Method | Description |\n|-------|--------|-------------|\n| 'R' | Ritchie | Standard method with modified runoff for mulch effects |\n| 'S' | SCS | SCS curve number approach |\n| 'N' | No mulch | Infiltration without mulch effects |\n| 'M' | Mulch | Full mulch effects on infiltration modeled |\n\nThe INFIL subroutine calculates infiltration by distributing water into soil layers based on their water holding capacity (SAT - SW). When a layer reaches saturation, excess water moves to the next layer. If all layers become saturated, excess water (EXCS) contributes to runoff.\n\nThe infiltration process follows this sequence:\n1. Calculate potential infiltration (PINF)\n2. Distribute water to each soil layer based on available capacity\n3. Calculate drainage when layers exceed drained upper limit (DUL)\n4. Track changes in soil water content (SWDELTS)\n\nSources: [Soil/SoilWater/WATBAL.for:342-403](), [Soil/SoilWater/INFIL.for:26-151]()\n\n### Drainage and Percolation\n\nDrainage occurs when soil water content exceeds the drained upper limit (DUL). Two key subroutines handle drainage:\n\n1. **INFIL**: Calculates drainage on days with precipitation or irrigation\n2. **SATFLO**: Calculates saturated flow on days without precipitation or irrigation\n\nThe drainage rate depends on:\n- SWCON: The whole profile drainage coefficient (1/day)\n- SWCN: Saturated hydraulic conductivity by layer (cm/hr)\n- Layer water content relative to DUL and SAT\n\nDrainage from each layer (DRN) is tracked separately and contributes to the total drainage (DRAIN) from the profile.\n\nSources: [Soil/SoilWater/SATFLO.for:26-107]()\n\n### Upward Water Movement\n\nThe UP_FLOW subroutine calculates upward movement of water due to:\n1. Soil evaporation creating water potential gradients\n2. Redistribution through unsaturated hydraulic conductivity\n\nThe algorithm calculates flow between adjacent layers based on:\n- Soil water gradient between layers\n- Unsaturated hydraulic conductivity (DBAR)\n- Layer thicknesses\n\nUpward flow (UPFLOW) is positive for movement from lower to upper layers, and the resulting changes in soil water content are stored in SWDELTU.\n\nSources: [Soil/SoilWater/WBSUBS.for:283-395]()\n\n### Water Table Effects\n\nThe WaterTable subroutine manages interactions with groundwater:\n\n1. Maintains a specified water table depth (MgmtWTD) through lateral flows\n2. Calculates capillary fringe using the CapFringe subroutine\n3. Determines impact on soil water content (SWDELTW)\n\nWhen a water table is present, the subroutine:\n- Sets layers below the water table to saturation\n- Calculates increased water content in layers above the water table due to capillary rise\n- Tracks lateral inflow/outflow to maintain the water table\n\nThe CapFringe subroutine uses the van Genuchten water retention model to calculate water content distribution above the water table based on soil hydraulic properties.\n\nSources: [Soil/SoilWater/WaterTable.f90:12-246](), [Soil/SoilWater/CapFringe.f90:12-146]()\n\n### Tile Drainage\n\nTile drainage simulates artificial subsurface drainage systems in agricultural fields. The TILEDRAIN subroutine:\n\n1. Identifies the soil layer containing tile drains (TDLNO)\n2. Calculates hydraulic head above the drains\n3. Determines tile drainage rate (TDFD) based on this head and conductivity\n4. Adjusts soil water content (SWDELTT) accordingly\n\nTile drainage operates when layers above the drains approach saturation, helping prevent prolonged saturated conditions that could damage crops.\n\nSources: [Soil/SoilWater/TILEDRAIN.for:12-168]()\n\n### Soil Evaporation and Plant Water Uptake\n\nSoil evaporation (ES) is calculated by the Soil-Plant-Atmosphere Module (SPAM) and is subtracted from the top soil layer's water content during integration:\n\n```\nSW(1) = SW(1) - 0.1 * ES / DLAYR(1)\n```\n\nPlant water uptake (SWDELTX) is provided by plant modules and represents water extracted by roots from each soil layer. Both ES and SWDELTX are key components in the water balance.\n\nSources: [Soil/SoilWater/WATBAL.for:472-475]()\n\n## Special Conditions\n\n### Flooded Fields\n\nFor rice cultivation, the system simulates flooded conditions with:\n\n- Bunds to hold water (controlled by BUNDED flag and ABUND height)\n- Puddled soil conditions with reduced percolation (PUDDLED flag)\n- Maintenance of specified flood depth\n- Modified infiltration and runoff calculations\n\nThe FLOOD_IRRIG subroutine manages these special conditions, tracking floodwater depth (FLOOD) and percolation rate (PUDPERC).\n\nSources: [Soil/SoilWater/WATBAL.for:318-341](), [Management/Flood_Irrig.for:15-274]()\n\n### Tillage Effects\n\nTillage operations affect soil water by mixing layers. When tillage occurs:\n\n1. The system detects tillage via TILLVALS parameters (TILDATE, TILMIX, TILDEP)\n2. Soil water is mixed within the tillage depth\n3. The resulting changes are stored in SWDELTL\n\nThis ensures proper redistribution of soil water after tillage operations that disturb the soil profile.\n\nSources: [Soil/SoilWater/WATBAL.for:429-452]()\n\n## Soil Water Integration\n\nThe integration of all water fluxes occurs in the INTEGR section of WATBAL. For each soil layer, the new soil water content is calculated as:\n\n```\nSW_mm_NEW(L) = SW_mm(L) + SWDELTS_mm(L) + SWDELTU_mm(L) + SWDELTL_mm(L) \n                + SWDELTX_mm(L) + SWDELTT_mm(L) + SWDELTW_mm(L)\n```\n\nWhere each component represents a specific water flux in mm of water:\n- SWDELTS_mm: Change due to drainage\n- SWDELTU_mm: Change due to upward flow\n- SWDELTL_mm: Change due to tillage\n- SWDELTX_mm: Change due to root extraction\n- SWDELTT_mm: Change due to tile drainage\n- SWDELTW_mm: Change due to water table effects\n\nThis integration accounts for changing layer thicknesses by converting volumetric water content to equivalent water depth before integration.\n\nSources: [Soil/SoilWater/WATBAL.for:487-502]()\n\n## Water Balance Monitoring\n\nThe WBAL subroutine maintains mass balance by tracking all water inputs, outputs, and changes in storage:\n\n### Water Balance Equation\n\n```\nWBALAN = Inputs - Outputs - Change in Storage\n```\n\nWhere:\n- **Inputs**: IRRAMT + RAIN + RESWATADD_T + LatInflow + LatOutflow\n- **Outputs**: MULCHEVAP + DRAIN + RUNOFF + FRUNOFF + ES + EP + EF + TDFD\n- **Change in Storage**: Changes in soil water, floodwater, snow, and mulch water\n\nThis water balance check helps ensure conservation of mass in the simulation and identify potential issues.\n\nSources: [Soil/SoilWater/WBAL.for:176-188]()\n\n## Key Variables\n\n### Control Parameters\n\n| Parameter | Description | Options |\n|-----------|-------------|---------|\n| ISWWAT | Water simulation switch | Y=simulate water balance, N=no simulation |\n| MEINF | Infiltration method | R=Ritchie, S=SCS, M=Mulch, N=No mulch |\n| MESEV | Soil evaporation method | R=Ritchie, S=SALUS |\n| MEEVP | Potential ET method | P=Priestley-Taylor, R=Penman-FAO24, Z=Penman-Monteith |\n\n### State Variables\n\n| Variable | Description | Units |\n|----------|-------------|-------|\n| SW | Soil water content by layer | cm³/cm³ |\n| SNOW | Snow accumulation | mm |\n| ActWTD | Actual water table depth | cm |\n| FLOOD | Depth of floodwater | mm |\n\n### Flux Variables\n\n| Variable | Description | Units |\n|----------|-------------|-------|\n| SWDELTS | Change in SW due to drainage | cm³/cm³ |\n| SWDELTU | Change in SW due to upward flow | cm³/cm³ |\n| SWDELTX | Change in SW due to root extraction | cm³/cm³ |\n| SWDELTT | Change in SW due to tile drainage | cm³/cm³ |\n| SWDELTL | Change in SW due to tillage | cm³/cm³ |\n| SWDELTW | Change in SW due to water table | cm³/cm³ |\n| RAIN | Precipitation | mm/day |\n| IRRAMT | Irrigation amount | mm/day |\n| RUNOFF | Surface runoff | mm/day |\n| DRAIN | Deep drainage | mm/day |\n| ES | Soil evaporation | mm/day |\n\n## Implementation Structure\n\nThe soil water balance follows the DSSAT-CSM dynamic structure:\n\n1. **RUNINIT**: One-time initialization at simulation start\n2. **SEASINIT**: Initialization at start of each growing season\n3. **RATE**: Daily rate calculations for all processes\n4. **INTEGR**: Integration of rates to update state variables\n5. **OUTPUT**: Output of results\n6. **SEASEND**: End-of-season summaries\n\nThis structure ensures proper sequencing of processes and maintains separation between rate calculations and state variable updates.\n\nSources: [Soil/SoilWater/WATBAL.for:158-604]()\n\nThe Soil Water Balance module is central to the DSSAT-CSM as it provides soil water content information critical for simulating plant growth and other soil processes. By tracking all water fluxes and maintaining water balance, it ensures realistic simulation of water dynamics in agricultural systems."])</script><script>self.__next_f.push([1,"2a:T48a5,"])</script><script>self.__next_f.push([1,"# Greenhouse Gas Emissions\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [Soil/CENTURY_OrganicMatter/CENTURY.for](Soil/CENTURY_OrganicMatter/CENTURY.for)\n- [Soil/CENTURY_OrganicMatter/TSOMLIT_C.for](Soil/CENTURY_OrganicMatter/TSOMLIT_C.for)\n- [Soil/CERES_OrganicMatter/SoilOrg.for](Soil/CERES_OrganicMatter/SoilOrg.for)\n- [Soil/GHG/GHG_mod.for](Soil/GHG/GHG_mod.for)\n- [Soil/GHG/Methane.for](Soil/GHG/Methane.for)\n- [Soil/GHG/Methmod.for](Soil/GHG/Methmod.for)\n- [Soil/SoilUtilities/SoilCBal.for](Soil/SoilUtilities/SoilCBal.for)\n- [Utilities/UTILS.for](Utilities/UTILS.for)\n\n\u003c/details\u003e\n\n\n\nThis page documents the greenhouse gas (GHG) emissions modeling system within DSSAT-CSM. The module simulates the production, consumption, and emissions of key agricultural greenhouse gases, including methane (CH4), nitrous oxide (N2O), and carbon dioxide (CO2). The GHG module interfaces with soil organic matter decomposition processes, hydrological conditions, and plant growth to predict gas fluxes from agricultural systems.\n\nFor information about soil water dynamics, see [Soil Water Balance](#5.1). For soil property changes over time, see [Soil Dynamics](#5.3).\n\n## Architecture Overview\n\nThe GHG emissions module consists of three primary components:\n\n1. **Methane Dynamics** - Simulates CH4 production, consumption, and transport in flooded conditions\n2. **N2O Emissions** - Models nitrous oxide emissions from nitrification and denitrification processes\n3. **Carbon Balance** - Tracks CO2 emissions from soil organic matter decomposition\n\n### GHG Module Structure\n\n```mermaid\ngraph TD\n    subgraph \"GHG_mod Module\"\n        N2O_type[\"N2O_type Data Structure\"]\n        CH4_type[\"CH4_type Data Structure\"]\n        N2Oemit[\"N2Oemit Subroutine\"]\n        OpN2O[\"OpN2O Subroutine\"]\n        OpGHG[\"OpGHG Subroutine\"]\n    end\n\n    subgraph \"Methane Module\"\n        MethaneDynamics[\"MethaneDynamics Subroutine\"]\n        OpMethane[\"OpMethane Subroutine\"]\n        MethaneConstants[\"MethaneConstants Module\"]\n        MethaneVariables[\"MethaneVariables Module\"]\n        SteadyState[\"SteadyState Subroutine\"]\n    end\n\n    SoilOrg[\"SoilOrg Subroutine\"] --\u003e MethaneDynamics\n    SoilOrg --\u003e N2Oemit\n    \n    MethaneDynamics --\u003e OpMethane\n    N2Oemit --\u003e OpN2O\n    OpN2O --\u003e OpGHG\n    OpMethane --\u003e OpGHG\n    \n    MethaneConstants --\u003e MethaneDynamics\n    MethaneVariables --\u003e MethaneDynamics\n    MethaneDynamics --\u003e SteadyState\n```\n\nSources: [Soil/GHG/Methane.for:12-357](). [Soil/GHG/GHG_mod.for:9-46]().\n\n### Data Flow\n\n```mermaid\ngraph LR\n    subgraph \"Inputs\"\n        CONTROL[\"CONTROL Type\"]\n        ISWITCH[\"ISWITCH Type\"]\n        SOILPROP[\"SOILPROP Type\"]\n        FLOODWAT[\"FLOODWAT Type\"]\n        SW[\"Soil Water Content\"]\n        RLV[\"Root Length Density\"]\n        newCO2[\"CO2 from OM Decomposition\"]\n        DRAIN[\"Drainage Rate\"]\n    end\n\n    subgraph \"GHG Processes\"\n        MethaneDyn[\"MethaneDynamics(...)\"]\n        SoilOM[\"Soil Organic Matter Decomposition\"]\n        N2OCalc[\"N2O Emissions Calculation\"]\n    end\n\n    subgraph \"Outputs\"\n        CH4_data[\"CH4_data Structure:\n        - CH4Emission\n        - CH4Consumption\n        - CH4Leaching\n        - CH4Stored\n        - CO2emission\n        - CumCH4Emission\n        - CumCO2Emission\"]\n        \n        N2O_data[\"N2O_data Structure:\n        - N2O_emitted\n        - N2_emitted\n        - NO_emitted\n        - CN2O_emitted\n        - CN2_emitted\n        - CNO_emitted\"]\n    end\n\n    CONTROL --\u003e MethaneDyn\n    ISWITCH --\u003e MethaneDyn\n    SOILPROP --\u003e MethaneDyn\n    FLOODWAT --\u003e MethaneDyn\n    SW --\u003e MethaneDyn\n    RLV --\u003e MethaneDyn\n    newCO2 --\u003e MethaneDyn\n    DRAIN --\u003e MethaneDyn\n\n    SoilOM --\u003e newCO2\n    \n    MethaneDyn --\u003e CH4_data\n    N2OCalc --\u003e N2O_data\n```\n\nSources: [Soil/GHG/Methane.for:13-15](). [Soil/GHG/GHG_mod.for:15-43]().\n\n## Methane Dynamics\n\nThe methane dynamics component simulates CH4 production, consumption, and emission in flooded soils. The model is particularly relevant for rice cultivation, where anaerobic conditions lead to significant methane production.\n\n### Model Description\n\nThe methane model in DSSAT is based on the Arah methane model, which calculates steady-state concentration profiles and fluxes of CH4 and O2 in a flooded soil profile. The model was originally developed by Jon Arah in Turbo Pascal and translated to Fortran for use with CERES-Rice.\n\n```mermaid\ngraph TD\n    subgraph \"MethaneDynamics Process\"\n        SOM[\"Soil Organic Matter Decomposition\"] --\u003e newCO2[\"CO2 Production\"]\n        newCO2 --\u003e CH4Substrate[\"CH4 Substrate\"]\n        CH4Substrate --\u003e MethaneProd[\"Methane Production\"]\n        \n        MethaneProd --\u003e CH4Transport[\"CH4 Transport Pathways\"]\n        \n        CH4Transport --\u003e PlantTransport[\"Plant-Mediated Transport\"]\n        CH4Transport --\u003e Ebullition[\"Ebullition/Bubbling\"]\n        CH4Transport --\u003e Diffusion[\"Diffusion\"]\n        \n        PlantTransport --\u003e CH4Emission[\"Total CH4 Emission\"]\n        Ebullition --\u003e CH4Emission\n        Diffusion --\u003e CH4Emission\n        \n        CH4Production[\"CH4Production\"]\n        CH4Consumption[\"CH4Consumption\"]\n        CH4Leaching[\"CH4Leaching\"]\n        CH4Stored[\"CH4 Stored in Soil/Floodwater\"]\n    end\n```\n\nSources: [Soil/GHG/Methane.for:12-142](). [Soil/GHG/Methmod.for:1-62]().\n\n### Key Processes\n\n1. **Substrate Availability**: Methane production is driven by substrate availability from decomposing organic matter.\n\n2. **Methane Production**: Occurs under anaerobic conditions when alternative electron acceptors (such as oxygen, nitrate, and ferric iron) are depleted.\n\n   ```\n   IF (buffconc \u003e 0.0) THEN\n      rCH4 = 0.3 * (1.0 - buffconc/24.0)    ! mol C m3/d  was 0.2\n      rCH4 = rCH4 * dlayr(i)/100. * 12. * 10.   ! kgC/ha/d\n   ELSE  \n      rCH4 = CSubstrate(i) / 2.0            ! kgC/ha/d\n   ENDIF\n   ```\n   \n   Source: [Soil/GHG/Methane.for:201-210]().\n\n3. **Methane Oxidation**: Consumption of methane by methanotrophic bacteria in aerobic zones of the soil.\n\n4. **Methane Transport**: Three main pathways are modeled:\n   - **Plant-mediated transport**: Through aerenchyma tissues in rice plants\n   - **Ebullition**: Release of methane bubbles when concentration exceeds solubility\n   - **Diffusion**: Movement of dissolved methane through soil pores and the floodwater\n\n5. **Environmental Controls**:\n   - Soil water content (anaerobic conditions)\n   - Temperature \n   - Soil pH\n   - Carbon substrate availability\n\n### Core Variables\n\n| Variable | Description | Units |\n|---------|------------|-------|\n| CH4Production | Daily CH4 production | kg[C]/ha |\n| CH4Consumption | Daily CH4 consumption by oxidation | kg[C]/ha |\n| CH4PlantFlux | Daily CH4 transport through plants | kg[C]/ha |\n| CH4Ebullition | Daily CH4 release via bubbling | kg[C]/ha |\n| CH4Diffusion | Daily CH4 movement via diffusion | kg[C]/ha |\n| CH4Leaching | Daily CH4 lost through leaching | kg[C]/ha |\n| CH4Emission | Total daily CH4 emission | kg[C]/ha |\n| CH4Stored | CH4 stored in soil and floodwater | kg[C]/ha |\n\nSources: [Soil/GHG/Methane.for:29-36](). [Soil/GHG/Methane.for:531-550]().\n\n### Implementation Details\n\nThe methane dynamics model is implemented in the `MethaneDynamics` subroutine in [Soil/GHG/Methane.for]() which serves as an interface between CERES-Rice and the Arah methane model. It utilizes helper modules including:\n\n1. `MethaneConstants` - Contains constants for methane model, such as diffusion rates, solubility, and inhibition parameters.\n2. `MethaneVariables` - Holds arrays and variables used in methane calculations.\n\nThe model works by setting up a one-dimensional vertical profile of soil layers and calculating the steady-state concentrations of methane and oxygen in these layers using numerical methods.\n\nSources: [Soil/GHG/Methane.for:13-360](). [Soil/GHG/Methmod.for:36-91]().\n\n## N2O Emissions\n\nThe N2O emissions component models the production and emissions of nitrous oxide from agricultural soils through nitrification and denitrification processes.\n\n### Model Description\n\nThe model calculates N2O emissions based on soil nitrogen transformations, tracking both nitrification-derived N2O and denitrification-derived N2O. It also accounts for the diffusion of N2O through the soil profile.\n\n```mermaid\ngraph TD\n    subgraph \"N2O Emissions Process\"\n        NH4[\"Soil NH4\"] --\u003e Nitrification[\"Nitrification\"]\n        Nitrification --\u003e NO3[\"Soil NO3\"]\n        Nitrification --\u003e N2ONitrif[\"N2O from Nitrification\"]\n        \n        NO3 --\u003e Denitrification[\"Denitrification\"]\n        Denitrification --\u003e N2ODenit[\"N2O from Denitrification\"]\n        Denitrification --\u003e N2[\"N2 Gas\"]\n        \n        N2ONitrif --\u003e N2OFlux[\"N2O Flux\"]\n        N2ODenit --\u003e N2OFlux\n        \n        WaterFactor[\"Soil Water Factor (WFPS)\"]\n        TempFactor[\"Soil Temperature Factor\"]\n        \n        WaterFactor --\u003e N2ONitrif\n        WaterFactor --\u003e N2ODenit\n        TempFactor --\u003e N2ONitrif\n        TempFactor --\u003e N2ODenit\n        \n        N2OFlux --\u003e N2ODiffusion[\"N2O Diffusion\"]\n        N2ODiffusion --\u003e N2OEmission[\"N2O Emission\"]\n    end\n```\n\nSources: [Soil/GHG/GHG_mod.for:46-209]().\n\n### Key Processes\n\n1. **Nitrification-derived N2O**: A fraction of NH4 converted to NO3 during nitrification is lost as N2O.\n\n2. **Denitrification-derived N2O**: During denitrification of NO3 to N2, N2O is produced as an intermediate product, some of which escapes to the atmosphere.\n\n3. **N2O Diffusion**: Simulates the movement of N2O through the soil profile. The model uses a simple representation where N2O produced in a layer diffuses based on soil water content:\n\n   ```\n   RateDiffus = dD0(L)\n   n2o_diffused = n2o_soil(L) * RateDiffus\n   ```\n   \n   Source: [Soil/GHG/GHG_mod.for:146-166]().\n\n4. **Environmental Controls**:\n   - **Soil Water Content**: Controls both nitrification and denitrification rates, with WFPS (Water-Filled Pore Space) as a key factor\n   - **Soil Temperature**: Affects microbial activity rates\n   - **Carbon Availability**: Influences denitrification\n   - **Soil pH**: Modifies microbial processes\n\n### Core Variables\n\n| Variable | Description | Units |\n|---------|------------|-------|\n| N2Odenit | N2O from denitrification by layer | kg[N]/ha |\n| N2ONitrif | N2O from nitrification by layer | kg[N]/ha |\n| N2flux | N2 gas production by layer | kg[N]/ha |\n| NOflux | NO gas production by layer | kg[N]/ha |\n| N2O_emitted | Daily N2O emission | kg[N]/ha |\n| N2_emitted | Daily N2 emission | kg[N]/ha |\n| NO_emitted | Daily NO emission | kg[N]/ha |\n| WFPS | Water-filled pore space | fraction |\n\nSources: [Soil/GHG/GHG_mod.for:17-36]().\n\n### Implementation Details\n\nThe N2O emissions model is implemented in the `N2Oemit` subroutine in [Soil/GHG/GHG_mod.for](). It handles the diffusion of N2O through the soil profile and calculation of emissions. The model uses the following key data structures:\n\n1. `N2O_type` - Contains daily and cumulative variables for N2O, N2, and NO emissions\n2. `N2Oemit` - Calculates N2O emissions based on soil nitrogen transformations\n3. `OpN2O` - Handles output for N2O emissions\n\nSources: [Soil/GHG/GHG_mod.for:47-208]().\n\n## Carbon Balance and CO2 Emissions\n\nThe carbon balance component tracks the transformations of carbon in the soil and calculates associated CO2 emissions from soil organic matter decomposition.\n\n### Model Description\n\nThe model accounts for all carbon inputs, transformations, and losses in the soil system, including carbon in organic matter, residues, soil microbial biomass, and emissions as CO2 and CH4.\n\n```mermaid\ngraph TD\n    subgraph \"Carbon Balance Components\"\n        SOM[\"Soil Organic Matter\"]\n        SurfaceLitter[\"Surface Litter\"]\n        SoilLitter[\"Soil Litter\"]\n        CH4Store[\"Stored CH4\"]\n        \n        OM_Add[\"Organic Additions\"]\n        Senescence[\"Plant Senescence\"]\n        HarvRes[\"Harvest Residue\"]\n        \n        CO2Emit[\"CO2 Emissions\"]\n        CH4Emit[\"CH4 Emissions\"]\n        CH4Leach[\"CH4 Leaching\"]\n        CH4Cons[\"CH4 Consumption\"]\n        \n        OM_Add --\u003e SOM\n        OM_Add --\u003e SurfaceLitter\n        OM_Add --\u003e SoilLitter\n        \n        Senescence --\u003e SurfaceLitter\n        Senescence --\u003e SoilLitter\n        \n        HarvRes --\u003e SurfaceLitter\n        HarvRes --\u003e SoilLitter\n        \n        SOM --\u003e CO2Emit\n        SurfaceLitter --\u003e CO2Emit\n        SoilLitter --\u003e CO2Emit\n        SOM --\u003e CH4Store\n        CH4Store --\u003e CH4Emit\n        CH4Store --\u003e CH4Leach\n        CH4Store --\u003e CH4Cons\n    end\n```\n\nSources: [Soil/SoilUtilities/SoilCBal.for:17-446]().\n\n### Key Processes\n\n1. **Carbon Inputs**:\n   - Organic matter applications\n   - Plant senescence\n   - Crop residues\n   \n2. **Carbon Transformations**:\n   - Decomposition of surface litter\n   - Decomposition of soil litter\n   - Transformation of soil organic matter pools\n   - Methane production from organic matter decomposition\n\n3. **Carbon Losses**:\n   - CO2 emissions from organic matter decomposition\n   - CH4 emissions, leaching, and consumption\n   \n4. **Carbon Balance Calculation**:\n\n   ```\n   TotalC = SSOMC(0) + TSOMC + LITC(0) + TLITC + CH4_data%CH4Stored\n   TotalAdd = RESC0D + RESC1D + SNCLDY + SNCSDY + THRC0D + THRC1D\n   TotalSub = CH4_data % CO2emission + CH4_data % CH4Emission + \n                CH4_data % CH4Leaching + CH4_data % CH4Consumption\n   \n   DayBal = TotalC - TotalCY - TotalAdd + TotalSub\n   ```\n   \n   Source: [Soil/SoilUtilities/SoilCBal.for:273-279]().\n\n### Core Variables\n\n| Variable | Description | Units |\n|---------|------------|-------|\n| SSOMC | Soil organic matter carbon by layer | kg[C]/ha |\n| LITC | Litter carbon by layer | kg[C]/ha |\n| CO2emission | Daily CO2 emissions | kg[C]/ha |\n| CumCO2Emission | Cumulative CO2 emissions | kg[C]/ha |\n| TotalC | Total carbon in system | kg[C]/ha |\n| TotalAdd | Total carbon additions | kg[C]/ha |\n| TotalSub | Total carbon losses | kg[C]/ha |\n| DayBal | Daily carbon balance | kg[C]/ha |\n| CumBal | Cumulative carbon balance | kg[C]/ha |\n\nSources: [Soil/SoilUtilities/SoilCBal.for:47-63]().\n\n### Implementation Details\n\nThe carbon balance is implemented in the `SOILCBAL` subroutine in [Soil/SoilUtilities/SoilCBal.for](). It calculates a comprehensive carbon balance for the soil system, including:\n\n1. Initial and final carbon stocks in soil organic matter and litter\n2. Carbon additions from organic applications, senescence, and residues\n3. Carbon losses through CO2 and CH4 emissions, CH4 leaching, and CH4 consumption\n4. Daily and cumulative carbon balance\n\nCalculation of CO2-equivalent emissions from all greenhouse gases is also performed, using global warming potentials (GWPs):\n\n```\n! N2O - convert from N to N2O and multiply by 298\nNCEQC = N2OEC * 1.571 * 298.\n\n! CH4 - convert from C to CH4 and multiply by 25\nMCEQC = CH4EC * 1.33 * 25.\n\n! Total CO2-equivalent\nTCEQC = CCEQC + NCEQC + MCEQC\n```\n\nSource: [Soil/GHG/GHG_mod.for:720-728]().\n\n## Output and Reporting\n\nThe GHG module provides several output options to report greenhouse gas emissions.\n\n### Output Files\n\n1. **N2O.OUT** - Daily N2O, N2, and NO emissions\n2. **Methane.OUT** - Daily methane fluxes, including production, consumption, emissions, and storage\n3. **GHG.OUT** - Daily CO2, N2O, and CH4 emissions in both mass units and CO2-equivalents\n4. **SoilCBal.OUT** - Daily carbon balance of the soil system\n5. **SoilCBalSum.OUT** - Summary of carbon balance at the end of the season\n\n### Key Output Variables\n\nThe GHG module reports the following key output variables:\n\n| Variable | Description | Units | File |\n|---------|------------|-------|------|\n| CO2ED | Daily CO2 emission | kg[C]/ha | GHG.OUT |\n| CH4ED | Daily CH4 emission | kg[C]/ha | GHG.OUT, Methane.OUT |\n| N2OGED | Daily N2O emission | g[N]/ha | GHG.OUT, N2O.OUT |\n| CO2EC | Cumulative CO2 emission | kg[C]/ha | GHG.OUT |\n| CH4EC | Cumulative CH4 emission | kg[C]/ha | GHG.OUT, Methane.OUT |\n| N2OEC | Cumulative N2O emission | kg[N]/ha | GHG.OUT, N2O.OUT |\n| CCEQC | Cumulative CO2-eq from CO2 | kg[CO2eq]/ha | GHG.OUT |\n| NCEQC | Cumulative CO2-eq from N2O | kg[CO2eq]/ha | GHG.OUT |\n| MCEQC | Cumulative CO2-eq from CH4 | kg[CO2eq]/ha | GHG.OUT |\n| TCEQC | Total cumulative CO2-eq | kg[CO2eq]/ha | GHG.OUT |\n\nSources: [Soil/GHG/GHG_mod.for:655-736](). [Soil/GHG/Methane.for:435-527]().\n\n### Implementation Details\n\nOutput handling is implemented in three main subroutines:\n\n1. `OpMethane` - Outputs daily methane fluxes to Methane.OUT\n2. `OpN2O` - Outputs daily N2O, N2, and NO emissions to N2O.OUT\n3. `OpGHG` - Outputs combined greenhouse gas emissions to GHG.OUT\n4. `SOILCBAL` - Outputs carbon balance to SoilCBal.OUT and SoilCBalSum.OUT\n\nSources: [Soil/GHG/Methane.for:362-529](). [Soil/GHG/GHG_mod.for:223-762]().\n\n## Integration with Other DSSAT-CSM Modules\n\nThe GHG emissions module integrates with several other components of DSSAT-CSM:\n\n```mermaid\ngraph LR\n    subgraph \"DSSAT-CSM Modules\"\n        SoilWater[\"Soil Water Module\"]\n        SoilTemp[\"Soil Temperature Module\"]\n        SoilOM[\"Soil Organic Matter Module\"]\n        PlantGrowth[\"Plant Growth Module\"]\n        \n        GHG_Module[\"GHG Emissions Module\"]\n        \n        SoilWater --\u003e GHG_Module\n        SoilTemp --\u003e GHG_Module\n        SoilOM --\u003e GHG_Module\n        PlantGrowth --\u003e GHG_Module\n        \n        GHG_Module --\u003e OutputMod[\"Output Module\"]\n    end\n```\n\nSources: [Soil/GHG/Methane.for:13-15](). [Soil/GHG/GHG_mod.for:46-56]().\n\n### Key Interfaces\n\n1. **Soil Water Module**: Provides soil moisture content, which controls anaerobic conditions for methane production and affects N2O production.\n\n2. **Soil Temperature Module**: Provides soil temperature, which influences microbial activity and gas diffusion rates.\n\n3. **Soil Organic Matter Module**: Provides information on organic matter decomposition (newCO2), which serves as substrate for methane production. This interface works with either CENTURY or CERES-SOM modules.\n\n4. **Plant Growth Module**: Provides root length density data used in calculating plant-mediated transport of methane.\n\n5. **Flooding Module**: Provides information on flood water depth, which affects methane dynamics in rice paddies.\n\nThe GHG module is integrated at multiple points in the DSSAT-CSM simulation sequence:\n\n1. In `RUNINIT`: Initializes methane dynamics model\n2. In `SEASINIT`: Sets initial conditions for the growing season\n3. In `RATE`: Calculates daily rates of GHG production and emissions\n4. In `INTEGR`: Performs daily integration of rates\n5. In `OUTPUT`: Outputs daily GHG values\n6. In `SEASEND`: Outputs seasonal summaries\n\nSources: [Soil/GHG/Methane.for:66-343](). [Soil/CERES_OrganicMatter/SoilOrg.for:187-225]()."])</script><script>self.__next_f.push([1,"2b:T27c6,"])</script><script>self.__next_f.push([1,"# Soil Dynamics\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [InputModule/ipexp.for](InputModule/ipexp.for)\n- [SPAM/ESR_SoilEvap.for](SPAM/ESR_SoilEvap.for)\n- [SPAM/SOILEV.for](SPAM/SOILEV.for)\n- [Soil/SoilUtilities/SOILDYN.for](Soil/SoilUtilities/SOILDYN.for)\n- [Soil/SoilWater/RNOFF.for](Soil/SoilWater/RNOFF.for)\n\n\u003c/details\u003e\n\n\n\nThe Soil Dynamics module in DSSAT-CSM computes and distributes soil parameters during simulations. It's responsible for handling changes in soil properties due to tillage operations, organic matter dynamics, and other processes that affect soil physical and hydraulic characteristics. This module serves as a foundation for many other simulation components by providing up-to-date soil properties.\n\nFor information about water movement through the soil profile, see [Soil Water Balance](#5.1).\nFor information about soil greenhouse gas emissions, see [Greenhouse Gas Emissions](#5.2).\n\n## Overview\n\nThe SOILDYN subroutine is the core of soil dynamics processing in DSSAT. It initializes soil profile parameters, computes derived properties, and updates them throughout the simulation in response to management and environmental factors.\n\n```mermaid\ngraph TD\n    MAIN[\"Main Program\"] --\u003e SOILDYN[\"SOILDYN\u003cbr\u003eSoil Dynamics\"]\n    SOILDYN --\u003e TEXTURECLASS[\"TEXTURECLASS\u003cbr\u003eClassify soil texture\"]\n    SOILDYN --\u003e SOILLAYERCLASS[\"SOILLAYERCLASS\u003cbr\u003eDefine soil layer types\"]\n    SOILDYN --\u003e CALBROKCRYPARA[\"CALBROKCRYPARA\u003cbr\u003eBrooks-Corey parameters\"]\n    SOILDYN --\u003e RETC_VG[\"RETC_VG\u003cbr\u003evan Genuchten parameters\"]\n    SOILDYN --\u003e TILLEVENT[\"TILLEVENT\u003cbr\u003eProcess tillage operations\"]\n    SOILDYN --\u003e SOILMIXING[\"SOILMIXING\u003cbr\u003eMix soil layers\"]\n    \n    SOILDYN --\u003e SOILPROP[\"SOILPROP\u003cbr\u003eOutput soil properties\"]\n    SOILPROP -.-\u003e Other[\"Other modules\u003cbr\u003e(WATBAL, SPAM, PLANT)\"]\n```\n\nSources: [Soil/SoilUtilities/SOILDYN.for:37-41](), [Soil/SoilUtilities/SOILDYN.for:47-49]()\n\n## Soil Properties\n\nDSSAT-CSM represents soil as a multi-layered system, with each layer containing a set of physical and chemical properties. The `SOILPROP` variable is a composite type that stores all these properties.\n\n### Key Soil Properties\n\n| Property | Description | Units | Dynamic |\n|----------|-------------|-------|---------|\n| BD | Bulk density | g/cm³ | Yes |\n| DLAYR | Thickness of soil layer | cm | Yes |\n| DS | Depth to bottom of layer | cm | No |\n| LL | Lower limit water content | cm³/cm³ | Yes |\n| DUL | Drained upper limit | cm³/cm³ | Yes |\n| SAT | Saturated water content | cm³/cm³ | Yes |\n| SWCN | Saturated hydraulic conductivity | cm/h | Yes |\n| CLAY | Clay content | % | No |\n| SAND | Sand content | % | No |\n| SILT | Silt content | % | No |\n| OC | Organic carbon content | % | Yes |\n| PH | Soil pH | - | No |\n| CEC | Cation exchange capacity | cmol/kg | No |\n| CN | SCS curve number | - | Yes |\n| POROS | Porosity | cm³/cm³ | Yes |\n| KG2PPM | Conversion factor kg/ha to ppm | - | Calculated |\n\nSources: [Soil/SoilUtilities/SOILDYN.for:72-98](), [Soil/SoilUtilities/SOILDYN.for:846-901]()\n\n### Property Hierarchy\n\nSoil properties are categorized as fixed (unchanging) or dynamic (updated during simulation):\n\n```mermaid\ngraph TD\n    SOILPROP[\"SOILPROP\u003cbr\u003eSoil Properties\"] --\u003e Fixed[\"Fixed Properties\"]\n    SOILPROP --\u003e Dynamic[\"Dynamic Properties\"]\n    \n    Fixed --\u003e TextureProp[\"Texture Properties\u003cbr\u003eCLAY, SILT, SAND\"]\n    Fixed --\u003e ChemProp[\"Chemical Properties\u003cbr\u003ePH, CEC, EXTP, TOTP\"]\n    Fixed --\u003e DepthProp[\"Depth Properties\u003cbr\u003eDS\"]\n    \n    Dynamic --\u003e PhysicalProp[\"Physical Properties\u003cbr\u003eBD, DLAYR, POROS\"]\n    Dynamic --\u003e HydraulicProp[\"Hydraulic Properties\u003cbr\u003eLL, DUL, SAT, SWCN\"]\n    Dynamic --\u003e SurfaceProp[\"Surface Properties\u003cbr\u003eCN, SALB\"]\n    Dynamic --\u003e OrganicProp[\"Organic Properties\u003cbr\u003eOC, TotOrgN\"]\n```\n\nSources: [Soil/SoilUtilities/SOILDYN.for:138-157](), [Soil/SoilUtilities/SOILDYN.for:846-914]()\n\n## Soil Dynamics Processes\n\n### Initialization\n\nDuring model initialization, SOILDYN reads soil profile data, validates it, and computes derived properties. If critical data is missing, the module provides default values or estimates based on other properties:\n\n1. Read soil profile data from the input file\n2. Validate soil parameters (texture, pH, bulk density, etc.)\n3. Fill in missing values with defaults if necessary\n4. Calculate derived properties (porosity, water retention parameters, etc.)\n5. Initialize baseline values for dynamic properties\n\nSources: [Soil/SoilUtilities/SOILDYN.for:190-914]()\n\n### Organic Matter Effects\n\nSoil organic matter significantly affects soil physical properties, particularly bulk density and water retention. SOILDYN calculates these effects during the rate calculations:\n\n```mermaid\ngraph TD\n    SOM[\"Soil Organic Matter\u003cbr\u003eSomLit, SomLitC\"] --\u003e BD_change[\"Change in Bulk Density\u003cbr\u003edBD_SOM\"]\n    BD_change --\u003e BD[\"Updated BD\"]\n    BD_change --\u003e DLAYR[\"Updated DLAYR\"]\n    BD_change --\u003e DUL[\"Updated DUL\"]\n    BD_change --\u003e LL[\"Updated LL\"]\n```\n\nThe module tracks changes in organic matter content (`SomLit`, `SomLitC`) and adjusts soil properties accordingly. Increasing organic matter typically decreases bulk density and increases water holding capacity.\n\nSources: [Soil/SoilUtilities/SOILDYN.for:1025-1052](), [Soil/SoilUtilities/SOILDYN.for:1387-1412]()\n\n### Tillage Effects\n\nTillage operations significantly modify soil physical properties, especially in the upper layers:\n\n```mermaid\ngraph TD\n    TILLAGE[\"Tillage Operation\u003cbr\u003eTILLVALS\"] --\u003e BD_till[\"Decrease Bulk Density\u003cbr\u003eBD_TILLED\"]\n    TILLAGE --\u003e DL_till[\"Increase Layer Thickness\u003cbr\u003eDL_TILLED\"]\n    TILLAGE --\u003e CN_till[\"Decrease Curve Number\u003cbr\u003eCN_TILLED\"]\n    TILLAGE --\u003e SC_till[\"Increase Conductivity\u003cbr\u003eSC_TILLED\"]\n    \n    BD_till --\u003e BD[\"Updated BD\"]\n    DL_till --\u003e DLAYR[\"Updated DLAYR\"]\n    CN_till --\u003e CN[\"Updated CN\"]\n    SC_till --\u003e SWCN[\"Updated SWCN\"]\n```\n\nWhen a tillage event occurs, SOILDYN modifies the affected soil layers based on the type and depth of tillage. These changes gradually revert to baseline values over time as the soil reconsolidates due to rainfall and natural processes.\n\nSources: [Soil/SoilUtilities/SOILDYN.for:1426-1485]()\n\n### Rainfall Effects\n\nRainfall impacts soil surface properties, particularly the curve number (CN) which affects runoff and infiltration:\n\n```mermaid\ngraph TD\n    RAIN[\"Rainfall\u003cbr\u003eWEATHER.RAIN\"] --\u003e KE[\"Rainfall Kinetic Energy\u003cbr\u003eSUMKE, KECHGE\"]\n    KE --\u003e CN_rain[\"Increase Curve Number\u003cbr\u003eCN\"]\n    CN_rain --\u003e CN[\"Updated CN\"]\n```\n\nAccumulated rainfall energy gradually reconsolidates tilled soil, increasing the curve number and reducing infiltration capacity over time.\n\nSources: [Soil/SoilUtilities/SOILDYN.for:1486-1506](), [Soil/SoilWater/RNOFF.for:78-110]()\n\n## Water Retention Parameters\n\nSOILDYN calculates two sets of soil water retention parameters to describe the relationship between soil water content and matric potential:\n\n1. **Brooks-Corey Parameters**: `hb` (bubbling pressure) and `lambda` (pore size distribution index)\n2. **van Genuchten Parameters**: `alphaVG`, `nVG`, and `mVG`\n\nThese parameters are calculated based on soil texture, structure, and hydraulic properties (LL, DUL, SAT). If values are missing from input data, they are estimated using pedotransfer functions.\n\nSources: [Soil/SoilUtilities/SOILDYN.for:770-834]()\n\n## Interactions with Other Modules\n\nThe Soil Dynamics module provides essential soil properties to several other DSSAT components:\n\n### Soil Water Balance\n\nSOILDYN supplies the water retention parameters, curve number, and hydraulic conductivity needed for runoff, infiltration, and soil water movement calculations.\n\nSources: [Soil/SoilWater/RNOFF.for:22-126]()\n\n### Soil Evaporation\n\nSoil physical properties, particularly in the upper layers, affect soil evaporation rates. The soil evaporation modules (`SOILEV` and `ESR_SoilEvap`) use these properties to calculate actual evaporation from the soil surface.\n\nSources: [SPAM/SOILEV.for:30-183](), [SPAM/ESR_SoilEvap.for:33-183]()\n\n### Plant Growth\n\nRoot growth and water uptake depend on soil physical properties, including bulk density, porosity, and water retention characteristics.\n\n## Implementation Details\n\n### Data Flow\n\n```mermaid\ngraph TD\n    INPUT[\"INPUT Module\"] --\u003e IPEXP[\"IPEXP\u003cbr\u003eRead experiment data\"]\n    IPEXP --\u003e SOIL_DATA[\"Soil Profile Data\"]\n    SOIL_DATA --\u003e SOILDYN[\"SOILDYN\u003cbr\u003eProcess soil dynamics\"]\n    \n    TILLVALS[\"TILLVALS\u003cbr\u003eTillage operations\"] --\u003e SOILDYN\n    SomLit[\"SomLit\u003cbr\u003eSoil organic matter\"] --\u003e SOILDYN\n    WEATHER[\"WEATHER\u003cbr\u003eRainfall data\"] --\u003e SOILDYN\n    \n    SOILDYN --\u003e SOILPROP[\"SOILPROP\u003cbr\u003eSoil properties\"]\n    SOILPROP --\u003e WATBAL[\"WATBAL\u003cbr\u003eSoil water balance\"]\n    SOILPROP --\u003e SPAM[\"SPAM\u003cbr\u003eSoil-Plant-Atmosphere\"]\n    SOILPROP --\u003e PLANT[\"PLANT\u003cbr\u003ePlant growth modules\"]\n```\n\nSources: [Soil/SoilUtilities/SOILDYN.for:37-41](), [InputModule/ipexp.for:577-649]()\n\n### Processing Sequence\n\nSOILDYN operates through several phases during simulation:\n\n1. **Run Initialization (RUNINIT)**: Read soil profile data, validate inputs, calculate derived properties\n2. **Season Initialization (SEASINIT)**: Reset dynamic properties to initial values\n3. **Rate Calculations (RATE)**: Calculate effects of organic matter, tillage, and rainfall\n4. **Integration (INTEGR)**: Update soil properties based on rate calculations\n5. **Output (OUTPUT)**: Write results to output files\n\nSources: [Soil/SoilUtilities/SOILDYN.for:190-915](), [Soil/SoilUtilities/SOILDYN.for:951-1016](), [Soil/SoilUtilities/SOILDYN.for:1025-1175](), [Soil/SoilUtilities/SOILDYN.for:1184-1557]()\n\n## Summary\n\nThe Soil Dynamics module provides a critical foundation for DSSAT simulations by tracking changes in soil physical properties due to management practices and natural processes. By dynamically updating soil parameters in response to tillage, organic matter changes, and rainfall, it enables more realistic simulation of soil-plant-atmosphere interactions. This module significantly contributes to DSSAT's ability to accurately model crop growth across diverse environments and management systems.\n\nSources: [Soil/SoilUtilities/SOILDYN.for:8-35]()"])</script><script>self.__next_f.push([1,"2c:T4708,"])</script><script>self.__next_f.push([1,"# Input/Output System\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [Data/DATA.CDE](Data/DATA.CDE)\n- [InputModule/COMGEN.blk](InputModule/COMGEN.blk)\n- [InputModule/INVAR.for](InputModule/INVAR.for)\n- [InputModule/IPVAR.for](InputModule/IPVAR.for)\n- [InputModule/OPHEAD.for](InputModule/OPHEAD.for)\n- [InputModule/OPTEMPXY2K.for](InputModule/OPTEMPXY2K.for)\n- [InputModule/SEVAR.for](InputModule/SEVAR.for)\n- [InputModule/optempy2k.for](InputModule/optempy2k.for)\n- [Plant/CERES-Rice/RI_Opgrow.for](Plant/CERES-Rice/RI_Opgrow.for)\n- [Plant/CROPGRO/OPHARV.for](Plant/CROPGRO/OPHARV.for)\n- [Utilities/CsvOuts/csvlinklist.f90](Utilities/CsvOuts/csvlinklist.f90)\n- [Utilities/CsvOuts/csvoutput.f90](Utilities/CsvOuts/csvoutput.f90)\n- [Utilities/OPSUM.for](Utilities/OPSUM.for)\n\n\u003c/details\u003e\n\n\n\nThe Input/Output System in DSSAT-CSM (Decision Support System for Agrotechnology Transfer - Cropping System Model) manages the flow of data into and out of the simulation models. This system handles reading of input files with simulation parameters, writing simulation results to various output files, and maintaining standardized codes for data exchange. This page describes the structure and functionality of this system, including its key components, file formats, and data flow mechanisms.\n\nFor information about building DSSAT-CSM, see [Build System](#2.1). For information about simulation control specifically, see [Simulation Control](#2.2).\n\n## Input System Overview\n\nThe Input System reads and processes data from various input files that define simulation parameters, environmental conditions, genetic traits, and management practices. It translates these inputs into data structures that the simulation models can use.\n\n```mermaid\ngraph TD\n    InputFiles[\"Input Files\"] --\u003e InputModule[\"Input Module\"]\n    InputModule --\u003e |\"Parse Parameters\"| DataStructures[\"Data Structures\"]\n    DataStructures --\u003e SimulationModels[\"Simulation Models\"]\n    \n    subgraph \"Input Files\"\n        FileX[\"X-file\u003cbr\u003e(Experiment)\"]\n        FileA[\"A-file\u003cbr\u003e(Observed Data)\"]\n        FileS[\"S-file\u003cbr\u003e(Soil Data)\"]\n        FileW[\"W-file\u003cbr\u003e(Weather Data)\"]\n        FileC[\"C-file\u003cbr\u003e(Crop Species)\"]\n        FileE[\"E-file\u003cbr\u003e(Ecotype)\"]\n        FileG[\"G-file\u003cbr\u003e(Cultivar)\"]\n    end\n    \n    subgraph \"Parsing Routines\"\n        IPVAR[\"IPVAR\u003cbr\u003eCultivar Parameters\"]\n        IPSOIL[\"IPSOIL\u003cbr\u003eSoil Parameters\"]\n        IPWTH[\"IPWTH\u003cbr\u003eWeather Data\"]\n        IPEXP[\"IPEXP\u003cbr\u003eExperiment Details\"]\n    end\n    \n    FileX --\u003e InputModule\n    FileA --\u003e InputModule\n    FileS --\u003e InputModule\n    FileW --\u003e InputModule\n    FileC --\u003e InputModule\n    FileE --\u003e InputModule\n    FileG --\u003e InputModule\n    \n    InputModule --\u003e IPVAR\n    InputModule --\u003e IPSOIL\n    InputModule --\u003e IPWTH\n    InputModule --\u003e IPEXP\n```\n\nSources: \n- [InputModule/IPVAR.for:1-192]()\n- [InputModule/optempy2k.for:1-165]()\n- [InputModule/COMGEN.blk:1-153]()\n\n### Input File Structure\n\nDSSAT-CSM uses a series of structured input files, each with a specific role:\n\n- **X-file**: Experiment details, treatments, and field conditions\n- **A-file**: Observed field data for model evaluation\n- **S-file**: Soil profile characteristics\n- **W-file**: Weather data\n- **C-file**: Crop species parameters\n- **E-file**: Crop ecotype parameters\n- **G-file**: Cultivar genetic coefficients\n\nThe parameters from these files are read and processed by corresponding routines in the Input Module, which then populate data structures used by the simulation models.\n\nSources:\n- [InputModule/OPTEMPXY2K.for:1-163]()\n- [InputModule/optempy2k.for:38-162]()\n\n### Standardized Data Codes\n\nA critical component of the Input/Output System is the set of standardized codes used for data interchange, defined in the `DATA.CDE` file. These codes facilitate consistent representation of field measurements and simulated variables throughout the system.\n\n```mermaid\ngraph LR\n    DATACDE[\"DATA.CDE\u003cbr\u003eStandardized Codes\"] --\u003e |\"Used by\"| InputSystem[\"Input System\"]\n    DATACDE --\u003e |\"Used by\"| OutputSystem[\"Output System\"]\n    \n    subgraph \"Code Structure\"\n        Code[\"CDE\u003cbr\u003eUniversal Code\"]\n        Label[\"LABEL\u003cbr\u003eShort Description\"]\n        Description[\"DESCRIPTION\u003cbr\u003eDetailed Definition\"]\n        Synonyms[\"SYNONYMS\u003cbr\u003eAlternative Codes\"]\n    end\n    \n    DATACDE --\u003e Code\n    DATACDE --\u003e Label\n    DATACDE --\u003e Description\n    DATACDE --\u003e Synonyms\n```\n\nThe codes follow a structured convention:\n- 1st letter: Plant component (e.g., C for canopy, H for harvest product)\n- 2nd letter: Measurement aspect (e.g., W for dry weight, N for nitrogen weight)\n- 3rd letter: Basis of measurement (e.g., A for unit area, P for plant)\n- 4th letter: Time or stage of measurement (e.g., D for specific day)\n\nExample data code sections include:\n- SUMMARY: Season-end summary variables\n- GROWTH: Plant growth variables\n- NITROGEN: Nitrogen-related variables\n\nSources:\n- [Data/DATA.CDE:1-105]()\n\n## Output System Overview\n\nThe Output System processes simulation results and writes them to various output files in different formats. It handles different types of outputs, from detailed daily values to seasonal summaries.\n\n```mermaid\ngraph TD\n    SimResults[\"Simulation Results\"] --\u003e OutputModule[\"Output Module\"]\n    OutputModule --\u003e DailyOutputs[\"Daily Output Files\"]\n    OutputModule --\u003e SeasonalOutputs[\"Seasonal Output Files\"]\n    OutputModule --\u003e EvaluationOutputs[\"Evaluation Output Files\"]\n    \n    subgraph \"Output Components\"\n        OPSUM[\"OPSUM\u003cbr\u003eSummary Output\"]\n        CsvOutput[\"CsvOutput Module\u003cbr\u003eCSV Format\"]\n        OPHARV[\"OPHARV\u003cbr\u003eHarvest Data\"]\n        OPHEAD[\"OPHEAD\u003cbr\u003eOutput Headers\"]\n    end\n    \n    OutputModule --\u003e OPSUM\n    OutputModule --\u003e CsvOutput\n    OutputModule --\u003e OPHARV\n    OutputModule --\u003e OPHEAD\n    \n    OPSUM --\u003e Summary[\"Summary.OUT\"]\n    OPHARV --\u003e Overview[\"Overview.OUT\"]\n    CsvOutput --\u003e CSVFiles[\"*.CSV Files\"]\n```\n\nSources:\n- [Utilities/OPSUM.for:1-104]()\n- [Utilities/CsvOuts/csvoutput.f90:1-80]()\n- [Plant/CROPGRO/OPHARV.for:1-40]()\n- [InputModule/OPHEAD.for:1-22]()\n\n### Output File Types\n\nDSSAT-CSM generates several types of output files:\n\n1. **Daily Output Files**:\n   - PlantGro.OUT: Daily plant growth variables\n   - PlantN.OUT: Daily plant nitrogen variables\n   - SoilWat.OUT: Daily soil water variables\n   - Weather.OUT: Daily weather data\n\n2. **Seasonal Output Files**:\n   - Summary.OUT: End-of-season summary variables for multiple simulations\n   - Evaluate.OUT: Comparison of simulated and measured values\n\n3. **CSV Format Files**:\n   - CSV versions of the above files for easier data processing\n\nThe system supports multiple output formats, controlled by the `FMOPT` parameter:\n- 'A': Standard ASCII output\n- 'C': CSV output\n\nSources:\n- [Utilities/OPSUM.for:192-269]()\n- [Utilities/CsvOuts/csvoutput.f90:89-167]()\n- [Plant/CROPGRO/OPHARV.for:98-188]()\n\n### SumModule and Data Structures\n\nThe `SumModule` defines data structures for seasonal summary and evaluation data. It is a crucial component that organizes output data before it is written to files.\n\n```mermaid\ngraph TD\n    subgraph \"SumModule\"\n        SummaryType[\"SummaryType Structure\u003cbr\u003eSummary.OUT Variables\"]\n        EvaluateType[\"EvaluateType Structure\u003cbr\u003eEvaluate.OUT Variables\"]\n    end\n    \n    subgraph \"SummaryType Variables\"\n        YieldVars[\"Yield Variables\u003cbr\u003eHWAM, HWAH, etc.\"]\n        WaterVars[\"Water Variables\u003cbr\u003eIRCM, PRCM, etc.\"]\n        NitrogenVars[\"Nitrogen Variables\u003cbr\u003eNICM, NUCM, etc.\"]\n        EnvironVars[\"Environmental Variables\u003cbr\u003eTMINA, TMAXA, etc.\"]\n    end\n    \n    subgraph \"EvaluateType Variables\"\n        MeasuredVals[\"Measured Values\"]\n        SimulatedVals[\"Simulated Values\"]\n        Descriptions[\"Variable Descriptions\"]\n    end\n    \n    SummaryType --\u003e YieldVars\n    SummaryType --\u003e WaterVars\n    SummaryType --\u003e NitrogenVars\n    SummaryType --\u003e EnvironVars\n    \n    EvaluateType --\u003e MeasuredVals\n    EvaluateType --\u003e SimulatedVals\n    EvaluateType --\u003e Descriptions\n    \n    SumModule --\u003e |\"Used by\"| OPSUM[\"OPSUM Subroutine\"]\n    OPSUM --\u003e Summary[\"Summary.OUT\"]\n    OPSUM --\u003e Evaluate[\"Evaluate.OUT\"]\n```\n\nSources:\n- [Utilities/OPSUM.for:32-99]()\n- [Utilities/OPSUM.for:326-391]()\n\n### CSV Output Mechanism\n\nThe CSV output system uses a module-based approach with linked lists to efficiently manage data for CSV output files.\n\n```mermaid\ngraph TD\n    CsvOutput[\"CsvOutput Module\"] --\u003e |\"Defines\"| VarBuffers[\"Variable Buffers\u003cbr\u003efor Different Output Types\"]\n    CsvOutput --\u003e |\"Contains\"| CsvOutInterface[\"CsvOut Interface\u003cbr\u003eGeneric Subroutine\"]\n    \n    subgraph \"Specific Output Routines\"\n        CsvOut_cscer[\"CsvOut_cscer\u003cbr\u003eCSCER Model\"]\n        CsvOut_crgro[\"CsvOut_crgro\u003cbr\u003eCROPGRO Model\"]\n        CsvOutSW_crgro[\"CsvOutSW_crgro\u003cbr\u003eSoil Water\"]\n        CsvOutTemp_crgro[\"CsvOutTemp_crgro\u003cbr\u003eSoil Temperature\"]\n        CsvOutET[\"CsvOutET\u003cbr\u003eEvapotranspiration\"]\n    end\n    \n    CsvOutInterface --\u003e CsvOut_cscer\n    CsvOutInterface --\u003e CsvOut_crgro\n    \n    Linklist[\"Linklist Module\u003cbr\u003eData Structure Management\"] --\u003e |\"Used by\"| CsvOutput\n    \n    subgraph \"Linked List Structures\"\n        LinValue[\"lin_value Type\u003cbr\u003eGeneric Data\"]\n        LinValueSW[\"lin_valueSW Type\u003cbr\u003eSoil Water Data\"]\n        LinValueTemp[\"lin_valueTemp Type\u003cbr\u003eTemperature Data\"]\n        LinValueET[\"lin_valueET Type\u003cbr\u003eET Data\"]\n    end\n    \n    Linklist --\u003e LinValue\n    Linklist --\u003e LinValueSW\n    Linklist --\u003e LinValueTemp\n    Linklist --\u003e LinValueET\n```\n\nSources:\n- [Utilities/CsvOuts/csvoutput.f90:1-187]()\n- [Utilities/CsvOuts/csvlinklist.f90:1-190]()\n\n## Input/Output Data Flow\n\nThe following diagram illustrates the overall data flow through the Input/Output System:\n\n```mermaid\ngraph TD\n    InputFiles[\"Input Files\"] --\u003e InputModule[\"Input Module\"]\n    InputModule --\u003e |\"Parse and Validate\"| DataStructures[\"Internal Data Structures\"]\n    DataStructures --\u003e |\"Used by\"| SimulationModels[\"Simulation Models\"]\n    SimulationModels --\u003e |\"Generate Results\"| ResultStructures[\"Result Data Structures\"]\n    ResultStructures --\u003e OutputModule[\"Output Module\"]\n    OutputModule --\u003e |\"Format and Write\"| OutputFiles[\"Output Files\"]\n    \n    subgraph \"Input Processing\"\n        IPVAR[\"IPVAR\u003cbr\u003eParse Cultivar Data\"]\n        IPEXP[\"IPEXP\u003cbr\u003eParse Experiment Data\"]\n        standardCodes[\"DATA.CDE\u003cbr\u003eStandard Variable Codes\"]\n    end\n    \n    subgraph \"Output Processing\"\n        OPSUM[\"OPSUM\u003cbr\u003eSummary Output\"]\n        OPHARV[\"OPHARV\u003cbr\u003eHarvest Output\"]\n        OPHEAD[\"OPHEAD\u003cbr\u003eHeader Generation\"]\n        CsvOutput[\"CsvOutput\u003cbr\u003eCSV Format\"]\n    end\n    \n    InputModule --\u003e IPVAR\n    InputModule --\u003e IPEXP\n    standardCodes --\u003e |\"Used by\"| InputModule\n    standardCodes --\u003e |\"Used by\"| OutputModule\n    \n    OutputModule --\u003e OPSUM\n    OutputModule --\u003e OPHARV\n    OutputModule --\u003e OPHEAD\n    OutputModule --\u003e CsvOutput\n    \n    OPSUM --\u003e Summary[\"Summary.OUT\"]\n    OPHARV --\u003e Overview[\"Overview.OUT\"]\n    OPHEAD --\u003e Headers[\"File Headers\"]\n    CsvOutput --\u003e CSVFiles[\"*.CSV Files\"]\n```\n\nSources:\n- [Utilities/OPSUM.for:1-100]()\n- [Utilities/CsvOuts/csvoutput.f90:1-50]()\n- [InputModule/IPVAR.for:1-50]()\n- [Data/DATA.CDE:1-50]()\n\n## HeaderMod Module\n\nThe `HeaderMod` module manages header information for output files. It contains the `HeaderType` structure and routines to update headers for multi-year runs.\n\n```mermaid\ngraph TD\n    HeaderMod[\"HeaderMod Module\"] --\u003e |\"Defines\"| HeaderType[\"HeaderType Structure\"]\n    HeaderMod --\u003e |\"Contains\"| MULTIRUN[\"MULTIRUN Subroutine\u003cbr\u003eUpdate Headers for Multi-Year Runs\"]\n    \n    HeaderType --\u003e |\"Properties\"| ICOUNT[\"ICOUNT\u003cbr\u003eNumber of Lines in Long Header\"]\n    HeaderType --\u003e |\"Properties\"| ShortCount[\"ShortCount\u003cbr\u003eNumber of Lines in Short Header\"]\n    HeaderType --\u003e |\"Properties\"| RUN[\"RUN\u003cbr\u003eRun Number\"]\n    HeaderType --\u003e |\"Properties\"| Header[\"Header Array\u003cbr\u003eText Lines\"]\n    \n    OPHEAD[\"OPHEAD Subroutine\"] --\u003e |\"Uses\"| HeaderMod\n    OPHEAD --\u003e |\"Generates\"| FileHeaders[\"Output File Headers\"]\n```\n\nSources:\n- [InputModule/OPHEAD.for:17-98]()\n- [InputModule/OPHEAD.for:101-142]()\n\n## Measurement Codes and Data Interchange\n\nThe standardized measurement codes defined in `DATA.CDE` are central to data interchange in DSSAT-CSM. These codes ensure consistent representation of variables across input, simulation, and output processes.\n\nThe following table shows examples of important measurement codes used in the system:\n\n| Code | Label | Description | Usage |\n|------|-------|-------------|-------|\n| ADAT | Anthesis date | Anthesis date (YrDoy) | Plant development stage |\n| HWAH | Harvested yield | Harvested yield (kg [dm]/ha) | Harvest results |\n| CWAM | Tops wt kg/ha | Tops weight at maturity (kg [dm]/ha) | Biomass measurement |\n| LAIX | LAI maximum | Leaf area index, maximum | Canopy structure |\n| PRCP | Precip mm | Total season precipitation (mm) | Weather data |\n| ETCM | ET total mm | Total season evapotranspiration (mm) | Water balance |\n| NUCM | N uptake kg/ha | N uptake during season (kg [N]/ha) | Nitrogen uptake |\n\nThese codes are used extensively in output files and data exchange between simulation components.\n\nSources:\n- [Data/DATA.CDE:26-106]()\n- [Data/DATA.CDE:107-201]()\n- [Utilities/OPSUM.for:148-187]()\n\n## Output Generation Process\n\nThe output generation process involves several key components that collect, process, and format simulation results.\n\n```mermaid\nflowchart TD\n    SimulationModels[\"Simulation Models\"] --\u003e |\"Provide Results\"| DataCollection[\"Data Collection\"]\n    DataCollection --\u003e SumModule[\"SumModule\u003cbr\u003eData Organization\"]\n    SumModule --\u003e |\"Seasonal Data\"| OPSUM[\"OPSUM\u003cbr\u003eSummary Output\"]\n    SumModule --\u003e |\"Evaluation Data\"| Evaluation[\"Evaluation Output\"]\n    \n    SimulationModels --\u003e |\"Daily Data\"| DailyOutput[\"Daily Output Processing\"]\n    DailyOutput --\u003e PlantGro[\"PlantGro.OUT\"]\n    DailyOutput --\u003e SoilWat[\"SoilWat.OUT\"]\n    \n    OPSUM --\u003e |\"ASCII Format\"| SummaryOUT[\"Summary.OUT\"]\n    OPSUM --\u003e |\"CSV Format\"| SummaryCSV[\"Summary.CSV\"]\n    \n    Evaluation --\u003e |\"ASCII Format\"| EvaluateOUT[\"Evaluate.OUT\"]\n    Evaluation --\u003e |\"CSV Format\"| EvaluateCSV[\"Evaluate.CSV\"]\n    \n    OPHEAD[\"OPHEAD\u003cbr\u003eHeader Generation\"] --\u003e |\"Provides Headers for\"| SummaryOUT\n    OPHEAD --\u003e |\"Provides Headers for\"| PlantGro\n    OPHEAD --\u003e |\"Provides Headers for\"| SoilWat\n    \n    OutputFormat[\"Output Format Control\u003cbr\u003eFMOPT Parameter\"] --\u003e |\"Controls\"| OPSUM\n    OutputFormat --\u003e |\"Controls\"| DailyOutput\n```\n\nThe key steps in output generation are:\n\n1. Collection of simulation results from model components\n2. Organization of data in the `SumModule` structures\n3. Processing by output routines (`OPSUM`, daily output routines)\n4. Formatting according to the selected output format (ASCII or CSV)\n5. Addition of headers from `OPHEAD`\n6. Writing to output files\n\nSources:\n- [Utilities/OPSUM.for:428-597]()\n- [Plant/CROPGRO/OPHARV.for:324-489]()\n- [InputModule/OPHEAD.for:101-214]()\n- [Plant/CERES-Rice/RI_Opgrow.for:91-137]()\n\n## CSV Output System\n\nThe CSV output system provides an alternative output format that is more easily imported into spreadsheets and other data analysis tools. It uses a sophisticated buffering and linked list mechanism to efficiently handle data.\n\n```mermaid\nflowchart TD\n    SimResults[\"Simulation Results\"] --\u003e CsvOutput[\"CsvOutput Module\"]\n    CsvOutput --\u003e |\"Generic Interface\"| CsvOut[\"CsvOut Interface\"]\n    \n    CsvOut --\u003e |\"Crop-Specific Implementation\"| CsvOut_crgro[\"CsvOut_crgro\u003cbr\u003eCROPGRO Models\"]\n    CsvOut --\u003e |\"Crop-Specific Implementation\"| CsvOut_cscer[\"CsvOut_cscer\u003cbr\u003eCSCER Models\"]\n    \n    CsvOut_crgro --\u003e |\"Format Data\"| TempBuffer[\"Temporary Buffer\"]\n    CsvOut_cscer --\u003e |\"Format Data\"| TempBuffer\n    \n    TempBuffer --\u003e |\"Allocate\"| Csvline[\"Csvline\u003cbr\u003eDynamic Character String\"]\n    Csvline --\u003e |\"Point to\"| pCsvline[\"pCsvline\u003cbr\u003eCharacter Pointer\"]\n    \n    Linklist[\"Linklist Module\"] --\u003e |\"Manages\"| LinkedListStructures[\"Linked List Data Structures\"]\n    LinkedListStructures --\u003e |\"Store\"| OutputLines[\"Output Lines\"]\n    \n    pCsvline --\u003e |\"Stored in\"| LinkedListStructures\n    OutputLines --\u003e CSVFiles[\"CSV Output Files\"]\n```\n\nThe key features of the CSV output system include:\n\n1. Dynamic character strings for variable-length output lines\n2. Pointer-based access to output line data\n3. Type-specific formatting routines for different model outputs\n4. Linked list data structures for efficient data management\n\nSources:\n- [Utilities/CsvOuts/csvoutput.f90:178-273]()\n- [Utilities/CsvOuts/csvlinklist.f90:1-101]()\n- [Utilities/OPSUM.for:534-570]()\n\n## Integration with Simulation Control\n\nThe Input/Output System is closely integrated with the Simulation Control system. The control parameters influence how input is processed and how output is generated.\n\nKey integration points include:\n\n1. **Run Mode**: Determines the level of detail in output files\n2. **Output Switches**: Control which output files are generated\n   - IDETO: Controls Overview.OUT generation\n   - IDETS: Controls Summary.OUT generation\n   - IDETG: Controls growth output files\n   - IDETL: Controls detailed output\n3. **Format Option**: Controls output format (ASCII or CSV)\n4. **Dynamic Variable**: Controls the phase of simulation (RUNINIT, SEASINIT, RATE, INTEGRATE, OUTPUT, SEASEND)\n\nThe Input/Output System responds to these control parameters to adjust its behavior throughout the simulation process.\n\nSources:\n- [Utilities/OPSUM.for:214-228]()\n- [Plant/CROPGRO/OPHARV.for:210-226]()\n- [InputModule/OPHEAD.for:141-176]()\n\n## Summary\n\nThe Input/Output System in DSSAT-CSM provides a comprehensive framework for data management throughout the simulation process. It handles input file parsing, data standardization through measurement codes, and output generation in multiple formats. Key components include the `SumModule` for data organization, `HeaderMod` for output file headers, and `CsvOutput` for CSV format generation.\n\nThe system is designed to be flexible, supporting various output formats and detail levels, while maintaining consistency through standardized measurement codes. Its integration with the Simulation Control system ensures appropriate data processing at each phase of the simulation."])</script><script>self.__next_f.push([1,"2d:T419d,"])</script><script>self.__next_f.push([1,"# Input Module\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [InputModule/COMGEN.blk](InputModule/COMGEN.blk)\n- [InputModule/INVAR.for](InputModule/INVAR.for)\n- [InputModule/IPSIM.for](InputModule/IPSIM.for)\n- [InputModule/IPVAR.for](InputModule/IPVAR.for)\n- [InputModule/OPHEAD.for](InputModule/OPHEAD.for)\n- [InputModule/OPTEMPXY2K.for](InputModule/OPTEMPXY2K.for)\n- [InputModule/SEVAR.for](InputModule/SEVAR.for)\n- [InputModule/optempy2k.for](InputModule/optempy2k.for)\n- [SPAM/SPSUBS.for](SPAM/SPSUBS.for)\n- [SPAM/STEMP.for](SPAM/STEMP.for)\n- [SPAM/STEMP_EPIC.for](SPAM/STEMP_EPIC.for)\n- [SPAM/TRANS.for](SPAM/TRANS.for)\n\n\u003c/details\u003e\n\n\n\n## Purpose and Scope\n\nThe Input Module is a critical component of the DSSAT Cropping System Model (DSSAT-CSM) that handles the reading, processing, and validation of all input data required for crop simulations. This includes simulation control parameters, genetic coefficients for crop varieties, environmental data, field management information, and initialization conditions. The module ensures that all necessary inputs are correctly formatted and available to other modules in the simulation.\n\nThe Input Module serves as the bridge between the user's experimental setup (defined in input files) and the simulation engine. It validates inputs, applies default values when needed, and prepares data structures for use by other components of the system.\n\nFor information about how the processed input data is used by the simulation engine, see sections on the Land Module ([3.1](#3.1)), Soil Module ([3.2](#3.2)), and Plant Module ([3.3](#3.3)).\n\nSources: [InputModule/IPSIM.for:1-45](), [InputModule/OPHEAD.for:1-15]()\n\n## Module Structure and Data Flow\n\nThe Input Module consists of several key components that work together to process different aspects of the simulation inputs. Below is a high-level overview of the module's structure and data flow:\n\n```mermaid\nflowchart TD\n    subgraph \"Input Module\"\n        IPSIM[\"IPSIM\\nSimulation Control\"]\n        IPVAR[\"IPVAR\\nGenetic Parameters\"]\n        IPECO[\"IPECO\\nEcotype Data\"]\n        OPHEAD[\"OPHEAD\\nOutput Headers\"]\n        SEVAR[\"SEVAR\\nSensitivity Analysis\"]\n    end\n\n    FILEX[\"FILEX\\nExperiment Definition\"]\n    FILEA[\"FILEA\\nExperiment Data\"]\n    FILEW[\"FILEW\\nWeather Data\"]\n    FILES[\"FILES\\nSoil Data\"]\n    FILEC[\"FILEC\\nCrop Species\"]\n    FILEG[\"FILEG\\nCultivar Data\"]\n    FILEE[\"FILEE\\nEcotype Data\"]\n\n    FILEX --\u003e IPSIM\n    FILEX --\u003e IPVAR\n    FILEA --\u003e IPSIM\n    FILEC --\u003e IPVAR\n    FILEG --\u003e IPVAR\n    FILEE --\u003e IPECO\n    FILES --\u003e IPSIM\n    FILEW --\u003e IPSIM\n\n    IPSIM --\u003e CONTROL[\"CONTROL\\nSimulation Parameters\"]\n    IPSIM --\u003e ISWITCH[\"ISWITCH\\nSimulation Switches\"]\n    IPVAR --\u003e COMGEN[\"COMGEN\\nGenetic Parameters\"]\n    IPECO --\u003e COMGEN\n    \n    CONTROL --\u003e HEADER[\"HEADER\\nOutput File Headers\"]\n    ISWITCH --\u003e HEADER\n    IPSIM --\u003e OPHEAD\n    OPHEAD --\u003e HEADER\n    \n    SEVAR --\u003e IPVAR\n    SEVAR --\u003e IPECO\n```\n\nThe diagram shows how different input files are processed by various components of the Input Module, and how the processed data is organized into data structures like CONTROL, ISWITCH, and COMGEN for use by other modules.\n\nSources: [InputModule/IPSIM.for:43-69](), [InputModule/IPVAR.for:1-45](), [InputModule/OPHEAD.for:16-29](), [InputModule/SEVAR.for:1-32]()\n\n## Key Components and Their Functions\n\n### IPSIM - Simulation Control\n\nThe IPSIM subroutine is the core component that reads and processes simulation control parameters from the FILEX file. It handles parameters related to:\n\n1. General simulation settings (run duration, starting date)\n2. Environmental options (water, nitrogen, phosphorus, etc.)\n3. Method selections (weather, soil, evaporation, etc.)\n4. Management practices (planting, irrigation, fertilization, etc.)\n5. Output options\n\nIPSIM reads the FILEX file section by section, processes the parameters, and stores them in the CONTROL and ISWITCH data structures. It also performs validation checks to ensure parameter compatibility and applies default values when necessary.\n\n```mermaid\nflowchart LR\n    subgraph \"IPSIM Subroutine\"\n        Read[\"Read FILEX\\nSimulation Controls\"]\n        Process[\"Process and\\nValidate Parameters\"]\n        Store[\"Store in CONTROL\\nand ISWITCH\"]\n        Check[\"Check Parameter\\nCompatibility\"]\n    end\n\n    FILEX[\"FILEX File\"] --\u003e Read\n    Read --\u003e Process\n    Process --\u003e Store\n    Store --\u003e Check\n    Check --\u003e CONTROL[\"CONTROL Structure\"]\n    Check --\u003e ISWITCH[\"ISWITCH Structure\"]\n```\n\nThe IPSIM subroutine processes several sections of the FILEX file:\n\n1. General simulation control: Runs, replications, start date\n2. Option switches: Water, nitrogen, phosphorus, etc.\n3. Method selections: Weather, soil water, evaporation, etc.\n4. Management practices: Planting, irrigation, fertilization\n5. Output settings: File types, detail levels, frequency\n\nIt also handles parameter compatibility, ensuring that certain combinations of options are valid. For example, if water simulation is disabled (ISWWAT='N'), then nitrogen and phosphorus simulation are automatically disabled as well.\n\nSources: [InputModule/IPSIM.for:43-145](), [InputModule/IPSIM.for:180-330](), [InputModule/IPSIM.for:606-910]()\n\n### IPVAR - Genetic Parameters\n\nThe IPVAR subroutine reads genetic parameters from the cultivar (FILEG) file for the specific crop variety being simulated. It supports different formats for various crop models (CROPGRO, CERES, etc.) and handles both default and user-defined cultivar parameters.\n\nThis component is critical for capturing the genetic differences between crop varieties that influence growth, development, and yield formation processes.\n\nIPVAR reads cultivar-specific parameters such as:\n- Photoperiod sensitivity\n- Thermal time requirements for development stages\n- Leaf growth parameters\n- Reproductive growth parameters\n- Yield formation parameters\n\nThe parameters read by IPVAR are stored in the COMGEN common block, which makes them available to other modules in the simulation.\n\nTable: Key Genetic Parameters for Different Crop Models\n\n| Crop Model | Key Parameters | Description |\n|------------|----------------|-------------|\n| CROPGRO | CSDVAR, PPSEN, PHTHRS | Critical short day, photoperiod sensitivity, phase thresholds |\n| CERES-Maize | P1, P2, P5, G2, G3, PHINT | Thermal time parameters, grain parameters, phyllochron interval |\n| CERES-Wheat | P1V, P1D, P5, G1, G2, G3, PHINT | Vernalization, photoperiod, grain parameters |\n| Sugarcane | MaxPARCE, APFMX, TBFT | Photosynthetic efficiency, partitioning, temperature thresholds |\n\nSources: [InputModule/IPVAR.for:1-45](), [InputModule/IPVAR.for:160-233](), [InputModule/COMGEN.blk:1-85]()\n\n### OPHEAD - Output Header Generation\n\nThe OPHEAD subroutine generates headers for output files, including the Overview.OUT and daily output files. It creates a standardized header format that includes:\n\n1. Model version information\n2. Run identification\n3. Experiment details\n4. Treatment information\n5. Crop and cultivar information\n6. Simulation dates\n7. Soil and weather information\n8. Management practices defined in the simulation\n\nThe headers provide essential context for interpreting simulation results and are important for documentation and traceability of simulation studies.\n\n```mermaid\nflowchart TD\n    subgraph \"OPHEAD Subroutine\"\n        Init[\"Initialize Headers\"]\n        Version[\"Add Version Info\"]\n        RunInfo[\"Add Run Details\"]\n        ExpInfo[\"Add Experiment Info\"]\n        CropInfo[\"Add Crop Details\"]\n        SoilInfo[\"Add Soil Information\"]\n        ManagementInfo[\"Add Management Details\"]\n        MethodInfo[\"Add Simulation Methods\"]\n    end\n\n    CONTROL[\"CONTROL\\nStructure\"] --\u003e Init\n    ISWITCH[\"ISWITCH\\nStructure\"] --\u003e Init\n    \n    Init --\u003e Version\n    Version --\u003e RunInfo\n    RunInfo --\u003e ExpInfo\n    ExpInfo --\u003e CropInfo\n    CropInfo --\u003e SoilInfo\n    SoilInfo --\u003e ManagementInfo\n    ManagementInfo --\u003e MethodInfo\n    \n    MethodInfo --\u003e HEADERS[\"Headers Data\\nStructure\"]\n    HEADERS --\u003e OutputFiles[\"Output Files\\n(Overview.OUT, Daily Files)\"]\n```\n\nThe OPHEAD subroutine stores header information in the Headers data structure, which is later used by various output routines to write headers to output files. This ensures consistency in how simulation information is presented across different output files.\n\nSources: [InputModule/OPHEAD.for:100-150](), [InputModule/OPHEAD.for:180-280](), [InputModule/OPHEAD.for:300-433]()\n\n## Input File Processing\n\nThe Input Module processes several types of input files:\n\n1. **FILEX** - Experiment files containing simulation control, treatments, and field management\n2. **FILEC** - Crop species files with crop-specific parameters\n3. **FILEG** - Cultivar files with genetic coefficients\n4. **FILEE** - Ecotype files with environmental adaptation parameters\n5. **FILES** - Soil files with soil profile information\n6. **FILEW** - Weather files with daily weather data\n\nThe module includes a temporary file handling system (implemented in optempy2k.for and OPTEMPXY2K.for) that creates intermediate files in a standardized format for use by the simulation engine.\n\n### FILEX Processing Workflow\n\nThe FILEX file is the primary input file that defines an experiment, including its treatments, field conditions, and management practices. The processing of this file follows a structured workflow:\n\n```mermaid\nflowchart TD\n    FILEX[\"FILEX\\nExperiment File\"] --\u003e ExpDetails[\"Read Experiment Details\"]\n    ExpDetails --\u003e SimControl[\"Read Simulation Controls\"]\n    SimControl --\u003e Treatment[\"Read Treatment Information\"]\n    Treatment --\u003e Cultivar[\"Read Cultivar Selection\"]\n    Cultivar --\u003e Fields[\"Read Field Information\"]\n    Fields --\u003e InitialConditions[\"Read Initial Conditions\"]\n    InitialConditions --\u003e Planting[\"Read Planting Details\"]\n    Planting --\u003e Management[\"Read Management Practices\\n(Irrigation, Fertilization, etc.)\"]\n    \n    Cultivar --\u003e IPVAR[\"Call IPVAR\\nfor Genetic Parameters\"]\n    IPVAR --\u003e FILEG[\"Read FILEG\\n(Cultivar File)\"]\n    FILEG --\u003e GeneticParameters[\"Store Genetic Parameters\\nin COMGEN\"]\n    \n    Fields --\u003e FILES[\"Read FILES\\n(Soil File)\"]\n    FILES --\u003e SoilParameters[\"Store Soil Parameters\"]\n    \n    Management --\u003e SimulationSetup[\"Final Simulation Setup\"]\n    GeneticParameters --\u003e SimulationSetup\n    SoilParameters --\u003e SimulationSetup\n```\n\nThe Input Module carefully validates inputs throughout this process, checking for valid parameter ranges, compatible option combinations, and the availability of required data. When issues are detected, the module either applies reasonable defaults or produces error messages to guide the user.\n\nSources: [InputModule/IPSIM.for:180-210](), [InputModule/optempy2k.for:60-180](), [InputModule/OPTEMPXY2K.for:90-190]()\n\n## Simulation Switches and Methods\n\nA key function of the Input Module is to process and validate simulation switches and methods that control how different processes are simulated. These are defined in the FILEX file and processed by IPSIM.\n\n### Key Simulation Switches\n\nThe ISWITCH structure contains various switches that enable or disable simulation components:\n\nTable: Key Simulation Switches\n\n| Switch | Description | Possible Values |\n|--------|-------------|----------------|\n| ISWWAT | Water balance simulation | Y=yes, N=no |\n| ISWNIT | Nitrogen simulation | Y=yes, N=no |\n| ISWSYM | Symbiotic N fixation | Y=yes, N=no, U=unlimited |\n| ISWPHO | Phosphorus simulation | Y=yes, N=no |\n| ISWPOT | Potassium simulation | Y=yes, N=no |\n| ISWDIS | Pest and disease | Y=yes, N=no |\n| ISWCHE | Environmental applications | Y=yes, N=no |\n| ICO2 | CO2 | M=measured, W=weighted, D=default |\n\n### Simulation Methods\n\nThe module also processes method selections that define which algorithms to use for various processes:\n\nTable: Simulation Methods\n\n| Method | Description | Options |\n|--------|-------------|---------|\n| MEWTH | Weather | M=measured, G=generated, S=simulated, W=calculated |\n| MEEVP | Evapotranspiration | R=Priestley-Taylor, Z=Penman-FAO, F=FAO-56 |\n| MEINF | Infiltration | S=Soil Conservation Service, R=Ritchie |\n| MEPHO | Photosynthesis | C=Canopy, L=Leaf |\n| MESOM | Soil organic matter | G=Godwin, P=CENTURY/Parton |\n| MESEV | Soil evaporation | R=Ritchie, S=Suleiman-Ritchie |\n| MESOL | Soil layers | 1=original, 2=new, 3=user-specified |\n\nThe Input Module enforces rules for compatibility between these switches and methods. For example, if water simulation is disabled (ISWWAT='N'), then nitrogen and phosphorus simulations are automatically disabled as well. It also sets appropriate defaults based on crop type and simulation mode.\n\nSources: [InputModule/IPSIM.for:217-254](), [InputModule/IPSIM.for:606-680]()\n\n## Integration with Other Modules\n\nThe Input Module serves as the foundation for the entire simulation system by providing processed input data to other modules. The key integration points include:\n\n```mermaid\nflowchart LR\n    subgraph \"Input Module\"\n        IPSIM[\"IPSIM\\nSimulation Control\"]\n        IPVAR[\"IPVAR\\nGenetic Parameters\"]\n        OPHEAD[\"OPHEAD\\nOutput Headers\"]\n    end\n    \n    IPSIM --\u003e CONTROL[\"CONTROL\\nStructure\"]\n    IPSIM --\u003e ISWITCH[\"ISWITCH\\nStructure\"]\n    IPVAR --\u003e COMGEN[\"COMGEN\\nGenetic Parameters\"]\n    \n    CONTROL --\u003e LAND[\"LAND Module\\n(Main Simulation Engine)\"]\n    ISWITCH --\u003e LAND\n    COMGEN --\u003e PLANT[\"PLANT Module\\n(Crop Models)\"]\n    \n    CONTROL --\u003e SPAM[\"SPAM Module\\n(Soil-Plant-Atmosphere)\"]\n    ISWITCH --\u003e SPAM\n    \n    CONTROL --\u003e SOIL[\"SOIL Module\\n(Soil Processes)\"]\n    ISWITCH --\u003e SOIL\n    \n    OPHEAD --\u003e OutputFiles[\"Output Files\\nGeneration\"]\n```\n\n### Interaction with SPAM Module\n\nThe Input Module provides essential parameters to the Soil-Plant-Atmosphere Module (SPAM), which simulates energy balance and evapotranspiration. Key parameters include:\n\n- Weather data location and format (MEWTH)\n- Evapotranspiration method (MEEVP)\n- Soil temperature method (METMP)\n- Soil evaporation method (MESEV)\n\nSPAM uses these parameters to calculate important processes like:\n- Potential evapotranspiration (EO)\n- Potential plant transpiration (EOP)\n- Soil evaporation (ES)\n- Soil temperature profiles (ST)\n\nSources: [InputModule/IPSIM.for:231-247](), [SPAM/STEMP.for:10-40](), [SPAM/SPSUBS.for:10-40](), [SPAM/TRANS.for:10-40]()\n\n### Interaction with Plant Module\n\nThe Input Module provides genetic parameters to the Plant Module through the COMGEN common block. These parameters define how specific crop varieties respond to environmental conditions and management practices.\n\nThe Plant Module uses these parameters to simulate:\n- Development phases based on thermal time\n- Response to photoperiod and vernalization\n- Leaf area growth and senescence\n- Biomass accumulation and partitioning\n- Yield formation processes\n\nDifferent crop models (CROPGRO, CERES, etc.) use different sets of genetic parameters from the COMGEN block.\n\nSources: [InputModule/IPVAR.for:160-233](), [InputModule/COMGEN.blk:1-85]()\n\n## Error Handling and Parameter Validation\n\nThe Input Module includes comprehensive error handling and parameter validation to ensure the integrity of simulation inputs. Key validation processes include:\n\n1. **Parameter range checking**: Ensuring parameter values are within acceptable ranges\n2. **Compatibility validation**: Checking that combinations of options and parameters are compatible\n3. **Default value substitution**: Applying reasonable defaults when parameters are missing\n4. **Error messaging**: Providing clear error messages when critical issues are detected\n\nFor example, the module validates that:\n- Crop models are compatible with selected options (e.g., nitrogen fixation for legume crops)\n- Methods are compatible with selected options (e.g., MEHYD with MEEVP)\n- Phosphorus and potassium models are only enabled for crops that support them\n\nThese validation steps help prevent simulation failures and ensure that the model behaves as expected.\n\nSources: [InputModule/IPSIM.for:606-910]()\n\n## Summary\n\nThe Input Module serves as the critical interface between user-defined inputs and the DSSAT-CSM simulation engine. It processes, validates, and organizes all input data, making it available to the various simulation components in a structured and consistent manner.\n\nKey strengths of the Input Module include:\n- Comprehensive processing of various input file types\n- Robust validation of input parameters\n- Flexible support for different crop models and simulation methods\n- Careful handling of parameter interdependencies\n- Clear error messaging for troubleshooting\n\nBy properly preparing all simulation inputs, the Input Module ensures that the DSSAT-CSM can accurately simulate crop growth, development, and yield under diverse environmental conditions and management practices."])</script><script>self.__next_f.push([1,"2e:T246e,"])</script><script>self.__next_f.push([1,"# Measurement Codes\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [Data/DATA.CDE](Data/DATA.CDE)\n- [Plant/CERES-Rice/RI_Opgrow.for](Plant/CERES-Rice/RI_Opgrow.for)\n- [Plant/CROPGRO/OPHARV.for](Plant/CROPGRO/OPHARV.for)\n- [Utilities/CsvOuts/csvlinklist.f90](Utilities/CsvOuts/csvlinklist.f90)\n- [Utilities/CsvOuts/csvoutput.f90](Utilities/CsvOuts/csvoutput.f90)\n- [Utilities/OPSUM.for](Utilities/OPSUM.for)\n\n\u003c/details\u003e\n\n\n\n## Purpose and Scope\n\nMeasurement codes in DSSAT-CSM are standardized identifiers used for consistent representation of field data and simulation outputs. These codes provide a unified language for data interchange between different modules in the system, as well as between simulated and observed data. This document explains the structure, organization, and implementation of these codes within the DSSAT-CSM framework.\n\nFor information about how data is processed through the Input/Output system in general, see [Input/Output System](#6).\n\n## Structure of Measurement Codes\n\nMeasurement codes in DSSAT-CSM follow a specific convention designed to encode multiple aspects of a measurement into a concise, standardized format. Most codes are 4 characters long and structured according to the following pattern:\n\n```\nPosition 1: Plant component (e.g., C for canopy; H for harvest product)\nPosition 2: Measurement aspect (e.g., W for dry weight; N for nitrogen weight)\nPosition 3: Basis of measurement (e.g., A for unit area; P for plant)\nPosition 4: Time or stage of measurement (e.g., D for specific day)\n```\n\nFor some measurements, this convention is modified by dropping one letter and using the first two letters for specific components (e.g., SU for sucrose).\n\nCodes for dates have letters for the stage first and then a D or DAT (e.g., ADAT for anthesis date).\n\nSources: [Data/DATA.CDE:3-19]()\n\n## Code Organization\n\nMeasurement codes are organized into several categories based on their primary application within the system:\n\n```mermaid\ngraph TD\n    MeasurementCodes[\"Measurement Codes\"]\n    Summary[\"Summary Codes\"]\n    Growth[\"Growth Codes\"]\n    Nitrogen[\"Nitrogen Codes\"]\n    Carbon[\"Carbon Codes\"]\n    Water[\"Water Codes\"]\n    Soil[\"Soil Codes\"]\n    \n    MeasurementCodes --\u003e Summary\n    MeasurementCodes --\u003e Growth\n    MeasurementCodes --\u003e Nitrogen\n    MeasurementCodes --\u003e Carbon\n    MeasurementCodes --\u003e Water\n    MeasurementCodes --\u003e Soil\n    \n    Summary --\u003e SummaryExamples[\"Examples:\n    CWAM - Tops weight at maturity (kg/ha)\n    HWAM - Yield at maturity (kg/ha)\n    ADAT - Anthesis date (YrDoy)\"]\n    \n    Growth --\u003e GrowthExamples[\"Examples:\n    LAID - Leaf area index\n    CWAD - Tops weight (kg/ha)\n    GSTD - Growth stage\"]\n    \n    Nitrogen --\u003e NitrogenExamples[\"Examples:\n    CNAD - Crop N (kg/ha)\n    GN%D - Grain N concentration (%)\n    NUCM - N uptake (kg/ha)\"]\n```\n\nSources: [Data/DATA.CDE:26-601]()\n\n## Fields in the Data CDE File\n\nThe measurement codes are defined in the `Data/DATA.CDE` file, which includes the following fields for each code:\n\n| Field | Description |\n|-------|-------------|\n| CDE | The 'universal' code used to facilitate data interchange |\n| LABEL | A short description used when labeling graphs |\n| DESCRIPTION | A 55 character description of the aspect |\n| SYNONYMS | Additional codes that may be used locally (e.g., YIELD for HWAM) |\n\nSources: [Data/DATA.CDE:20-25]()\n\n## Example Measurement Codes\n\n### Summary Output Codes\n\nThese codes are primarily used in summary outputs and represent key seasonal results:\n\n| Code | Label | Description | Synonyms |\n|------|-------|-------------|----------|\n| ADAT | Anthesis date | Anthesis date (YrDoy) | Z60D ANTH FL1D ADAY ADOY |\n| CWAM | Tops wt kg/ha | Tops weight at maturity (kg [dm]/ha) | |\n| HWAM | Mat Yield kg/ha | Yield at harvest maturity (kg [dm]/ha) | |\n| HIAM | Harvest index | Harvest index at maturity | |\n| LAIX | LAI maximum | Leaf area index, maximum | |\n| ETCM | ET total mm | Total season evapotranspiration (mm) | |\n| PRCM | Precip mm | Total season precipitation (mm) | |\n\nSources: [Data/DATA.CDE:26-194]()\n\n### Growth Codes\n\nThese codes are used to track plant growth dynamics over time:\n\n| Code | Label | Description |\n|------|-------|-------------|\n| LAID | LAI | Leaf area index |\n| CWAD | Tops wt kg/ha | Tops weight (kg [dm]/ha) |\n| LWAD | Leaf wt kg/ha | Leaf weight (kg [dm]/ha) |\n| SWAD | Stem wt kg/ha | Stem weight (kg [dm]/ha) |\n| CHTD | Canopy height m | Canopy height (m) |\n| GSTD | Growth stage | Growth stage |\n| RSTD | Reproductive st | Reproductive development stage (0-9 for cereals) |\n\nSources: [Data/DATA.CDE:202-380]()\n\n### Nitrogen Codes\n\nCodes related to nitrogen dynamics in the crop and soil:\n\n| Code | Label | Description |\n|------|-------|-------------|\n| CNAD | Crop N kg/ha | Tops N (kg/ha) |\n| GN%D | Grain N % | Grain N concentration (%) |\n| NUCM | N uptake kg/ha | N uptake during season (kg [N]/ha) |\n| NLCM | N leached kg/ha | N leached during season (kg [N]/ha) |\n| NFXM | N fixed kg/h | N fixed during season (kg/ha) |\n\nSources: [Data/DATA.CDE:382-494]()\n\n## Data Flow for Measurement Codes\n\nThe following diagram shows how measurement codes are integrated into the DSSAT-CSM data flow, from simulation to output:\n\n```mermaid\ngraph TD\n    subgraph \"DSSAT-CSM System\"\n        Simulation[\"Crop Simulation Models\"]\n        OutputHandler[\"Output Handler (OPSUM)\"]\n        MeasurementCodes[\"Measurement Codes (DATA.CDE)\"]\n        \n        Simulation -- \"Simulation Results\" --\u003e OutputHandler\n        MeasurementCodes -- \"Code Definitions\" --\u003e OutputHandler\n        \n        OutputHandler --\u003e SummaryOut[\"Summary.OUT\"]\n        OutputHandler --\u003e EvaluateOut[\"Evaluate.OUT\"]\n        OutputHandler --\u003e OverviewOut[\"Overview.OUT\"]\n        OutputHandler --\u003e CsvOutputs[\"CSV Outputs\"]\n    end\n    \n    subgraph \"Input Files\"\n        FileX[\"X-file (Experiment)\"]\n        FileA[\"A-file (Measured Data)\"]\n        \n        FileX -- \"Treatment Parameters\" --\u003e Simulation\n        FileA -- \"Measured Data\\n(using same codes)\" --\u003e OutputHandler\n    end\n```\n\nSources: [Utilities/OPSUM.for:31-104](), [Plant/CROPGRO/OPHARV.for:29-46]()\n\n## Implementation in the Code\n\nMeasurement codes are integrated into the codebase in several key areas:\n\n### 1. SUMDAT Structure\n\nThe SUMDAT structure in the SumModule stores simulation results using the measurement code identifiers:\n\n```mermaid\nclassDiagram\n    class SummaryType {\n        INTEGER ADAT, EDAT, MDAT\n        INTEGER HWAM, CWAM\n        INTEGER HNUMAM, NFXM, NUCM, CNAM, GNAM\n        INTEGER IRNUM, IRCM, ETCM\n        INTEGER PRCM, ROCM, DRCM, SWXM\n        REAL HWAH, HWUM, BWAH, HNUMUM\n        REAL LAIX, HIAM\n    }\n```\n\nSources: [Utilities/OPSUM.for:36-87]()\n\n### 2. Output Formatting\n\nWhen generating output files, the system uses measurement codes as column headers and formats the data according to each code's requirements:\n\n- CSV output is handled by specialized formatters in the `CsvOutput` module\n- Text output is formatted according to code-specific rules in `OPSUM` and various crop model output routines\n\nSources: [Utilities/CsvOuts/csvoutput.f90:189-273](), [Utilities/OPSUM.for:595-715]()\n\n### 3. Data Interchange\n\nMeasurement codes facilitate data interchange between:\n\n- Different crop models (e.g., CROPGRO, CERES)\n- Simulated and observed data (for model validation)\n- Various output formats (text, CSV)\n\nThis standardization enables consistent interpretation of data across the entire DSSAT-CSM system.\n\nSources: [Plant/CROPGRO/OPHARV.for:117-149](), [Plant/CERES-Rice/RI_Opgrow.for:356-386]()\n\n## Economic Yield Codes\n\nA recently added extension to the measurement codes system is support for economic yield values. This enables the representation of economically valuable components of the crop, such as lint in cotton:\n\n| Code | Label | Description |\n|------|-------|-------------|\n| EYLDH | Eco. Yld t/ha | Economic Yield (ton/ha) |\n| LINTP | Lint % | Lint Percentage (%) |\n\nThe system includes special formatting logic for these economic yield values to ensure proper representation in output files.\n\nSources: [Plant/CROPGRO/OPHARV.for:354-379](), [Utilities/OPSUM.for:741-755]()\n\n## Use in Output Files\n\nThe main output files that utilize measurement codes include:\n\n1. **Summary.OUT** - Contains season-end summaries with key measurements\n2. **Evaluate.OUT** - Compares simulated vs. observed values\n3. **PlantGro.OUT** - Daily growth parameters \n4. **PlantN.OUT** - Nitrogen-related daily outputs\n5. **CSV outputs** - All outputs in CSV format for data analysis\n\nEach output file uses a specific subset of measurement codes relevant to its purpose.\n\nSources: [Utilities/OPSUM.for:625-642](), [Plant/CROPGRO/OPHARV.for:380-553]()\n\n## Conclusion\n\nMeasurement codes form the backbone of the data representation system in DSSAT-CSM. By providing a consistent, compact notation for representing plant, soil, and environmental measurements, these codes enable:\n\n1. Standardized data interchange between modules\n2. Consistent output formatting\n3. Direct comparison between simulated and observed data\n4. Integration of data from different crop models\n\nUnderstanding the measurement code system is essential for interpreting DSSAT-CSM outputs and for developing new modules that integrate with the existing framework."])</script><script>self.__next_f.push([1,"2f:T3243,"])</script><script>self.__next_f.push([1,"# Output Generation\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [Data/DATA.CDE](Data/DATA.CDE)\n- [Plant/CERES-Rice/RI_Opgrow.for](Plant/CERES-Rice/RI_Opgrow.for)\n- [Plant/CERES-Wheat_Barley/CER_First_Trans_m.for](Plant/CERES-Wheat_Barley/CER_First_Trans_m.for)\n- [Plant/CERES-Wheat_Barley/CER_Growth.for](Plant/CERES-Wheat_Barley/CER_Growth.for)\n- [Plant/CERES-Wheat_Barley/CER_Init.for](Plant/CERES-Wheat_Barley/CER_Init.for)\n- [Plant/CERES-Wheat_Barley/CER_Init_VarInit.for](Plant/CERES-Wheat_Barley/CER_Init_VarInit.for)\n- [Plant/CERES-Wheat_Barley/CER_Integrate.for](Plant/CERES-Wheat_Barley/CER_Integrate.for)\n- [Plant/CERES-Wheat_Barley/CER_Output.for](Plant/CERES-Wheat_Barley/CER_Output.for)\n- [Plant/CERES-Wheat_Barley/CSCER.for](Plant/CERES-Wheat_Barley/CSCER.for)\n- [Plant/CERES-Wheat_Barley/CSCERES_Interface.for](Plant/CERES-Wheat_Barley/CSCERES_Interface.for)\n- [Plant/CROPGRO/OPHARV.for](Plant/CROPGRO/OPHARV.for)\n- [Utilities/CsvOuts/csvlinklist.f90](Utilities/CsvOuts/csvlinklist.f90)\n- [Utilities/CsvOuts/csvoutput.f90](Utilities/CsvOuts/csvoutput.f90)\n- [Utilities/OPSUM.for](Utilities/OPSUM.for)\n\n\u003c/details\u003e\n\n\n\n## Purpose and Scope\n\nThis document describes the output generation system in DSSAT-CSM, focusing on how simulation results are processed and written to various output files. The system handles the conversion of internal model state variables into standardized outputs, manages different output formats, and ensures proper organization of simulation results for analysis. For information about input processing, see [Input Module](#6.1), and for details on measurement codes used in outputs, see [Measurement Codes](#6.2).\n\n## Overview of Output System\n\nThe DSSAT-CSM output generation system converts internal model data into standardized output files. The system supports multiple output formats, including fixed-width text files (the traditional format) and CSV files (for easier data import into spreadsheets and data analysis tools).\n\n```mermaid\nflowchart TD\n    subgraph \"Simulation Process\"\n        SM[\"Simulation Models\"]\n        IV[\"Internal Variables\"]\n    end\n    \n    subgraph \"Output Generation System\"\n        OPS[\"OPSUM Module\\nSeasonal/Summary Output\"]\n        OPH[\"OPHARV Module\\nHarvest Output\"]\n        CRO[\"Crop-Specific Output\\nRoutines\"]\n        CSV[\"CSV Output Module\"]\n    end\n    \n    subgraph \"Output Files\"\n        SUM[\"Summary.OUT\\nSeasonal summary data\"]\n        EVAL[\"Evaluate.OUT\\nSimulated vs. measured\"]\n        OVER[\"Overview.OUT\\nStage outputs\"]\n        PG[\"PlantGro.OUT\\nDaily crop growth\"]\n        PN[\"PlantN.OUT\\nDaily N status\"]\n        SW[\"SoilWat.OUT\\nDaily soil water\"]\n        SN[\"SoilN.OUT\\nDaily soil N\"]\n        CSVFiles[\"CSV Format Files\"]\n    end\n    \n    SM --\u003e IV\n    IV --\u003e OPS\n    IV --\u003e OPH\n    IV --\u003e CRO\n    \n    OPS --\u003e SUM\n    OPS --\u003e EVAL\n    OPS --\u003e OVER\n    \n    OPH --\u003e SUM\n    OPH --\u003e EVAL\n    \n    CRO --\u003e PG\n    CRO --\u003e PN\n    CRO --\u003e SW\n    CRO --\u003e SN\n    \n    OPS --\u003e CSV\n    OPH --\u003e CSV\n    CRO --\u003e CSV\n    \n    CSV --\u003e CSVFiles\n```\n\nSources: [Utilities/OPSUM.for:104-430](), [Utilities/CsvOuts/csvoutput.f90:1-17](). [Plant/CROPGRO/OPHARV.for:31-54]()\n\n## Standard Output Files\n\nDSSAT-CSM generates several output files to capture different aspects of simulation results:\n\n| Output File | Description | Key Module |\n|-------------|-------------|------------|\n| Summary.OUT | Summary of seasonal results | OPSUM |\n| Evaluate.OUT | Comparison of simulated and measured values | OPSUM/OPHARV |\n| Overview.OUT | Summary results at key growth stages | OPSUM |\n| PlantGro.OUT | Daily crop growth output | Crop-specific modules |\n| PlantN.OUT | Daily nitrogen status | Crop-specific modules |\n| SoilWat.OUT | Daily soil water balance | Soil modules |\n| SoilN.OUT | Daily soil nitrogen dynamics | Soil modules |\n\nThe system can also generate CSV versions of these files when the CSV output option is specified.\n\nSources: [Utilities/OPSUM.for:532-642]()\n\n## Output Data Structure\n\n### Summary Module\n\nThe Summary module (`OPSUM`) uses the `SumModule` to store variables for the Summary.OUT file. It defines the `SummaryType` data structure to hold seasonal results like yield, biomass, water use, and nitrogen status.\n\n```mermaid\nclassDiagram\n    class SumModule {\n        +SummaryType SUMDAT\n        +EvaluateType EvaluateData\n    }\n    \n    class SummaryType {\n        +INTEGER ADAT, EDAT, MDAT\n        +INTEGER HWAM, CWAM\n        +REAL HWAH, BWAH\n        +REAL HWUM, HNUMUM\n        +REAL HIAM, LAIX\n        +REAL DMPEM, DMPPM, DMPTM, YPEM, YPPM, YPTM\n        +REAL N2OEM, CO2EM, CH4EM\n        +INTEGER FCWAM, FHWAM, FPWAM\n        +REAL HWAHF, FBWAH\n        +REAL EYLDH\n    }\n    \n    class EvaluateType {\n        +INTEGER ICOUNT\n        +CHARACTER*6 OLAP[EvaluateNum]\n        +CHARACTER*8 Simulated[EvaluateNum]\n        +CHARACTER*8 Measured[EvaluateNum]\n        +CHARACTER*50 DESCRIP[EvaluateNum]\n    }\n    \n    SumModule *-- SummaryType : contains\n    SumModule *-- EvaluateType : contains\n```\n\nSources: [Utilities/OPSUM.for:32-99]()\n\n### Measurement Codes\n\nOutput variables use standardized codes and labels defined in the DATA.CDE file. These codes follow a convention (when possible):\n- 1st letter: Plant component (e.g., C for canopy, H for harvest product)\n- 2nd letter: Measurement aspect (e.g., W for dry weight, N for nitrogen weight)\n- 3rd letter: Basis of measurement (e.g., A for unit area, P for plant)\n- 4th letter: Time or stage of measurement (e.g., D for specific day)\n\nFor example:\n- `HWAM`: Harvest Weight At Maturity (kg/ha)\n- `CWAM`: Crop Weight At Maturity (kg/ha)\n- `LAIX`: Leaf Area Index, maximum\n\nSources: [Data/DATA.CDE:1-25]()\n\n## Output Generation Process\n\n### Summary Output Generation\n\n1. During SEASINIT (seasonal initialization), the `SUMDAT` data structure is initialized with default values.\n2. Throughout the simulation, various model components update values in `SUMDAT`.\n3. At SEASEND (season end), the `OPSUM` subroutine formats and writes the accumulated values to output files.\n\nThe process handles multiple output formats based on the `FMOPT` parameter:\n- 'A' or ' ': Standard text format (Summary.OUT, Evaluate.OUT)\n- 'C': CSV format\n\n```mermaid\nflowchart TD\n    subgraph \"Initialize\"\n        SI[\"SEASINIT\\nInitialize SUMDAT variables\"]\n    end\n    \n    subgraph \"Accumulate\"\n        UP[\"Model Components\\nUpdate SUMDAT values\"]\n    end\n    \n    subgraph \"Output\"\n        SE[\"SEASEND\\nFormat and write outputs\"]\n        FD[\"Format Decision\\nText or CSV\"]\n        SO[\"Write Summary.OUT\"]\n        EO[\"Write Evaluate.OUT\"]\n    end\n    \n    SI --\u003e UP\n    UP --\u003e SE\n    SE --\u003e FD\n    FD --\u003e|\"FMOPT='A'\"| SO\n    FD --\u003e|\"FMOPT='C'\"| CSV[\"Write CSV files\"]\n```\n\nSources: [Utilities/OPSUM.for:318-642]()\n\n### Harvest Output Processing\n\nThe `OPHARV` subroutine handles harvest-related outputs:\n\n1. At SEASEND, it calculates derived variables like harvest index (HI) and yield components.\n2. It reads measured values (if available) for evaluation.\n3. It stores results in arrays for output to Summary.OUT and Evaluate.OUT.\n4. Economic yield (EYLDH) is handled based on crop type, with special formatting for different value ranges.\n\nSources: [Plant/CROPGRO/OPHARV.for:324-379]()\n\n### CSV Output System\n\nThe CSV output system provides an alternative format for all standard output files:\n\n1. The `CsvOutput` module maintains character strings for each output file.\n2. Crop-specific subroutines (e.g., `CsvOut_cscer`, `CsvOut_crgro`) create CSV lines.\n3. The `Linklist` module manages linked lists to store output lines before writing to files.\n4. At output time, data is transferred from internal format to CSV format.\n\n```mermaid\nflowchart TD\n    subgraph \"CSV Output System\"\n        CSVM[\"CsvOutput Module\"]\n        LLNK[\"Linklist Module\"]\n        CSO[\"CsvOut Subroutines\\n(crop-specific)\"]\n    end\n    \n    subgraph \"Data Storage\"\n        CHAR[\"Character Strings\\n(CSV lines)\"]\n        LL[\"Linked Lists\\n(Output data)\"]\n    end\n    \n    subgraph \"Output Files\"\n        SCSV[\"Summary.csv\"]\n        PGCSV[\"PlantGro.csv\"]\n        PNCSV[\"PlantN.csv\"]\n        SWCSV[\"SoilWat.csv\"]\n        SNCSV[\"SoilN.csv\"]\n    end\n    \n    CSVM --\u003e CHAR\n    LLNK --\u003e LL\n    CSO --\u003e CHAR\n    \n    CHAR --\u003e SCSV\n    CHAR --\u003e PGCSV\n    CHAR --\u003e PNCSV\n    CHAR --\u003e SWCSV\n    CHAR --\u003e SNCSV\n```\n\nSources: [Utilities/CsvOuts/csvoutput.f90:178-609](), [Utilities/CsvOuts/csvlinklist.f90:1-87]()\n\n## Crop-Specific Output\n\nDifferent crop models have their own output routines that generate daily growth outputs:\n\n### CERES Models (Wheat, Barley, Maize, etc.)\n\nThe CERES models use subroutines like `CER_Output` to generate plant growth output files:\n- PlantGro.OUT: Daily growth variables\n- PlantN.OUT: Daily nitrogen status\n- PlantGr2.OUT: Secondary growth variables\n- PlantGrf.OUT: Growth factor variables\n\n### CROPGRO Models (Legumes, etc.)\n\nThe CROPGRO models use output routines like `OPGROW` to generate similar outputs but with variables specific to those crops.\n\n### Rice Model\n\nThe Rice model uses `RI_OPGROW` to generate rice-specific outputs.\n\nSources: [Plant/CERES-Wheat_Barley/CER_Output.for:6-246](), [Plant/CERES-Rice/RI_Opgrow.for:18-127]()\n\n## Output File Formats and Headers\n\n### Standard Output Headers\n\nOutput files include standardized headers with:\n- Run identification\n- Experiment code\n- Treatment number\n- Model version and date\n- Variable labels and descriptions\n\n```\n*SUMMARY : UFGA8201SB DSSAT Cropping System Model Ver. 4.8.0.12 DEVELOPMENT Feb 23, 2023; 12:23:00\n```\n\nFor fixed-width text files, headers include column descriptions and units:\n\n```\n@YEAR DOY   DAS   DAP TMEAN  GSTD  NUAC  TNAD SDNAD  RNAD  CNAD  LNAD  SNAD  HNAD   HIND  RSNAD  SNNPD SNN0D SNN1D  RN%D  LN%D  SN%D   HN%D  SDN%D   VN%D LN%RD SN%RD RN%RD  VCN%  VMN% NUPRD NDEMD\n```\n\nCSV files include similar headers but with comma-delimited format.\n\nSources: [Utilities/OPSUM.for:572-641](), [Plant/CERES-Wheat_Barley/CER_Output.for:149-173]()\n\n## Economic Yield Output\n\nEconomic yield (EYLDH) is a special output variable representing crop yield in economically relevant terms, such as tons per hectare for fresh produce or lint yield for cotton. It was recently added to the system and has special formatting based on value magnitude:\n\n- Values \u003c 1: Formatted with 3 decimal places\n- Values 1-10: Formatted with 2 decimal places\n- Values 10-100: Formatted with 1 decimal place\n- Values 100-1000: Integer format\n- Values 1000-10000: Rounded to nearest 10, integer format\n- Values 10000-100000: Rounded to nearest 100, integer format\n\nThe formatting logic is implemented in both OPSUM and OPHARV modules to ensure consistent presentation.\n\nSources: [Utilities/OPSUM.for:740-755](), [Plant/CROPGRO/OPHARV.for:354-379]()\n\n## Output Variables\n\nThe output system handles hundreds of variables across different categories:\n\n### Growth Variables\n- Crop development stages (emergence, anthesis, maturity)\n- Biomass components (tops weight, stem weight, root weight)\n- Leaf area index (LAI) and canopy characteristics\n- Yield components (grain weight, grain number)\n\n### Water Variables\n- Irrigation and rainfall amounts\n- Evapotranspiration, soil evaporation, transpiration\n- Water stress factors\n- Soil water content\n\n### Nitrogen Variables\n- Nitrogen uptake, fixation, and leaching\n- Plant nitrogen content and concentration\n- Nitrogen stress factors\n- Soil nitrogen content\n\n### Environmental Variables\n- Temperature (average min/max)\n- Solar radiation\n- CO2 concentration\n- Daylength\n\n### Productivity Metrics\n- Water productivity (kg yield per m³ water)\n- Nitrogen productivity (kg yield per kg N)\n\nSources: [Data/DATA.CDE:26-199](), [Data/DATA.CDE:200-379](), [Utilities/OPSUM.for:431-519]()\n\n## Output Generation Timing\n\nThe output system operates at different timescales:\n\n1. **Daily Output**: Generated during the OUTPUT phase of the DYNAMIC cycle for variables like growth, water status, and stress factors.\n\n2. **Growth Stage Output**: Generated when the crop reaches specific growth stages (e.g., emergence, flowering, maturity).\n\n3. **Seasonal Output**: Generated at the SEASEND phase, providing summary information for the entire crop season.\n\nThe frequency of detailed outputs can be controlled through the `FROP` parameter, which defines how often detailed outputs are written.\n\nSources: [Plant/CERES-Wheat_Barley/CER_Output.for:246-282](), [Utilities/OPSUM.for:428-464]()\n\n## Summary\n\nThe output generation system in DSSAT-CSM provides comprehensive documentation of simulation results through standardized files and formats. The system is modular, allowing crop-specific output while maintaining consistent formatting and organization across different crop models. The dual format support (text and CSV) ensures compatibility with different data analysis workflows and tools."])</script><script>self.__next_f.push([1,"30:T3e48,"])</script><script>self.__next_f.push([1,"# Configuration System\n\n\u003cdetails\u003e\n\u003csummary\u003eRelevant source files\u003c/summary\u003e\n\nThe following files were used as context for generating this wiki page:\n\n- [Data/DETAIL.CDE](Data/DETAIL.CDE)\n- [Data/ECONOMIC.CDE](Data/ECONOMIC.CDE)\n- [Data/GCOEFF.CDE](Data/GCOEFF.CDE)\n- [Data/GRSTAGE.CDE](Data/GRSTAGE.CDE)\n- [Data/JDATE.CDE](Data/JDATE.CDE)\n- [Data/OUTPUT.CDE](Data/OUTPUT.CDE)\n- [Data/PEST.CDE](Data/PEST.CDE)\n- [Data/SIMULATION.CDE](Data/SIMULATION.CDE)\n- [Data/SOIL.CDE](Data/SOIL.CDE)\n- [Data/WEATHER.CDE](Data/WEATHER.CDE)\n- [Soil/SoilWater/OPSWBL.for](Soil/SoilWater/OPSWBL.for)\n\n\u003c/details\u003e\n\n\n\nThe DSSAT-CSM (Decision Support System for Agrotechnology Transfer - Cropping System Model) uses a standardized configuration system based on Code Definition (CDE) files. These files define the codes, parameters, options, and methods used throughout the simulation system, ensuring consistent data interchange between model components and standardized interpretation of input and output data.\n\nThis document describes the structure, purpose, and usage of the configuration files that form the backbone of DSSAT-CSM's data standardization system. For information about the input modules that process these configuration files, see [Input Module](#6.1).\n\n## Configuration File Overview\n\nThe DSSAT-CSM configuration system uses a series of text-based definition files with the `.CDE` extension. These files define standard codes and parameters used throughout the modeling system for data interchange, simulation control, and interpretation of input/output data.\n\nEach CDE file serves a specific domain of configuration:\n\n| File | Purpose |\n|------|---------|\n| DETAIL.CDE | Experimental details, management practices, and field observations |\n| SIMULATION.CDE | Simulation options, methods, and model selection |\n| OUTPUT.CDE | Output file definitions and variable descriptions |\n| WEATHER.CDE | Weather data parameters and codes |\n| SOIL.CDE | Soil profile and properties codes |\n| PEST.CDE | Pest and disease codes |\n| ECONOMIC.CDE | Economic analysis parameters |\n| GRSTAGE.CDE | Crop growth stage definitions |\n| JDATE.CDE | Julian date reference tables |\n| GCOEFF.CDE | Genotype coefficient codes |\n\nThese files collectively provide a standardized \"language\" that allows the various modules of DSSAT-CSM to communicate with each other and with external data sources.\n\nSources: [Data/DETAIL.CDE](), [Data/SIMULATION.CDE](), [Data/OUTPUT.CDE](), [Data/WEATHER.CDE](), [Data/SOIL.CDE](), [Data/PEST.CDE](), [Data/ECONOMIC.CDE](), [Data/GRSTAGE.CDE](), [Data/JDATE.CDE](), [Data/GCOEFF.CDE]()\n\n## Configuration File Structure\n\nThe CDE files follow a consistent structure that makes them both human-readable and machine-parsable. Each file contains:\n\n- A header section with the file name and versioning information\n- A description of the file's purpose\n- Multiple sections denoted by asterisks (`*`) and section titles\n- Tabular content with columns for codes, descriptions, and sometimes source information\n\n```mermaid\nflowchart TD\n    subgraph \"CDE File Structure\"\n        header[\"*FILE TITLE\u003cbr\u003e! Version info\"]\n        desc[\"! Description text\"]\n        section1[\"*Section Name\u003cbr\u003e@CDE DESCRIPTION SO\"]\n        codes1[\"Code entries\u003cbr\u003eCODE Description Source\"]\n        section2[\"*Another Section\u003cbr\u003e@CDE DESCRIPTION SO\"]\n        codes2[\"More code entries\u003cbr\u003eCODE Description Source\"]\n    end\n\n    header --\u003e desc\n    desc --\u003e section1\n    section1 --\u003e codes1\n    codes1 --\u003e section2\n    section2 --\u003e codes2\n```\n\nThe consistent structure allows the DSSAT-CSM system to parse these files efficiently while maintaining human readability for researchers and developers.\n\nSources: [Data/DETAIL.CDE:1-25](), [Data/SIMULATION.CDE:1-7]()\n\n## Code Definition Format\n\nThe core component of each CDE file is the code definition table. Each table follows a standardized format:\n\n```\n@CDE     DESCRIPTION                                                          SO\nCODE     Detailed description of the code and its use                         IB\n```\n\nWhere:\n- `CDE` is the code identifier\n- `DESCRIPTION` provides a human-readable explanation\n- `SO` indicates the source of the code (typically \"IB\" for IBSNAT, the International Benchmark Sites Network for Agrotechnology Transfer)\n\nThe codes defined in these files are used throughout the DSSAT-CSM system to:\n\n1. Control simulation behavior\n2. Define input parameters\n3. Structure output data\n4. Standardize experimental data\n5. Set model boundaries and constraints\n\nSources: [Data/DETAIL.CDE:13-24]()\n\n## Configuration System Architecture\n\nThe configuration system serves as a bridge between the user inputs, model components, and output systems. It provides a standardized framework that allows different modules to communicate through well-defined codes and parameters.\n\n```mermaid\ngraph TB\n    subgraph \"Configuration System\"\n        direction TB\n        CDEFiles[\"CDE Files\"]\n        CDEParser[\"Code Definition Parser\"]\n    end\n\n    subgraph \"Input System\"\n        InputFiles[\"Experiment Files\u003cbr\u003e(.X, .A, .T, etc.)\"]\n        InputParser[\"Input Parser\"]\n    end\n\n    subgraph \"Model Components\"\n        SimControl[\"Simulation Control\"]\n        PlantModels[\"Plant Models\"]\n        SoilModels[\"Soil Models\"]\n        WeatherModels[\"Weather Models\"]\n        ManagementOps[\"Management Operations\"]\n    end\n\n    subgraph \"Output System\"\n        OutputGen[\"Output Generators\"]\n        OutputFiles[\"Output Files\"]\n    end\n\n    InputFiles --\u003e InputParser\n    CDEFiles --\u003e CDEParser\n    CDEParser --\u003e InputParser\n    InputParser --\u003e SimControl\n    CDEParser --\u003e SimControl\n    SimControl --\u003e PlantModels\n    SimControl --\u003e SoilModels\n    SimControl --\u003e WeatherModels\n    SimControl --\u003e ManagementOps\n    SimControl --\u003e OutputGen\n    CDEParser --\u003e OutputGen\n    OutputGen --\u003e OutputFiles\n```\n\nThis architecture ensures that all components of the DSSAT-CSM system share a common \"language\" for data interchange and interpretation.\n\nSources: [Data/DETAIL.CDE](), [Data/SIMULATION.CDE](), [Data/OUTPUT.CDE]()\n\n## Key Configuration Files\n\n### DETAIL.CDE\n\nThe DETAIL.CDE file defines codes for experimental details, field observations, management practices, and measurement units. It is one of the most extensive configuration files, containing codes for:\n\n- Headers used in data files\n- Chemical applications\n- Crop and weed species\n- Diseases and pests\n- Drainage specifications\n- Environmental modifications\n- Fertilizer applications\n- Harvest components\n- Soil analysis methods\n- Planting materials and practices\n\nExample excerpt from DETAIL.CDE for crop codes:\n\n```\n*Crop and Weed Species\n@CDE     DESCRIPTION                                                          SO\nAL       Alfalfa                                                              IB\nAM       Amaranth                                                             IB\nBA       Barley                                                               IB\nBN       Dry bean                                                             IB\nMZ       Maize                                                                IB\nRI       Rice                                                                 IB\nSB       Soybean                                                              IB\nWH       Wheat                                                                IB\n```\n\nSources: [Data/DETAIL.CDE:236-286]()\n\n### SIMULATION.CDE\n\nThe SIMULATION.CDE file defines the options and methods used to control simulation runs. It includes codes for:\n\n- Simulation start conditions\n- Water, symbiosis, and CO2 simulation options\n- Methods for weather, soil conditions, evapotranspiration, etc.\n- Management settings for planting, irrigation, fertilization, etc.\n- Output options\n- Crop model specifications\n\nExample excerpt showing simulation methods:\n\n```\n*Simulation/Methods/Evapotransportation\n@CDE     DESCRIPTION                                                          SO\nF        FAO-56                                                               IB\nR        Priestley-Taylor/Ritchie                                             IB\nS        ASCE Std Ref ET, Short ref                                           IB\nT        ASCE Std Ref ET, Tall ref                                            IB\n```\n\nOf particular importance is the crop models section, which maps model codes to crops:\n\n```\n*Simulation/Crop Models\n@MODEL  CROP  Description\nCRGRO    SB   CROPGRO-Soybean\nMZCER    MZ   CERES-Maize\nRICER    RI   CERES-Rice\nWHAPS    WH   NWHEAT-Wheat\n```\n\nSources: [Data/SIMULATION.CDE:43-52](), [Data/SIMULATION.CDE:153-212]()\n\n### OUTPUT.CDE\n\nThe OUTPUT.CDE file defines the output file structure and contents for the DSSAT-CSM. It lists:\n\n- Daily output files\n- CSV format files\n- Seasonal summary files\n- Information and log files\n\nEach output file is defined with a name, code, and description:\n\n```\n@NAME......... CDE Description....................................... ALIAS\nPlantGro.OUT    PG Daily plant growth output file                     OUTG\nSoilWat.OUT     SW Daily soil water output file                       OUTWAT\nWeather.OUT     WE Daily weather output file                          OUTWTH\nSummary.OUT     SU Seasonal summary output file                       OUTSUM\n```\n\nSources: [Data/OUTPUT.CDE:7-29]()\n\n### SOIL.CDE\n\nThe SOIL.CDE file defines codes for soil properties and parameters used in soil profile descriptions and analyses:\n\n```\n@CDE     DESCRIPTION                                                          \nSLLL     Lower limit of plant extractable soil water, cm3 cm-3 \nSDUL     Drained upper limit, cm3 cm-3                                      \nSSAT     Upper limit, saturated, cm3 cm-3                      \nSLOC     Organic carbon, %                                     \nSLCL     Clay (\u003c0.002 mm), %                                  \n```\n\nSources: [Data/SOIL.CDE:17-92]()\n\n### WEATHER.CDE\n\nThe WEATHER.CDE file defines weather data parameters, codes, and flags used in weather data files:\n\n```\n@CDE     DESCRIPTION                                                          SO\nSRAD     Daily solar radiation, MJ m-2 day-1                                  IB\nTMAX     Daily temperature maximum, oC                                        IB\nTMIN     Daily temperature minimum, oC                                        IB\nRAIN     Daily rainfall (incl. snow), mm day-1                                IB\n```\n\nSources: [Data/WEATHER.CDE:68-71]()\n\n## Code Usage Flow\n\nThe configuration system follows a specific flow for code usage throughout the DSSAT-CSM:\n\n```mermaid\nsequenceDiagram\n    participant User\n    participant InputFiles as Input Files\n    participant CDE as CDE Files\n    participant InputModule as Input Module\n    participant SimulationEngine as Simulation Engine\n    participant OutputModule as Output Module\n    \n    User-\u003e\u003eInputFiles: Creates/Edits\n    InputFiles-\u003e\u003eInputModule: Provides Data\n    CDE-\u003e\u003eInputModule: Provides Code Definitions\n    InputModule-\u003e\u003eSimulationEngine: Standardized Input\n    SimulationEngine-\u003e\u003eOutputModule: Simulation Results\n    CDE-\u003e\u003eOutputModule: Output Formats\n    OutputModule-\u003e\u003eUser: Formatted Results\n```\n\nThis flow ensures that all data follows standardized formats and interpretations throughout the simulation process.\n\nSources: [Data/DETAIL.CDE](), [Data/SIMULATION.CDE](), [Data/OUTPUT.CDE]()\n\n## Output File Definition Example\n\nTo demonstrate how the configuration system defines output formats, here's an example from the Soil Water output file configuration implementation:\n\n```mermaid\ngraph TD\n    subgraph \"Output Definition in OUTPUT.CDE\"\n        OutDef[\"SoilWat.OUT: Daily soil water output file\"]\n    end\n\n    subgraph \"Implementation in OPSWBL.for\"\n        FileOpen[\"Open output file\"]\n        WriteHeader[\"Write headers\"]\n        WriteVars[\"Write variables\"]\n        FormatOut[\"Format output data\"]\n    end\n\n    OutDef --\u003e FileOpen\n    FileOpen --\u003e WriteHeader\n    WriteHeader --\u003e WriteVars\n    WriteVars --\u003e FormatOut\n```\n\nThe implementation in [Soil/SoilWater/OPSWBL.for]() shows how output files are structured based on the definitions in the CDE files, including:\n\n1. Opening the output file (lines 71-84)\n2. Writing variable descriptions (lines 102-120)\n3. Formatting variable names based on soil layers (lines 130-153)\n4. Outputting formatted data (lines 166-174)\n\nSources: [Soil/SoilWater/OPSWBL.for:71-174](), [Data/OUTPUT.CDE:24]()\n\n## Adding New Codes\n\nDSSAT-CSM allows for extension of the code system by following specific guidelines outlined in the configuration files:\n\n1. Add new codes with a clear reference to the source (in the SO column)\n2. Document the person adding the code as a comment in the file\n3. For codes that extend existing sections (e.g., fertilizers with code FExxx), use a letter in the third position to identify the contributor (e.g., FEKxx for codes added by someone with a name starting with K)\n\nExample from DETAIL.CDE:\n```\n! Codes added by a user should be referenced in this field and the name and address \n! of the person adding the code should be entered as a comment (ie.with a '!' in column 1)\n! below this note. This is important to ensure that information from different workers \n! can be easily integrated. Users adding codes should also ensure that those constructed by\n! adding a number to a section code (eg.FE001,CH001) are clearly identified with a letter in the \n! third position (eg.FEK01 for a fertilizer code added by someone with a family name beginning with K).\n```\n\nSources: [Data/DETAIL.CDE:15-24]()\n\n## Integration with Model Components\n\nThe configuration system provides a foundation for multiple components of the DSSAT-CSM to work together. The following diagram illustrates how different model components connect through the standardized code system:\n\n```mermaid\ngraph TD\n    subgraph \"Configuration System\"\n        DETAIL[\"DETAIL.CDE\u003cbr\u003eExperiment Codes\"]\n        SIMULATION[\"SIMULATION.CDE\u003cbr\u003eSimulation Methods\"]\n        OUTPUT[\"OUTPUT.CDE\u003cbr\u003eOutput Formats\"]\n        WEATHER[\"WEATHER.CDE\u003cbr\u003eWeather Codes\"]\n        SOIL[\"SOIL.CDE\u003cbr\u003eSoil Codes\"]\n    end\n\n    subgraph \"Input Processing\"\n        IPEXP[\"IPEXP\u003cbr\u003eExperiment Input\"]\n        IPSIM[\"IPSIM\u003cbr\u003eSimulation Control\"]\n        IPVAR[\"IPVAR\u003cbr\u003eCultivar Input\"]\n    end\n\n    subgraph \"Core Modules\"\n        LAND[\"LAND Module\"]\n        PLANT[\"PLANT Module\"]\n        SOIL_MOD[\"SOIL Module\"]\n        WEATHER_MOD[\"WEATHER Module\"]\n        SPAM[\"SPAM Module\"]\n    end\n\n    DETAIL --\u003e|Defines codes for| IPEXP\n    SIMULATION --\u003e|Defines methods for| IPSIM\n    SIMULATION --\u003e|Defines crop models| PLANT\n    WEATHER --\u003e|Defines weather parameters| WEATHER_MOD\n    SOIL --\u003e|Defines soil parameters| SOIL_MOD\n    OUTPUT --\u003e|Defines output from| LAND\n    OUTPUT --\u003e|Defines output from| PLANT\n    OUTPUT --\u003e|Defines output from| SOIL_MOD\n    OUTPUT --\u003e|Defines output from| WEATHER_MOD\n\n    IPEXP --\u003e LAND\n    IPSIM --\u003e LAND\n    IPVAR --\u003e PLANT\n```\n\nThis integration ensures that all components use consistent definitions and interpretations of data throughout the simulation process.\n\nSources: [Data/DETAIL.CDE](), [Data/SIMULATION.CDE](), [Data/OUTPUT.CDE](), [Data/WEATHER.CDE](), [Data/SOIL.CDE]()\n\n## Summary\n\nThe DSSAT-CSM Configuration System, built on CDE files, provides a standardized framework for:\n\n1. Defining codes and parameters used throughout the modeling system\n2. Ensuring consistent data interchange between model components\n3. Standardizing experiment descriptions, simulation methods, and output formats\n4. Facilitating model extension through well-defined code addition procedures\n5. Creating a common \"language\" for all aspects of crop modeling in DSSAT\n\nThis system allows DSSAT-CSM to maintain consistency and interoperability while supporting a diverse range of crops, environments, and management practices through a unified configuration approach.\n\nSources: [Data/DETAIL.CDE](), [Data/SIMULATION.CDE](), [Data/OUTPUT.CDE]()"])</script><script>self.__next_f.push([1,"16:[\"$\",\"$L17\",null,{\"repoName\":\"DSSAT/dssat-csm-os\",\"wiki\":{\"metadata\":{\"repo_name\":\"DSSAT/dssat-csm-os\",\"commit_hash\":\"dc5d6ba0\",\"generated_at\":\"2025-05-06T09:42:17.437376\"},\"pages\":[{\"page_plan\":{\"id\":\"1\",\"title\":\"Overview\"},\"content\":\"$18\"},{\"page_plan\":{\"id\":\"2\",\"title\":\"System Architecture\"},\"content\":\"$19\"},{\"page_plan\":{\"id\":\"2.1\",\"title\":\"Build System\"},\"content\":\"$1a\"},{\"page_plan\":{\"id\":\"2.2\",\"title\":\"Simulation Control\"},\"content\":\"$1b\"},{\"page_plan\":{\"id\":\"3\",\"title\":\"Core Modules\"},\"content\":\"$1c\"},{\"page_plan\":{\"id\":\"3.1\",\"title\":\"LAND Module\"},\"content\":\"$1d\"},{\"page_plan\":{\"id\":\"3.2\",\"title\":\"SOIL Module\"},\"content\":\"$1e\"},{\"page_plan\":{\"id\":\"3.3\",\"title\":\"PLANT Module\"},\"content\":\"$1f\"},{\"page_plan\":{\"id\":\"3.4\",\"title\":\"WEATHER Module\"},\"content\":\"$20\"},{\"page_plan\":{\"id\":\"3.5\",\"title\":\"SPAM Module\"},\"content\":\"$21\"},{\"page_plan\":{\"id\":\"3.6\",\"title\":\"Management Operations\"},\"content\":\"$22\"},{\"page_plan\":{\"id\":\"4\",\"title\":\"Plant Models\"},\"content\":\"$23\"},{\"page_plan\":{\"id\":\"4.1\",\"title\":\"CROPGRO Model\"},\"content\":\"$24\"},{\"page_plan\":{\"id\":\"4.2\",\"title\":\"CERES Models\"},\"content\":\"$25\"},{\"page_plan\":{\"id\":\"4.3\",\"title\":\"FORAGE Model\"},\"content\":\"$26\"},{\"page_plan\":{\"id\":\"4.4\",\"title\":\"CSCER and Other Models\"},\"content\":\"$27\"},{\"page_plan\":{\"id\":\"5\",\"title\":\"Soil Processes\"},\"content\":\"$28\"},{\"page_plan\":{\"id\":\"5.1\",\"title\":\"Soil Water Balance\"},\"content\":\"$29\"},{\"page_plan\":{\"id\":\"5.2\",\"title\":\"Greenhouse Gas Emissions\"},\"content\":\"$2a\"},{\"page_plan\":{\"id\":\"5.3\",\"title\":\"Soil Dynamics\"},\"content\":\"$2b\"},{\"page_plan\":{\"id\":\"6\",\"title\":\"Input/Output System\"},\"content\":\"$2c\"},{\"page_plan\":{\"id\":\"6.1\",\"title\":\"Input Module\"},\"content\":\"$2d\"},{\"page_plan\":{\"id\":\"6.2\",\"title\":\"Measurement Codes\"},\"content\":\"$2e\"},{\"page_plan\":{\"id\":\"6.3\",\"title\":\"Output Generation\"},\"content\":\"$2f\"},{\"page_plan\":{\"id\":\"7\",\"title\":\"Configuration System\"},\"content\":\"$30\"}]},\"children\":[\"$\",\"$L3\",null,{\"parallelRouterKey\":\"children\",\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"errorScripts\":\"$undefined\",\"template\":[\"$\",\"$L4\",null,{}],\"templateStyles\":\"$undefined\",\"templateScripts\":\"$undefined\",\"notFound\":\"$undefined\",\"forbidden\":\"$undefined\",\"unauthorized\":\"$undefined\"}]}]\n"])</script><script>self.__next_f.push([1,"c:null\n10:[[\"$\",\"title\",\"0\",{\"children\":\"Input Module | DSSAT/dssat-csm-os | DeepWiki\"}],[\"$\",\"meta\",\"1\",{\"name\":\"description\",\"content\":\"The Input Module is a critical component of the DSSAT Cropping System Model (DSSAT-CSM) that handles the reading, processing, and validation of all input data required for crop simulations. This inclu\"}],[\"$\",\"meta\",\"2\",{\"property\":\"og:title\",\"content\":\"Input Module | DSSAT/dssat-csm-os | DeepWiki\"}],[\"$\",\"meta\",\"3\",{\"property\":\"og:description\",\"content\":\"The Input Module is a critical component of the DSSAT Cropping System Model (DSSAT-CSM) that handles the reading, processing, and validation of all input data required for crop simulations. This inclu\"}],[\"$\",\"meta\",\"4\",{\"property\":\"og:url\",\"content\":\"https://deepwiki.com/DSSAT/dssat-csm-os/6.1-input-module\"}],[\"$\",\"meta\",\"5\",{\"property\":\"og:site_name\",\"content\":\"DeepWiki\"}],[\"$\",\"meta\",\"6\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"$\",\"meta\",\"7\",{\"name\":\"twitter:card\",\"content\":\"summary\"}],[\"$\",\"meta\",\"8\",{\"name\":\"twitter:title\",\"content\":\"Input Module | DSSAT/dssat-csm-os | DeepWiki\"}],[\"$\",\"meta\",\"9\",{\"name\":\"twitter:description\",\"content\":\"The Input Module is a critical component of the DSSAT Cropping System Model (DSSAT-CSM) that handles the reading, processing, and validation of all input data required for crop simulations. This inclu\"}],[\"$\",\"link\",\"10\",{\"rel\":\"icon\",\"href\":\"/favicon.ico\",\"type\":\"image/x-icon\",\"sizes\":\"48x48\"}],[\"$\",\"link\",\"11\",{\"rel\":\"icon\",\"href\":\"/icon.png?66aaf51e0e68c818\",\"type\":\"image/png\",\"sizes\":\"16x16\"}],[\"$\",\"link\",\"12\",{\"rel\":\"apple-touch-icon\",\"href\":\"/apple-icon.png?a4f658907db0ab87\",\"type\":\"image/png\",\"sizes\":\"180x180\"}]]\n"])</script></body></html>